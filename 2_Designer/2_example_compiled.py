"""
Пример использования кода python интерфейса сконвертированного из UI файла Qt Designer.
"""
import sys
import random
from PySide6.QtCore import Qt
from PySide6.QtWidgets import QApplication, QMainWindow
from MainWindow import Ui_MainWindow  # импорт скомпилированного кода интерфейса

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Qt из модуля PySide6.QtCore содержит различные идентификаторы, используемые в библиотеке Qt
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и класса
главного окна QMainWindow.
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""


class MainWindow(QMainWindow, Ui_MainWindow):
    """
    Подкласс главного окна приложения с наследованием от класса главного окна и модуля
    интерфейса, скомпилированного из файла ui, созданного в Qt Designer
    """

    def __init__(self) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса главного окна
        self.setupUi(self)  # метод сборки интерфейса
        self.show()  # метод показа окна (по умолчанию окно скрыто)
        # Можно переопределять значение из файла UI в коде в данном модуле, но
        # по возможности все необходимы значения нужно задавать в файле UI при его создании
        # в Qt Designer или в Qt Creator.
        f = self.label.font()  # присвоение вызова метода настроек шрифта ярлыка переменной f
        f.setPointSize(25)  # установка размера шрифта
        self.label.setAlignment(Qt.AlignHCenter | Qt.AlignVCenter)  # размещение ярлыка в центре окна
        self.label.setFont(f)  # применение настроек шрифта

        # сигналы к кнопкам и другим виджетам присоединяются как обычно
        self.pushButton.pressed.connect(self.update_label)  # создание сигнала на нажатие кнопки с привязкой ресивера

    def update_label(self) -> None:
        """
        Метод ресивер (слот) для приема сигнала от виджета кнопки на ее нажатие
        :return: None
        """
        n = random.randint(1, 6)  # присвоение переменной случайного значения
        self.label.setText(f'{n}')  # изменение текста ярлыка


def main() -> None:
    """
    Функция запуска кода приложения верхнего уровня
    :return:
    """
    app = QApplication(sys.argv)  # создание экземпляра основного цикла событий приложения
    window = MainWindow()  # создание экземпляра главного окна интерфейса приложения
    app.exec()  # запуск основного цикла событий приложения


if __name__ == '__main__':  # данная конструкция предотвращает запуск кода верхнего уровня приложения при
    # импортировании данного файла как модуля
    main()  # вызов функции запуска кода верхнего уроня приложения
