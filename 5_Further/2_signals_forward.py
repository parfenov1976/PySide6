"""
Пример создания пользовательского сигнала с использованием класса Signal
из модуля PySide6.QtCore и его отправки после активации связанного с ним события
"""
import sys

from PySide6.QtCore import Signal
from PySide6.QtWidgets import QApplication, QMainWindow, QLineEdit

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и
класса основного окна QMainWindow, класса однострочного редактируемого текстового поля QLineEdit
Импорт из модуля PySide6.QtCore класса сигнала Signal.
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """
    message = Signal(str)  # создание экземпляра класса сигнала с указанием, что сигнал передает строку

    def __init__(self):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.message.connect(self.my_custom_fn)  # создание сигнала с привязкой метода ресивера
        # с помощью метода .connect()
        le = QLineEdit('Enter some text')  # создание экземпляра класса виджета однострочного текстового поля
        # с текстом по умолчанию
        le.textChanged.connect(self.message.emit)  # создание сигнала на изменение текстового поля
        # и привязка к нему метода отправки сигнала
        self.setCentralWidget(le)  # размещение в главном окне виджета однострочного текстового поля

    def my_custom_fn(self, s: object) -> None:
        """
        Метод ресивер (слот) для приема данных сигнала
        :param s: object - любой объект
        :return: None
        """
        print(s)


def main() -> None:
    """
    Функция запуска кода верхнего уровня приложения
    :return: None
    """
    app = QApplication(sys.argv)  # создание экземпляра класса основного цикла главного окна приложения
    window = MainWindow()  # создание экземпляра класса главного окна приложения
    window.show()  # вызов метода главного окна, разрешающего его показ (по умолчанию окно скрыто)
    app.exec()  # запуска основного цикла главного окна приложения


if __name__ == '__main__':  # данная конструкция предотвращает запуск кода верхнего уровня
    # при импортировании данного файла как модуля
    main()
