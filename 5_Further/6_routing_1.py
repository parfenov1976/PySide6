"""
Пример того как НЕ надо делать методы обработчики событий - нельзя делать множество
вложенных IF для реализации выполнения множества различных вариантов действий в одном методе.
!!! Функция или метод должны выполнять только один вариант действия !!!
"""
import sys

from PySide6.QtCore import QSize, Qt
from PySide6.QtWidgets import QApplication, QMainWindow, QLabel

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и
класса основного окна QMainWindow, класса виджета ярлыка QLabel.
Импорт из модуля PySide6.QtCore класса для создания объектов размеров QSize и класса Qt,
содержащего различные идентификаторы, используемые в библиотеке Qt
"""


class MainWindow(QMainWindow):
    """
    Подкласс главного окна приложения от супер класса главных окон
    """

    def __init__(self):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.label = QLabel('Click in this window')  # создание экземпляра класса ярлыка с надписью
        self.status = self.statusBar()  # записываем в аттрибут для объекта ссылку на метод класс основного окна
        # для вывода сообщений в строку статусов главного окна
        self.setFixedSize(QSize(200, 200))  # Установка фиксированного размера окна, т.е. без возможности изменения
        self.setCentralWidget(self.label)  # размещение ярлыка с надписью в главном окне

    def mouseMoveEvent(self, e) -> None:
        """
        Обработчик событий движения курсора мышки
        (срабатывает только с одновременным нажатием на кнопку мыши)
        :param e: event из PySide6.QtGui.QMouseEvent содержит события с мыши
        :return: None
        """
        self.label.setText('mouseMoveEvent')

    def mousePressEvent(self, e) -> None:
        """
        Обработчик событий нажатия кнопок мыши - пример неправильной реализации метода
        с большим набором выполняемых действий
        :param e: event из PySide6.QtGui.QMouseEvent содержит события с мыши
        :return:
        """
        button = e.button()  # метод события для извлечения информации о нажатии кнопок мыши
        if button == Qt.LeftButton:  # проверка на нажатие левой кнопки мыши
            self.label.setText('mousePressedEvent LEFT')  # смена надписи на ярлыке
            if e.x() < 100:  # извлечение из события координаты Х курсора в момент клика и сравнение с условием
                # <100 клик по левой половине окна, >100 клик по правой половине
                self.status.showMessage('Left click on left')  # вывод сообщения в строку статуса главного окна
                self.move(self.x() - 10, self.y())  # извлечение координат x и y ЛВУ окна и перемещение окна по заданным
                # координатам с приращением
            else:
                self.status.showMessage('Left click on right')
                self.move(self.x() + 10, self.y())  # извлечение координат x и y ЛВУ окна и перемещение окна по заданным
                # координатам с приращением
        elif button == Qt.MiddleButton:  # проверка на нажатие средней кнопки мыши
            self.label.setText('mousePressedEvent MIDDLE')  # смена надписи на ярлыке
        elif button == Qt.RightButton:  # проверка на нажатие правой кнопки мыши
            self.label.setText('mousePressedEvent RIGHT')  # смена надписи на ярлыке
            if e.x() < 100:  # извлечение из события координаты Х курсора в момент клика и сравнение с условием
                # <100 клик по левой половине окна, >100 клик по правой половине
                self.status.showMessage('Right click in left')  # вывод сообщения в строку статуса главного окна
                print('Something else here')  # вывод сообщения в терминал
                self.move(10, 10)  # перемещение окна по заданным координатам ЛВУ
            else:
                self.status.showMessage('Right click on right')  # вывод сообщения в строку статуса главного окна
                self.move(400, 400)  # перемещение окна по заданным координатам ЛВУ


def main() -> None:
    """
    Функция запуска кода верхнего уроня приложения
    :return: None
    """
    app = QApplication(sys.argv)  # создание экземпляра основного цикла главного окна приложения
    window = MainWindow()  # создание экземпляра главного окна приложения
    window.show()  # вызов метода вывода окна приложения (по умолчанию окно спрятано)
    app.exec()  # запуска основного цикла главного окна приложения


if __name__ == '__main__':  # данное условие нужно для предотвращения запуска кода верхнего уровня при
    # импортировании данного файла как модуля
    main()  # вызов функции запуска кода верхнего уровня приложения
