"""
Пример создания иконки для лотка (трея) панели задач с привязкой к ней меню действий.
В данном примере представлено приложение без главного окна (вообще без окон).
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QColorDialog,
                               QMenu,
                               QSystemTrayIcon
                               )
from PySide6.QtGui import QAction, QIcon

"""
Модуль os нужен для создания путей к файлам для разных платформ.
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля QtCore класса QSize для управления размерами объектов и класса
Qt - содержит различные идентификаторы, используемые в библиотеке Qt
Импорт из модуля QtWidgets PySide6 класса для управления приложением QApplication и
класса основного окна QMainWindow, класса виджета диалогового окна выбора цвета, класса виджета
панели инструментов меню, класса виджета иконки для лотка (трея) панели задач QSystemTrayIcon.
Импорт из модуля QtGui класса эффектов действия QAction, класса для создания иконок QIcon.
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""


def copy_color_hex() -> None:
    """
    Функция, запускающая диалоговое окно выбора цвета
    :return: None
    """
    if dialog.exec():  # данная конструкция запускает диалог выбора цвета и в случае успеха производит действия
        color = dialog.currentColor()  # записывает в переменную параметры выбранного цвета
        clipboard.setText(color.name())  # передает в буфер обмена параметры выбранного цвета


def copy_color_rgb() -> None:
    """
    Функция, запускающая диалоговое окно выбора цвета
    :return: None
    """
    if dialog.exec():  # данная конструкция запускает диалог выбора цвета и в случае успеха производит действия
        color = dialog.currentColor()  # записывает в переменную параметры выбранного цвета
        clipboard.setText(f'rgb({color.red()}, {color.green()}, {color.blue()})')
        # передает в буфер обмена параметры выбранного цвета


def copy_color_hsv() -> None:
    """
    Функция, запускающая диалоговое окно выбора цвета
    :return: None
    """
    if dialog.exec():  # данная конструкция запускает диалог выбора цвета и в случае успеха производит действия
        color = dialog.currentColor()  # записывает в переменную параметры выбранного цвета
        clipboard.setText(f'hsv({color.hue()}, {color.saturation()}, {color.value()})')
        # передает в буфер обмена параметры выбранного цвета


app = QApplication(sys.argv)  # Создание экземпляра класса основного цикла событий приложения.
app.setStyle('Fusion')  # более интересная глобальная кроссплатформенна тема Fusion
app.setQuitOnLastWindowClosed(False)  # отключает закрытие приложения при закрытии всех его окон
# т.е. при закрытии всех окон приложения оно остается запущенным
clipboard = QApplication.clipboard()  # создание буфера обмена
dialog = QColorDialog()  # создание экземпляра класса диалогового окна выбора цвета
icon = QIcon('icon.png')  # создание иконки из графического файла
tray = QSystemTrayIcon()  # создание экземпляра класса виджета иконки для лотка (трея) панели задач
tray.setIcon(icon)  # привязка иконки к виджету иконки для панели задач
tray.setVisible(True)  # разрешение видимости иконки для панели задач
menu = QMenu()  # создание экземпляра класса виджета меню
action1 = QAction('Hex')  # создание экземпляра класса эффекта действия с указанием его наименования
action1.triggered.connect(copy_color_hex)  # создание сигнала с привязкой ресивера для пункта меню
menu.addAction(action1)  # размещение эффекта действия в меню
action2 = QAction('RGB')  # создание экземпляра класса эффекта действия с указанием его наименования
action2.triggered.connect(copy_color_rgb)  # создание сигнала с привязкой ресивера для пункта меню
menu.addAction(action2)  # размещение эффекта действия в меню
action3 = QAction('HSV')  # создание экземпляра класса эффекта действия с указанием его наименования
action3.triggered.connect(copy_color_hsv)  # создание сигнала с привязкой ресивера для пункта меню
menu.addAction(action3)  # размещение эффекта действия в меню
quit_app = QAction('Quit')  # создание экземпляра класса эффекта действия с указанием его наименования
quit_app.triggered.connect(app.quit)  # создание сигнала с командой на выход из приложения
menu.addAction(quit_app)  # размещение эффекта действия в меню
tray.setContextMenu(menu)  # установка созданного меню как контекстного меню
app.exec()  # Запуск основного цикла событий главного окна приложения.
