"""
Пример подмешивания дополнительных пользовательских данных к встроенным в виджеты сигналам.
Решение проблем при создании виджетов в цикле.
"""
import sys

from PySide6.QtWidgets import (
    QApplication,
    QMainWindow,
    QPushButton,
    QHBoxLayout,
    QLabel,
    QVBoxLayout,
    QWidget
)

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и
класса основного окна QMainWindow, класса нажимаемой кнопки QPushButton, классов слоев с
вертикальной организацией виджетов QVBoxLayout и с горизонтальной организацией виджетов
QHBoxLayout, класса виджета ярлыка QLabel, класса базового пустого виджета QWidget.
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        v = QVBoxLayout()  # создание экземпляра слоя с вертикальным расположением виджетов
        h = QHBoxLayout()  # создание экземпляра слоя с горизонтальным расположением виджетов
        for a in range(10):  # цикла для конвейерного создания виджетов
            button = QPushButton(str(a))  # создание экземпляра класса кнопки с надписью
            """
            button.clicked.connect(lambda checked: self.button_clicked(a))
            При таком варианте 'a' сохраняет последнее значение, т.к. для функции лямбда данная
            переменная является внешним именем, т.е. ссылка та же, только на каждом шаге значение
            меняется. Таким образом, у нас будет много сигналов, передающих одно и тоже значение,
            последнее, которое было присвоено а на последнем шаге цикла.
            Для развязки ссылок нужно создать внутреннюю переменную 'var' для хранения значения,
            которая на каждом шаге цикла будет уникальной для этого шага (см. ниже).
            Для исправления ошибки с позиционными аргументами после использования переменной
            в виде ключевого сигнал checked также нужно сделать ключевым аргументом (особенности PySide)
            """
            button.clicked.connect(lambda checked=False, var=a: self.button_clicked(var))  # создание сигнала
            # на нажатие кнопки с передачей доп данных в виде цифры, присвоенной кнопке
            h.addWidget(button)  # размещение кнопок в слое для виджетов
        v.addLayout(h)  # размещение слоя с кнопками в слое для виджетов
        self.label = QLabel('')  # создание экземпляра класса ярлыка
        v.addWidget(self.label)  # размещение ярлыка в слое для виджетов
        w = QWidget()  # создание контейнера для слоев с виджетами
        w.setLayout(v)  # размещение в контейнере слоя
        self.setCentralWidget(w)  # размещение контейнера с слоями для виджетов в главном окне приложения

    def button_clicked(self, n: int) -> None:
        """
        Метод ресивер (слот) сигнала на нажатие кнопки
        :param n: int - цифра, присвоенная кнопке (подмешанные в сигнал пользовательские данные)
        :return: None
        """
        self.label.setText(str(n))  # вывод в ярлык значения пользовательских данных


def main() -> None:
    """
    Функция запуска кода верхнего уровня приложения
    :return: None
    """
    app = QApplication(sys.argv)  # создание экземпляра класса основного цикла главного окна приложения
    window = MainWindow()  # создание экземпляра класса главного окна приложения
    window.show()  # вызов метода главного окна, разрешающего его показ (по умолчанию окно скрыто)
    app.exec()  # запуска основного цикла главного окна приложения


if __name__ == '__main__':  # данная конструкция предотвращает запуск кода верхнего уровня
    # при импортировании данного файла как модуля
    main()
