"""
Пример подмешивания дополнительных пользовательских данных к встроенным в виджеты сигналам.
Дополнительные примеры использования анонимной функции для подмешивания пользовательских
данных в стандартные сигналы
"""
import sys

from PySide6.QtWidgets import QApplication, QMainWindow

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и
класса основного окна QMainWindow.
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса

        """
        Подключенная к сигналу функция будет вызвана как только измениться название окна
        Новое название будет передано в метод ресивер
        """
        self.windowTitleChanged.connect(self.on_window_title_changed)

        """
        Подключенная к сигналу функция будет вызвана как только измениться название окна
        Новое название будет отброшено анонимной функцией и метод ресивер будет вызван без аргументов 
        """
        self.windowTitleChanged.connect(lambda x: self.my_custom_fn())
        """
        Подключенная к сигналу функция будет вызвана как только измениться название окна
        Новое название будет передано в метод ресивер и заменит наименование по умолчанию 
        """
        self.windowTitleChanged.connect(lambda x: self.my_custom_fn(x))
        """
        Подключенная к сигналу функция будет вызвана как только измениться название окна
        Новое название будет передано в метод ресивер и заменит наименование по умолчанию
        Дополнительные данные будут переданы через анонимную функцию в метод ресивер 
        """
        self.windowTitleChanged.connect(lambda x: self.my_custom_fn(x, 25))
        """
        Данное присвоение имени окну приложения активирует все выше расположенные сигналы
        для передачи нового названия присоединенному методу ресиверу или анонимной функции
        в качестве первого аргумента
        """
        self.setWindowTitle('This will trigger all the signals')

    def on_window_title_changed(self, s: str) -> None:
        """
        Метод ресивер (слот) сигнала на нажатие кнопки
        :param s: str - строка, передаваемая вместе с сигналом (подмешанные пользовательские данные)
        :return: None
        """
        print(s)

    def my_custom_fn(self, a='Hello!', b=5) -> None:
        """
        Метод ресивер (слот) сигнала на изменение названия окна приложения
        :param a: str - строка, со значением по умолчанию или дополнительные данные
        :param b: int - дополнительные подмешанные пользовательские данные
        :return: None
        """
        print(a, b)


def main() -> None:
    """
    Функция запуска кода верхнего уровня приложения
    :return: None
    """
    app = QApplication(sys.argv)  # создание экземпляра класса основного цикла главного окна приложения
    window = MainWindow()  # создание экземпляра класса главного окна приложения
    window.show()  # вызов метода главного окна, разрешающего его показ (по умолчанию окно скрыто)
    app.exec()  # запуска основного цикла главного окна приложения


if __name__ == '__main__':  # данная конструкция предотвращает запуск кода верхнего уровня
    # при импортировании данного файла как модуля
    main()
