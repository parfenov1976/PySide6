"""
Пример использования библиотеки PyQtGraph для черчения графиков, диаграмм и других визуализаций данных
с примером изменения цвета, толщины и стиля линий.
В данном примере реализован механизм обновления линии графика по изменению данных
без изменения (перерисовки) остальных элементов диаграммы
"""
import sys
from random import randint

from PySide6 import QtWidgets, QtCore
import pyqtgraph as pg

"""
Из модуля random импорт класса случайного числа randint.
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QtWidgets.QApplication([]) в качестве аргумента передается пустой список.
Импорт из библиотеки PySide6 модуля виджетов QtWidgets.
Из библиотеки pyqtgraph.
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""


class MainWindow(QtWidgets.QMainWindow):
    """
    Класс главного окна приложения от супер-класса виджета главных окон
    """

    def __init__(self) -> None:
        """
        Конструктор главного окна приложения
        """
        QtWidgets.QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.graph_widget = pg.PlotWidget()  # создание виджета холста для черчения
        self.setCentralWidget(self.graph_widget)  # размещение холста в главном окне приложения

        # генерация набора данных для построения графика
        self.x = list(range(100))
        self.y = [randint(0, 100) for _ in range(100)]

        self.graph_widget.setBackground('w')  # установка белого цвета на задний фон
        # можно использовать для цвета объект QColor, можно задавать цвет в hex или RGB и RGBA
        # также можно использовать цвет заднего фона согласно настройкам системы
        # color = self.palette().color(QtGui.QPalette.Window)
        # по умолчанию цвет заднего фона черный

        pen = pg.mkPen(color=(255, 0, 0))  # создание пера для черчения линии графика
        self.data_line = self.graph_widget.plot(self.x, self.y, pen=pen)
        # сохранение ссылки на линию графика в аттрибуте главного окна

        self.timer = QtCore.QTimer()  # создание объекта таймера
        self.timer.setInterval(50)  # установка длительности интервала таймера
        self.timer.timeout.connect(self.update_plot_data)  # создание сигнала на истечение таймера
        # с привязкой метода ресивера
        self.timer.start()

    def update_plot_data(self) -> None:
        """
        Метод ресивер на обновление данных линии графика
        :return: None
        """
        self.x = self.x[1:]  # удаление первого значения
        self.x.append(self.x[-1] + 1)  # добавление в конце еще одного значения большего на 1 чем последнее
        self.y = self.y[1:]  # удаление первого значения
        self.y.append(randint(0, 100))  # добавление в конец случайной величины
        self.data_line.setData(self.x, self.y)  # обновление данных линии графика
        # если не удалять первые значения, то график будет дополняться, а не смещаться


def main() -> None:
    """
    Функция запуска кода приложения верхнего уровня
    :return: None
    """
    app = QtWidgets.QApplication(sys.argv)  # создание основного цикла событий приложения
    window = MainWindow()  # создание экземпляра главного окна приложения
    app.setStyle('Fusion')  # более интересная глобальная кроссплатформенна тема Fusion
    window.show()  # установка видимости главного окна (по умолчанию окно спрятано)
    app.exec()  # запуск основного цикла событий приложения


if __name__ == '__main__':  # проверка имени запущенного модуля для предотвращения запуска
    # кода верхнего уровня данного модуля при его импортировании
    main()  # вызов функции запуска кода приложения верхнего уровня
