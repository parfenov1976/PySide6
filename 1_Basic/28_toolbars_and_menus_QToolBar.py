"""
Пример использования виджета QToolBar для создания панели меню с иконками.
"""
import sys
import os
from PySide6.QtCore import Qt, QSize
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QLabel,
                               QToolBar,
                               QStatusBar
                               )
from PySide6.QtGui import QAction, QIcon

"""
Модуль os нужен для создания путей к файлам для разных платформ.
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля QtCore класса QSize для управления размерами объектов и класса
Qt - содержит различные идентификаторы, используемые в библиотеке Qt
Импорт из модуля QtWidgets PySide6 класса для управления приложением QApplication и
класса основного окна QMainWindow, класса виджета ярлыков (надписей) QLabel, класса виджета
панели меню QToolBar.
Импорт из модуля QtGui класса эффектов действия QAction, класса для создания иконок QIcon
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""

basedir = os.path.dirname(__file__)  # извлечение пути до директории, из которой запущено приложение


class MainWindow(QMainWindow):
    """
    Подкласс главного окна приложения с наследованием от класса виджета главного окна.
    """

    def __init__(self):
        """
        Конструктор главного окна приложения.
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.setWindowTitle('My App')  # присвоение имени главному окну приложения
        self.label = QLabel('Hello!')  # создание экземпляра класса виджета ярлыка с надписью
        self.label.setAlignment(Qt.AlignCenter)  # установка настройки с центральным расположением надписи
        self.setCentralWidget(self.label)  # размещение надписи в главном окне приложения
        self.toolbar = QToolBar('My main toolbar')  # создание экземпляра панели меню с указанием имени панели
        self.toolbar.setIconSize(QSize(16, 16))  # установка размера иконки
        self.addToolBar(self.toolbar)  # размещение панели меню в главном окне приложения
        self.button_action = QAction(QIcon(os.path.join(basedir, 'data', 'bug.png')), 'Your button', self)
        """
        Создание эффекта для кнопки панели меню. Данный эффект можно подключать к разным элементам интерфейса,
        которые выполняют одну и туже функцию для избежания многократного дублирования определения действий. 
        Текстовая строка задает имя кнопки. QIcon устанавливает иконку для кнопки.
        """
        self.button_action.setStatusTip('This is your button')  # установка строки, выводимой в панели статуса
        # наведении курсора на кнопку
        self.button_action.triggered.connect(self.on_my_tool_bar_button_click)  # создание согнала с привязкой
        # метода ресивера
        self.button_action.setCheckable(True)  # Устанавливает кнопку в режим переключателя. Если данный режим
        # не установлен, то при нажатии на кнопку сигнал всегда будет передавать False.
        self.toolbar.addAction(self.button_action)  # привязка эффекта к панели меню
        self.setStatusBar(QStatusBar(self))  # Создание экземпляра виджета панели статуса и
        # его размещение в главном окне приложения. При наведении курсора на кнопку панели меню
        # в статусе будет отображаться строка статуса кнопки

    @staticmethod
    def on_my_tool_bar_button_click(s: bool) -> None:
        """
        Метод ресивер (слот) для получения сигнала и его вывода.
        :param s: bool - содержимое сигнала от виджета.
        :return: None
        """
        print('click', s)


def main() -> None:
    """
    Функция запуска кода верхнего уровня приложения.
    """
    app = QApplication(sys.argv)  # Создание экземпляра класса основного цикла событий приложения.
    window = MainWindow()  # Создание главного окна приложения.
    window.show()  # Метод вывода главного окна приложения (по умолчанию окно спрятано).
    app.exec()  # Запуск основного цикла событий главного окна приложения.


if __name__ == '__main__':  # Данное условие предотвращает запуск кода верхнего уровня при
    # импортировании данного файла как модуля
    main()  # вызов функции запуска кода верхнего уровня
