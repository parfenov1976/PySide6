"""
Пример создания множественных окон в приложении без блокировки циклов событий других окон.
Для создания нового окна можно использовать любой виджет (из числа подклассов класса QWidget)
без передачи ему родительского объекта (не путать с классами). Данный пример дополнен возможностью
скрывать и показывать окно по нажатию кнопки с предварительной проверкой его видимости.
Окно при этом не пересоздается и сохраняет свое состояние. Дополнено примером связи между окнами.
"""
import sys
from random import randint
from PySide6.QtWidgets import (QApplication,
                               QLabel,
                               QMainWindow,
                               QPushButton,
                               QVBoxLayout,
                               QWidget,
                               QLineEdit)

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля PySide6.QtWidgets класса для управления приложением QApplication и
класса основного окна QMainWindow, класса виджета кнопки QPushButton, класса 
виджета ярлыка QLabel, класса слоев с вертикальной упаковкой виджетов QVBoxLayout,
базовый класс виджетов QWidget, класса виджета редактируемого однострочного текстового поля QLineEdit
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""


class AnotherWindow(QWidget):
    """
    Данное окно создается из супер-класса QWidget. Если ему не передать родительский объект,
    то оно появится в виде свободно-перемещаемого окна
    """

    def __init__(self) -> None:
        """
        Конструктор дополнительного окна приложения
        """
        QWidget.__init__(self)  # явный вызов конструктора родительского класса
        self.layout = QVBoxLayout()  # создание экземпляра класса слоя
        self.label = QLabel(f'Another Window {randint(0, 100)}')  # создание ярлыка с названием дополнительного окна
        self.layout.addWidget(self.label)  # размещение ярлыка на слое
        self.setLayout(self.layout)  # размещение слоя в дополнительном окне


class MainWindow(QMainWindow):
    """
    Подкласс главного окна приложения от супер-класса главного окна
    """

    def __init__(self) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.w = AnotherWindow()  # создаем экземпляр класса дополнительного окна
        self.button = QPushButton('Push for Window')  # создание кнопки для вызова дополнительного окна
        self.button.clicked.connect(self.toggle_window)  # создание сигнала с привязкой ресивера для кнопки
        self.input = QLineEdit()  # создание однострочного редактируемого текстового поля
        self.input.textChanged.connect(self.w.label.setText)  # создание сигнала об изменении текста в поле
        # и передача его в ярлык на главном окне приложения
        self.layout = QVBoxLayout()  # создание экземпляра класса слоя в главном окне
        self.layout.addWidget(self.button)  # размещение на слое виджета кнопки
        self.layout.addWidget(self.input)  # размещение на слое виджета редактируемого текстового поля
        self.container = QWidget()  # создание контейнера для слоя из класса базового виджета
        self.container.setLayout(self.layout)  # размещения слоя с виджета в контейнере
        self.setCentralWidget(self.container)  # размещение контейнера, содержащего слой с виджетами,
        # в главном окне приложения

    def toggle_window(self, checked: bool) -> None:
        """
        Метод ресивер (слот), открывающий и закрывающий по нажатию кнопки дополнительное окно
        :param checked: bool
        :return: None
        """
        if self.w.isVisible():  # проверяем видимость дополнительного окна
            self.w.hide()  # прячем окно, если оно видимо
        else:
            self.w.show()  # показывает окно, если оно не видимо


def main() -> None:
    app = QApplication(sys.argv)  # создание экземпляра основного цикла событий приложения
    window = MainWindow()  # создание экземпляра класса главного окна приложения
    window.show()  # Метод, показывающий главное окно (по умолчанию главное окно скрыто)
    app.exec()  # запуск основного цикла событий приложения


if __name__ == '__main__':  # Данная конструкция предотвращает запуск кода верхнего уровня в случае
    # импортирования данного файла как модуля
    main()  # вызов функции запуска кода верхнего уровня
