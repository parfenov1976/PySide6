#!/usr/bin/env python3
import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit, QVBoxLayout, QWidget

"""
Модуль sys нужен для доступа к аргументам командной строки. Если использование аргументов
командной строки не предполагается, то импорт можно не выполнять. При этом, при создании
приложения в класс QApplication([]) в качестве аргумента передается пустой список.
Импорт из модуля QtWidgets PySide6 класса для управления приложением QApplication и
класса виджетов окон QMainWindow, класса основного окна QMainWindow, класса ярлыка QLabel,
класса поля редактируемой строки QLineEdit, класса слоя для виджетов QVBoxLayout, класса базового
пустого виджета QWidget.
Другие виджеты можно найти по ссылке https://doc.qt.io/qt-5/widget-classes.html#basic-widget-classes
"""


class MainWindow(QMainWindow):
    """
    Подкласс QMainWindow для создания и настройки главного окна приложения
    """
    def __init__(self) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.setWindowTitle('My App')  # присвоение названия главному окну приложения
        self.label = QLabel()  # создание ярлыка для отображения надписи
        self.input = QLineEdit()  # создание поля строки для ввода текста
        self.input.textChanged.connect(self.label.setText)  # создание сигнала об изменении текста в строке ввода
        # передача его непосредственно на ярлык через метод установки текста в ярлыке
        layout = QVBoxLayout()  # создание слоя для размещения виджетов на нем
        layout.addWidget(self.input)  # размещение на слое поля строки ввода текста
        layout.addWidget(self.label)  # размещение на слое ярлыка для отображения текста
        conteiner = QWidget()  # создание контейнера для хранения слоя
        conteiner.setLayout(layout)  # помещение слоя в контейнер
        self.setCentralWidget(conteiner)  # размещение контейнера со слоем, содержащим виджеты
        # на главном окне приложения


def main() -> None:
    """
    Функция запуска кода верхнего уровня.
    :return: None
    """
    app = QApplication(sys.argv)  # создание экземпляра основного цикла приложения
    """
    На одно приложение нужен только один экземпляр QApplication.
    Передача sys.argv нужна, чтобы обеспечить возможность использования аргументов командной строки для приложения.
    Если использование аргументов командной строки не предполагается, то QApplication([]) тоже будет работать. 
    [] - пустой список.
    """
    window = MainWindow()  # создание экземпляра главного окна приложения
    window.show()  # Метод для вывода главного окна. По умолчанию окно спрятано.
    app.exec()  # Запуск основного цикла событий главного окна приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен.


if __name__ == '__main__':  # данное условие предотвращает запуск кода верхнего уровня модуля при его импортировании
    main()  # вызов функции запуска кода верхнего уровня
