"""
Основные компоненты интерфейса. Переключатель из радио кнопок.

Переключатели всегда компонуются группами. Для объединения переключателей в группу
можно воспользоваться компонентом QGroupBox или классом QButtonGroup.
Переключатель реализуется классом QRadioButton. Иерархия наследования:
(QObject, QPaintDevice) - QWidget - QAbstractButton - QRadioButton
Конструктор класса QRadioButton имеет два формата:
QRadioButton([parent=<None>]) QRadioButton(<Текст>[, parent=None])
Класс QRadioButton наследует все методы класса QAbstractButton (здесь приведены
только основные - полный их список смотрите на странице https://doc.qt.io/qt-6/
qabstractbutton.html):
♦ setText(<Текст>) - задает текст, который будет отображен на кнопке. Внутри текста
  символ &, указанный перед буквой или цифрой, задает комбинацию клавиш быстрого
  доступа. В этом случае буква, перед которой указан символ &, будет - в качестве подсказки
  пользователю - подчеркнута. Одновременное нажатие клавиши <Alt> и подчеркнутой
  буквы приведет к нажатию этой кнопки. Чтобы вывести сам символ &, необходимо
  его удвоить;
♦ text() - возвращает текст, отображаемый на кнопке;
♦ setShortcut(<Клавиша QKeySequence>) - задает клавишу быстрого доступа:
  button.setShortcut("Alt+B")
  button.setShortcut(QtGui.QKeySequence.mnemonic("&B"))
  button.setShortcut(QtGui.QKeySequence("Alt+B"))
  button.setShortcut(QtGui.QKeySequence(QtCore.Qt.Key.Key_F5))
♦ setIcon(<Значок QIcon>) - вставляет значок перед текстом кнопки;
♦ setIconSize(<Размеры QSize>) - задает размеры значка. Метод является слотом;
♦ setAutoRepeat(<Флаг>) - если в качестве параметра указано значение True, сигнал
  clicked будет периодически генерироваться, пока кнопка находится в нажатом состоянии;
♦ animateClick() - имитирует нажатие пользователем кнопки с анимацией. После нажатия
  кнопка находится в этом состоянии в течении 100 миллисекунд. Метод является слотом;
♦ click() - имитирует нажатие кнопки без анимации. Метод является слотом;
♦ setCheckable(<Флаг>) - если в качестве параметра указано значение True, то кнопка
  является переключателем, который может находиться в двух состояниях: установленном
  и неустановленном;
♦ setChecked(<Флаг>) - если в качестве параметра указано значение True, кнопка переключатель
  будет находиться в установленном состоянии. Метод является слотом;
♦ isChecked() - возвращает значение True, если кнопка-переключатель находится в установленном
  состоянии, и False - в противном случае;
♦ toggle() - переключает кнопку-переключатель. Метод является слотом;
♦ setAutoExclusive(<Флаг>) - если в качестве параметра указано значение True, внутри
  контейнера может быть установлена только одна кнопка-переключатель;
♦ setDown(<Флаг>) - если в качестве параметра указано значение True, кнопка будет находиться
  в нажатом состоянии;
♦ isDown() - возвращает значение True, если кнопка находится в нажатом состоянии,
  и False - в противном случае.
Класс QAbstractButton поддерживает следующие сигналы:
♦ pressed() - генерируется при нажатии кнопки;
♦ released() - генерируется при отпускании ранее нажатой кнопки;
♦ clicked(<Состояние>) - генерируется при нажатии и отпускании кнопки. Передаваемый
  обработчику параметр имеет значение True, если кнопка-переключатель установлена,
  и False, если она сброшена или это обычная кнопка, а не переключатель;
♦ toggled(<Состояние>) - генерируется при изменении состояния кнопки-переключателя.
  Через параметр доступно новое состояние кнопки.
"""

import os
from PySide6.QtWidgets import (QMainWindow,
                               QRadioButton,
                               QPlainTextEdit,
                               )
from PySide6.QtGui import QIcon

"""
Импорт из модуля PySide6.QtWidgets класс главного окна QMainWindow, 
класс радиокнопки QRadioButton,
класса многострочного редактируемого поля для текста QPlainTextEdit

Импорт из модуля PySide6.QtGui класса иконок QIcon
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent:  ссылка на родительский компонент
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Кнопка - QPushButton')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера главного окна
        self.txt_area = QPlainTextEdit(self)  # создание текстового поля
        self.txt_area.resize(150, 300)  # установка размера текстового поля
        self.txt_area.move(150, 0)  # указание смещения текстового поля в окне приложения

        self.btn_1 = QRadioButton('Кнопка 1 - Alt+1', self)
        self.btn_1.setShortcut('Alt+1')
        self.btn_1.resize(130, 24)
        self.btn_1.clicked.connect(self.on_clicked_btn_1)

        self.btn_2 = QRadioButton('Кнопка 2', self)
        self.btn_2.move(0, 35)
        self.btn_2.pressed.connect(self.on_pressed_btn_2)
        self.btn_2.released.connect(self.on_released_btn_2)

        self.btn_3 = QRadioButton('Кнопка 3', self)
        self.btn_3.move(0, 70)
        self.btn_3.setIcon(QIcon(os.path.join('data', 'icon.svg')))
        self.btn_3.setCheckable(True)
        self.btn_3.toggled.connect(self.on_toggled_btn_3)

    def on_clicked_btn_1(self) -> None:
        """
        Обработчик сигнала клика по кнопке
        """
        self.txt_area.appendPlainText('Кликнута кнопка 1')

    def on_pressed_btn_2(self) -> None:
        """
        Обработчик сигнала нажатия кнопки
        """
        self.txt_area.appendPlainText('Нажата кнопка 2')

    def on_released_btn_2(self) -> None:
        """
        Обработчик сигнала отпускания ранее нажатой кнопки
        """
        self.txt_area.appendPlainText('Отпущена кнопка 2')

    def on_toggled_btn_3(self, event: bool) -> None:
        """
        Обработчик сигнала переключения кнопки
        :param event: bool - событие сигнала
        """
        self.txt_area.appendPlainText(f'Кнопка 3 {"вкл" if event else "выкл"}')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
