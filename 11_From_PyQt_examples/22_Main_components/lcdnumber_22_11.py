"""
Основные компоненты интерфейса. Семисегментный индикатор (по типу экрана калькулятора)

Класс QLCDNumber реализует семисегментный индикатор, аналогичный используемым
в электронных часах и калькуляторах. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QLCDNumber
Форматы конструктора класса QLCDNumber:
QLCDNumber([parent=None])
QLCDNumber(<Количество цифр>[, parent=None])
Если количество отображаемых цифр не указано, используется значение 5.
Класс QLCDNumber поддерживает следующие методы (здесь приведены только основные -
полный их список смотрите на странице https://doc.qt.io/qt-6/qlcdnumber.html):
♦ display (<Значение>) - задает новое выводимое значение: целое число, вещественное
  число или строку:
  lcd.display(l054871)
  Метод является слотом;
♦ checkOverflow(<Число>) - возвращает значение True, если целое или вещественное
  число, указанное в параметре, не может быть отображено индикатором. В противном
  случае возвращает значение False;
♦ intValue() - возвращает выводимое значение в виде целого числа;
♦ value() - возвращает выводимое значение в виде вещественного числа;
♦ setSegmentStyle(<Стиль>) - задает стиль индикатора. В качестве параметра можно указать
  следующие элементы перечисления SegmentStyle из класса QLCDNumber: Outline
  (контурные сегменты), Filled (выпуклые сплошные сегменты) или Flat (плоские
  сплошные сегменты);
♦ setMode(<Режим>) - задает режим отображения чисел. В качестве параметра можно указать
  следующие элементы перечисления Mode из класса QLCDNumber: Нех (шестнадцатеричный
  режим), Dec (десятичный), oct (восьмеричный) или Bin (двоичный).
  Вместо метода setMode() удобнее воспользоваться методами-слотами setHexMode(),
  setDecMode(), setOctMode() и setBinMode() ;
♦ setSmallDecimalPoint(<Флаг>) - если в качестве параметра указано значение True, десятичная
  точка будет отображаться как отдельный элемент (при этом значение выводится
  более компактно - без пробелов до и после точки), а если значение False - то десятичная
  точка будет занимать позицию цифры (поведение по умолчанию). Метод является
  слотом;
♦ setDigitCount(<Число>) : задает количество отображаемых цифр. Если в методе
  setSmallDecimalPoint() указано значение False, десятичная точка считается отдельной
  цифрой.
Класс QLCDNumber поддерживает сигнал overflow(), генерируемый при попытке задать значение,
которое не может быть отображено индикатором.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QLCDNumber,
                               QVBoxLayout,
                               QWidget,
                               QLineEdit,
                               QLabel,
                               QFrame,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса виджета ЖК дисплея QLCDNumber, класса вертикальной стопки для виджетов QVBoxLayout,
базового класса пустого виджета QWidget, класса однострочного редактируемого поля QLineEdit
класса ярлыка QLabel, класса рамки для виджетов QFrame
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        # super().__init__(parent)  # вызов конструктора родительского класса через функцию super()
        self.setWindowTitle('Семисегментный индикатор')  # установка заголовка главного окна
        self.resize(300, 100)  # установка исходного размера главного окна приложения
        self.lcd = QLCDNumber()  # создание экземпляра виджета жк дисплея
        self.lcd.setFixedHeight(50)  # установка фиксированной высоты виджета
        self.lcd.display(0)  # установка исходного значения
        self.lcd.overflow.connect(self.warning)  # привязка обработчика на переполнение индикатора
        # - сигнал не поднимется и не понятно почему, информацию найти не удалось
        self.lcd.setSmallDecimalPoint(True)  # настройка десятичной точки
        self.enter_field = QLineEdit()  # создание поля для ввода чисел
        self.enter_field.textChanged.connect(self.on_change)  # привязка обработчика изменения в поле ввода

        self.warning_indicator = QLabel()  # создание индикатора для предупреждений
        self.warning_indicator.setFixedHeight(25)  # установка фиксированной высоты виджета
        self.warning_indicator.setFrameStyle(QFrame.Shape.Box)  # создание рамки вокруг индикатора предупреждений

        self.vbox = QVBoxLayout()  # создание вертикальной стопки для виджетов
        self.vbox.addWidget(self.lcd)  # размещений виджета в стопке
        self.vbox.addWidget(self.enter_field)
        self.vbox.addWidget(self.warning_indicator)
        self.container = QWidget()  # создание контейнера для слоя с виджетами
        self.container.setLayout(self.vbox)  # размещение в контейнере слоя с виджетами
        self.setCentralWidget(self.container)  # размещение контейнера со слоями в главном окне приложения

    def on_change(self, event):
        self.lcd.display(event)

    def warning(self):
        self.warning_indicator.setText('Overflow')


if __name__ == '__main__':  # проверка условия запуска данного модуля для предотвращения
    # запуска кода верхнего уровня при импортировании
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
