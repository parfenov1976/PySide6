"""
Основный компоненты интерфейса. Индикатор прогресса

Класс QProgressBar реализует индикатор процесса. Иерархия наследования выглядит так:
QObject, QPaintDevice) - QWidget - QProgressBar
Формат конструктора класса QProgressBar:
QProgressBar([parent=None])
Класс QProgressBar поддерживает следующий набор методов, которые могут быть нам полезны
(полный их список смотрите на странице https://doc.qt.io/qt-6/qprogressbar.html):
♦ setValue(<Значение>) - задает новое целочисленное значение процесса. Метод является
  слотом;
♦ value() - возвращает текущее значение процесса в виде числа;
♦ text() - возвращает текст, отображаемый на индикаторе или рядом с ним;
♦ setRange(<Минимум>, <Максимум>) - задает минимальное и максимальное значения;
♦ setMinimum(<Минимум>) - задает минимальное значение;
♦ setMaximum(<Максимум>) - задает максимальное значение.
  Параметры всех трех последних методов задаются в виде целых чисел. Если и минимальное,
  и максимальное значения равны нулю, то внутри индикатора будут постоянно по кругу
  перемещаться сегменты, показывая ход выполнения процесса с неопределенным количеством
  шагов. Все три метода являются слотами;
♦ reset() - сбрасывает значение индикатора. Метод является слотом;
♦ setOrientation(<Ориентация>) - задает ориентацию индикатора. В качестве значения
  указываются элементы Horizontal (горизонтальная) или Vertical (вертикальная)
  перечисления Orientation из модуля QtCore.Qt. Метод является слотом;
♦ setTextVisible(<Флаг>) - если в качестве параметра указано значение False, текст
  с текущим значением индикатора отображаться не будет;
♦ setTextDirection(<Направление>) - задает направление вывода текста при вертикальной
  ориентации индикатора. В качестве значения указываются следующие элементы перечисления -
  Direction из класса QProgressBar:
  • TopToBottom - текст поворачивается на 90° по часовой стрелке;
  • BottomToTop - текст поворачивается на 90° против часовой стрелки.
  При использовании стилей "windows", "windowsxp" и "macintosh" при вертикальной
  ориентации текст вообще не отображается.
♦ setInvertedAppearance(<Флаг>) - если в качестве параметра указано, значение True,
  направление увеличения значения будет изменено на противоположное (например, не слева
  направо, а справа налево - при горизонтальной ориентации);
♦ setFormat(<Формат>) - задает формат вывода текстового представления значения. Параметром
  передается строка формата, в которой могут использоваться следующие специальные символы:
  %v - само текущее значение, %m - заданный методами setMaximum() или setRange() максимум,
  %р - текущее значение в процентах:
  lcd.setFormat('выполнено %v шагов из %m')
При изменении значения процесса генерируется сигнал valueChanged(<Новое значение>).
Внутри обработчика через параметр доступно новое значение, заданное целым числом.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QLabel,
                               QFrame,
                               QVBoxLayout,
                               QWidget,
                               QPushButton,
                               QProgressBar,
                               )
import time
"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса ярлыка QLabel,
класса вертикальной стопки для виджетов QVBoxLayout, класса рамки для виджетов QFrame,
базового класса пустого виджета QWidget, класса кнопки QPushButton, 
класса индикатора прогресса QProgressBar
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор класса главного окна приложения
        :param parent: ссылка на родительский объект
        """
        # QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        super().__init__(parent)  # вызов конструктора родительского класса с помощью функции super()
        self.setWindowTitle('Индикатор прогресс')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера главного окна
        self.progressbar = QProgressBar()  # создание индикатора прогресса
        self.progressbar.setRange(0, 100)  # установка диапазона значений
        self.progressbar.setFormat('Выполнено %v из %m - %p')  # установка текстового представления прогресса
        self.progressbar.valueChanged.connect(self.on_change)  # привязка обработчика на изменение значения прогресса
        self.lbl = QLabel()  # создание ярлыка
        self.lbl.setFrameStyle(QFrame.Shape.Box)  # создание рамки вокруг ярлыка
        self.lbl.setFixedHeight(25)  # установка фиксированной высоты виджета
        self.start_btn = QPushButton('Запустить')  # создание кнопки запуска процесса
        self.start_btn.clicked.connect(self.on_start)  # привязка обработчика на нажатие кнопки запуска
        self.reset_btn = QPushButton('Сбросить индикатор')  # создание кнопки запуска процесса
        self.reset_btn.clicked.connect(self.progressbar.reset)  # привязка обработчика на нажатие кнопки запуска

        self.vbox = QVBoxLayout()  # создание вертикальной стопки для виджетов
        self.vbox.addWidget(self.progressbar)  # размещение виджета в стопке
        self.vbox.addWidget(self.lbl)
        self.vbox.addWidget(self.start_btn)
        self.vbox.addWidget(self.reset_btn)
        self.container = QWidget()  # создание контейнера для слоев с виджетам
        self.container.setLayout(self.vbox)  # размещение в контейнере слоя с виджетами
        self.setCentralWidget(self.container)  # размещение контейнера в главном окне

    def on_start(self) -> None:
        """
        Обработчика сигнала нажатия кнопки Запустить
        """
        self.start_btn.setEnabled(False)
        for i in range(self.progressbar.minimum(), self.progressbar.maximum() + 1):
            self.progressbar.setValue(i)
            time.sleep(0.01)  # не останавливает выполнение на каждом шагу, просто выдерживает паузу
            # на 100 шагов и затем выполняет код без паузы. Видимо, много поточность PySide6 так работает
        self.start_btn.setEnabled(True)

    def on_change(self, value: int) -> None:
        """
        Обработчика сигнала на изменение значения прогресса
        :param value: int - значение прогресса
        """
        self.lbl.setText(f'{value}')


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
