"""
Основные компоненты интерфейса. Кнопка.

Кнопка реализуется классом QPushButton. Иерархия наследования:
(QObject, QPaintDevice) - QWidget - QAbstractButton - QPushButton
Конструктор класса QPushButton имеет три формата:
QPushButton([parent=None])
QPushButton(<Текст>[, parent=None])
QPushButton(<Значок QIcon>, <Текст>[, parent=None])
В параметре parent указывается ссылка на родительский компонент. Если таковой не задан
или имеет значение None, компонент будет обладать своим собственным окном. Параметр
<Текст> задает текст, который отобразится на кнопке, а параметр <Значок> - значок, выводимый
перед текстом.
Класс QPushButton наследует следующие методы из класса QAbstractButton (здесь приведены
только основные - полный их список смотрите на странице https://doc.qt.io/qt-6/
qabstractbutton.html):
♦ setText(<Текст>) - задает текст, который будет отображен на кнопке. Внутри текста
  символ &, указанный перед буквой или цифрой, задает комбинацию клавиш быстрого
  доступа. В этом случае буква, перед которой указан символ &, будет - в качестве подсказки
  пользователю - подчеркнута. Одновременное нажатие клавиши <Alt> и подчеркнутой
  буквы приведет к нажатию этой кнопки. Чтобы вывести сам символ &, необходимо
  его удвоить;
♦ text() - возвращает текст, отображаемый на кнопке;
♦ setShortcut(<Клавиша QKeySequence>) - задает клавишу быстрого доступа:
  button.setShortcut("Alt+B")
  button.setShortcut(QtGui.QKeySequence.mnemonic("&B"))
  button.setShortcut(QtGui.QKeySequence("Alt+B"))
  button.setShortcut(QtGui.QKeySequence(QtCore.Qt.Key.Key_F5))
♦ setIcon(<Значок QIcon>) - вставляет значок перед текстом кнопки;
♦ setIconSize(<Размеры QSize>) - задает размеры значка. Метод является слотом;
♦ setAutoRepeat(<Флаг>) - если в качестве параметра указано значение True, сигнал
  clicked будет периодически генерироваться, пока кнопка находится в нажатом состоянии;
♦ animateClick() - имитирует нажатие пользователем кнопки с анимацией. После нажатия
  кнопка находится в этом состоянии в течении 100 миллисекунд. Метод является слотом;
♦ click() - имитирует нажатие кнопки без анимации. Метод является слотом;
♦ setCheckable(<Флаг>) - если в качестве параметра указано значение True, то кнопка
  является переключателем, который может находиться в двух состояниях: установленном
  и неустановленном;
♦ setChecked(<Флаг>) - если в качестве параметра указано значение True, кнопка переключатель
  будет находиться в установленном состоянии. Метод является слотом;
♦ isChecked() - возвращает значение True, если кнопка-переключатель находится в установленном
  состоянии, и False - в противном случае;
♦ toggle() - переключает кнопку-переключатель. Метод является слотом;
♦ setAutoExclusive(<Флаг>) - если в качестве параметра указано значение True, внутри
  контейнера может быть установлена только одна кнопка-переключатель;
♦ setDown(<Флаг>) - если в качестве параметра указано значение True, кнопка будет находиться
  в нажатом состоянии;
♦ isDown() - возвращает значение True, если кнопка находится в нажатом состоянии,
  и False - в противном случае.
Класс QAbstractButton поддерживает следующие сигналы:
♦ pressed() - генерируется при нажатии кнопки;
♦ released() - генерируется при отпускании ранее нажатой кнопки;
♦ clicked(<Состояние>) - генерируется при нажатии и отпускании кнопки. Передаваемый
  обработчику параметр имеет значение True, если кнопка-переключатель установлена,
  и False, если она сброшена или это обычная кнопка, а не переключатель;
♦ toggled(<Состояние>) - генерируется при изменении состояния кнопки-переключателя.
  Через параметр доступно новое состояние кнопки.
Класс QPushButton· определяет свои собственные методы (здесь приведены только основные
- полный их список смотрите на странице https://doc.qt.io/qt-6/qpushbutton.html):
♦ setFlat(<Флаг>) - если в качестве параметра указано значение True, кнопка будет отображаться
  без рамки;
♦ setAutoDefault(<Флаг>) - если в качестве параметра указано значение True, кнопка
  может быть нажата с помощью клавиши <Enter> при условии, что она находится в фокусе.
  По умолчанию нажать кнопку позволяет только клавиша <Пробел>. В диалоговых
  окнах у всех кнопок по умолчанию указано значение True, а в остальных окнах - значение
  False;
♦ setDefault(<Флаг>) - задает кнопку по умолчанию. Эта кнопка может быть нажата
  с помощью клавиши <Enter>, когда фокус ввода установлен на другой компонент, -
  например, на текстовое поле. Метод работает только в диалоговых окнах;
♦ setMenu(<Меню QMenu>) - устанавливает всплывающее меню, которое будет отображаться
  при нажатии кнопки;
♦ menu() - возвращает ссылку на всплывающее меню или значение None;
♦ showMenu() - отображает всплывающее меню. Метод является слотом.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QPushButton,
                               )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класс главного окна QMainWindow, класс кнопки QPushButton

Импорт из модуля PySide6.QtCort класса перечислителя настроек виджетов Qt
"""


# TODO доделать пример
class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent:  ссылка на родительский компонент
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Кнопка - QPushButton')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера главного окна


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
