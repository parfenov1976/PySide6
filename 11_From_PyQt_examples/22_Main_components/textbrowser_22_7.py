"""
Основные компоненты интерфейса. Область редактирования, текстовый браузер.

Класс QTextBrowser расширяет возможности класса QTextEdi t и реализует текстовый браузер
с возможностью перехода по гиперссылкам. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea - QTextEdit - QTextBrowser
Формат конструктора класса QTextBrowser:
QTextBrowser([parent=None])
Класс QTextBrowser поддерживает следующие основные методы (полный их список смотрите
на странице https://doc.qt.io/qt-6/qtextbrowser.html):
♦ setSource() - загружает ресурс. Формат метода:
  setSource(<Интернет-адрес>[, type=ResourceType.UnknownResource])
  Интернет-адрес указывается в виде объекта класса QUrl из класса QtCore. Параметр type
  задает тип открываемого ресурса в виде одного из следующих элементов перечисления_
  ResourceType из класса QTextDocument:
  • UnknownResource - неизвестный ресурс или ресурс вообще не загружен;
  • HtmlResource - НТМL-документ;
  • ImageResource - графическое изображение;
  • StyleSheetResource - таблица стилей CSS;
  • MarkdownResource - документ в формате Markdown.
  Пример:
  # Загружаем и выводим содержимое текстового файла
  url = QtCore.QUrl("text.txt")
  browser.setSource(url)
  Метод является слотом;
♦ source() - возвращает объект класса QUrl с адресом текущего ресурса;
♦ reload() - перезагружает текущий ресурс; Метод является слотом;
♦ home() - загружает первый ресурс из списка истории. Метод является слотом;
♦ backward() - загружает предыдущий ресурс из списка истории. Метод является слотом;
♦ forward() - загружает следующий ресурс из списка истории. Метод является слотом;
♦ backwardHistoryCount() - возвращает количество предыдущих ресурсов из списка истории;
♦ forwardHistoryCount() - возвращает количество следующих ресурсов из списка истории;
♦ isBackwardAvailable() - возвращает значение True, если существует предыдущий
  ресурс в списке истории, и False - в противном случае;
♦ isForwardAvailable() - возвращает значение True, если существует следующий ресурс
  в списке истории, и False - в противном случае;
♦ clearHistory() - очищает список истории;
♦ historyTitle(<Количество позиций>) - если в качестве параметра указано отрицательное
  число, возвращает заголовок предыдущего ресурса, отстоящего от текущего на заданное
  число позиций, если 0 - заголовок текущего ресурса, а если положительное
  число - заголовок следующего ресурса, также отстоящего от текущего на заданное
  число позиций;
♦ historyUrl(<Количество позиций>) - то же самое, что historyTitle(), но возвращает
  адрес ресурса в виде объекта класса QUrl;
♦ setOpenLinks(<Флаг>) - если в качестве параметра указано значение True, то переход
  по гиперссылкам будет разрешен (поведение по умолчанию). Значение False запрещает
  переход;
♦ setOpenExternalLinks(<Флаг>) - если в . качестве параметра указано значение True, то
  переход по гиперссылкам, ведущим на внешние ресурсы, будет разрешен (при этом сигнал
  anchorClicked() не генерируется). Значение False запрещает переход (поведение по
  умолчанию).
Класс QTextBrowser поддерживает сигналы:
♦ anchorClicked(<Интернет-адрес>) - генерируется при переходе по гиперссылке. Внутри
  обработчика через параметр доступен интернет-адрес гиперссылки в виде объекта
  класса QUrl;
♦ backwardAvailable (<Признак>) - генерируется при изменении списка предыдущих
  ресурсов. Внутри обработчика через параметр доступно значение True, если в списке
  истории имеются предыдущие ресурсы, и False - в противном случае;
♦ forwardAvailable (<Признак>) - генерируется при изменении списка следующих ресурсов.
  В обработчике через параметр доступно значение True, если в списке истории имеются
  следующие ресурсы, и False - в противном случае;
♦ highlighted(<Интернет-адрес>) - генерируется при наведении указателя мыши на гиперссылку.
  Внутри обработчика через параметр доступен интернет-адрес гиперссьmки
  в виде объекта класса QUrl или пустой объект;
♦ historyChanged() - генерируется при изменении списка истории;
♦ sourceChanged(<Интернет-адрес>). - генерируется при переходе на новый ресурс. Внутри
  обработчика через параметр доступен интернет-адрес загруженного ресурса в виде
  объекта класса QUrl.
"""
# TODO переделать в браузер
from PySide6.QtWidgets import (QMainWindow,
                               QTextBrowser,
                               )
"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, 
класса текстового браузера QTextBrowser
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Область редактирования')  # установка заголовка главного окна приложения
        self.resize(300, 450)  # установка исходного размера главного окна
        self.text_browser = QTextBrowser()  # создание области текстового браузера
        self.text_browser.setOpenExternalLinks(True)  # разрешение на открытие ссылок на внешние ресурсы
        self.text_browser.append('<a href=https://ru.wikipedia.org>Wikia</a>')  # размещение ссылки в области браузера
        self.setCentralWidget(self.text_browser)  # размещение контейнера в окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
