"""
Основные компоненты интерфейса. Поле для ввода даты.

Для ввода даты и времени предназначены классы QDateTimeEdit (ввод временной отметки,
т. е. значения даты и времени), QDateEdit (ввод даты) и QTimeEdit (ввод времени).
Поля могут содержать кнопки, которые позволяют щелчками мыши увеличивать и уменьшать
значение внутри поля.
Иерархия наследования:
(QObject, QPaintDevice) - QWidget - QAbstractSpinBox - QDateTimeEdit
(QObject, QPaintDevice) - QWidget - QAbstractSpinВox - QDateTimeEdit - QDateEdit
(QObject, QPaintDevice) - QWidget - QAbstractSpinВox - QDateTimeEdit - QTimeEdit
Форматы конструкторов классов:
QDateTimeEdit([parent=None])
QDateTimeEdit(<Временная отметка>[, parent=None])
QDateTimeEdit(<Дата>[, parent=None])
QDateTimeEdit(<Время>[, parent=None])
QDateEdit([parent=None])
QDateEdit(<Дата>[, parent=None])
QTimeEdit([parent=None])
QTimeEdit(<Время>[, parent=None])
В параметре <Временная отметка> можно указать объект класса QDateTime или datetime
(из Python). Преобразовать объект класса QDateTime в объект класса datetime позволяет
метод toPyDateTime() класса QDateTime:
>> from PyQtб import QtCore
>> d = QtCore.QDateTime(2022, 2, 18, 14, 23)
>> dPyQt6.QtCore.QDateTime(2022, 2, 18, 14, 23) >>> d.toPyDateTime()
datetime.datetime(2022, 2, 18, 14, 23)
В качестве параметра <Дата> можно указать объект класса QDate или date (из Python).
Преобразовать объект класса QDate в объект класса date позволяет метод toPyDate()
класса QDate.
В параметре <Время> можно указать объект класса QTime или time (из Python).
Преобразовать объект класса QTime в объект класса time позволяет метод toPyTime()
класса QTime.
Классы QDateTime, QDate и QTime определены в модуле QtCore.
Класс QDateTimeEdit наследует все методы из класса QAbstractSpinBox и дополнительно
реализует следующие методы (здесь приведены только самые полезные - полный их список
смотрите на странице https://doc.qt.io/qt-6/qdatetimeedit.html):
♦ setDateTime(<Временная отметка QDateTime или <datetime>) - устанавливает временную
  отметку. Метод является слотом;
♦ setDate(<Дата QDate или date>) - устанавливает дату. Метод является слотом;
♦ setTime(<Время QTime или time>) - устанавливает время. Метод является слотом;
♦ dateTime() - возвращает объект класса QDateTime с временной отметкой;
♦ date() - возвращает объект класса QDate с датой;
♦ time() - возвращает объект класса QTime со временем;
♦ setDateTimeRange(<Минимум>, <Максимум>) - задает минимальное и максимальное допустимые
  значения для временной отметки;
♦ setMinimumDateTime(<Минимум>) - задает минимальное допустимое значение временной
  отметки;
♦ setMaximumDateTime(<Максимум>) - задает максимальное допустимое значение временной
  отметки.
В параметрах трех последних методов указываются объекты класса QDate или date;
♦ setDateRange(<Минимум>, <Максимум>) - задают минимальное и максимальное допустимые
  значения для даты;
♦ setMinimumDate(<Минимум>) -задает минимальное допустимое значение даты;
♦ setMaximumDate(<Максимум>) - задает максимальное допустимое значение даты.
  В параметрах трех последних методов указываются объекты класса QDateTime или dateTime;
♦ setTimeRange (<Минимум>, <Максимум>) - задает минимальное и максимальное допустимые
  значения для времени;
♦ setMinimumTime(<Минимум>) - задает минимальное допустимое значение времени;
♦ setMaximumTime(<Максимум>) - задает максимальное допустимое значение времени.
  В параметрах трех последних методов указываются объекты класса QTime или time;
♦ setDisplayFormat(<Формат>) -задает формат отображения даты и времени. В качестве
  параметра указывается строка, содержащая специальные символы. Пример задания строки
  формата:
  dateTimeEdit.setDisplayFormat("dd.ММ.yyyy HH:mm:ss")
♦ setTimeSpec(<Зона>) - задает временную зону. В качестве параметра можно указать
  следующие элементы перечисления TimeSpec из модуля QtCore.Qt: LocalTime (местное
  время), uтс (всемирное координированное время) или OffsetFromUTC (смещение относительно
  всемирного координированного времени, исчисляемое в секундах);
♦ setCalendarPopup(<Флаг>) - если в качестве параметра указано значение True, то дату
  можно будет выбрать с помощью календаря, который появится на экране при щелчке на
  кнопке с направленной вниз стрелкой, выведенной вместо стандартных кнопок-стрелок
♦ setSelectedSection(<Секция>) - выделяет указанную секцию. В качестве параметра можно
  задать один из следующих элементов перечисления section из класса QDateTimeEdit:
  • NoSection - ни одна секция не будет выделена;
  • DaySection - будет выделена секция числа;
  • MonthSection - секция месяца;
  • YearSection - секция года;
  • HourSection - секция часов;
  • MinuteSection - секция минут;
  • SecondSection - секция секунд;
  • MSecSection - секция миллисекунд;
  • AmPmSection - секция времени суток (АМ или РМ);
♦ setCurrentSection(<Секция Section>) - делает указанную секцию текущей;
♦ setCurrentSectionIndex(<Индекс>) - делает секцию с указанным индексом текущей;
♦ currentSection() - возвращает тип текущей секции в виде одного из элементов
  перечисления Section из класса QDateTimeEdit;
♦ currentSectionIndex() - возвращает индекс текущей секции;
♦ sectionCount () - возвращает количество секций внутри поля;
♦ sectionAt (<Индекс>) - возвращает обозначение типа секции по указанному индексу
  в виде одного из элементов перечисления Section из класса QDateTimeEdit;
♦ sectionText (<Секция Section>) - возвращает текст указанной секции.
При изменении значений даты или времени генерируются сигналы timeChanged(<Время>),
dateChanged(<Дата>) и dateTimeChanged(<Временная отметка>). Внутри обработчиков через
параметр доступно новое значение в виде объекта класса QTime, QDate или QDateTime
соответственно.
Классы QDateEdit и QTimeEdit отличаются от класса QDateTimeEdit только форматом
отображаемых данных. Эти классы наследуют методы базовых классов и не добавляют
никаких своих методов.
"""
# todo разработать пример
