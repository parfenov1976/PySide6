"""
Основные компоненты интерфейса. Поле ввода, ввод данных по маске.

С помощью метода setInputMask(<Маска>) можно указать маску, которой должно соответствовать
заносимое пользователем значение. Маска указывается в виде строки следующего
формата:
"<Последовательность символов>[;<Символ-заполнитель>]"
В первом параметре указывается комбинация из следующих специальных символов:
♦ 9- обязательна цифра от о до 9;
♦ о - разрешена, но не обязательна цифра от о до 9;
♦ о - обязательна цифра от 1 до 9;
♦ d - разрешена, но не обязательна цифра от 1 до 9;
♦ в - обязательна цифра о или 1;
♦ ь - разрешена, но не обязательна цифра о или 1;
♦ н- обязателен шестнадцатеричный символ (0-9, A-F, a-f);
♦ h- разрешен, но не обязателен шестнадцатеричный символ (0-9, A-F, a-f);
♦ # - разрешена, но не обязательна цифра, знак «плюс» или «минус»;
♦ А - обязательна буква в любом регистре;
♦ а - разрешена, но не обязательна буква;
♦ N - обязательна буква в любом регистре или цифра _от о до 9;
♦ n - разрешена, но не обязательна буква или цифра от о до 9;
♦ х - обязателен любой непробельный символ;
♦ х - разрешен, но не обязателен любой непробельный символ;
♦ > - все последующие буквы переводятся в верхний регистр;
♦ < - все последующие буквы переводятся в нижний регистр;
♦ ! - отключает изменение регистра;
♦ \ - используется для отмены действия перечисленных ранее спецсимволов.
В необязательном параметре <Символ-заполнитель> можно указать символ, который будет
отображаться в поле, обозначая место ввода. Если параметр не указан, заполнителем будет
служить пробел.
Все остальные символы трактуются как есть.
Примеры:
lineEdit.setInputMask("Дата: 99.В9 .9999;_") # Дата: ___ _
lineEdit.setInputMask("Дата: 99.В9 .9999;#") # Дата: ##.##.####
lineEdit.setInputMask("Дата: 99.В9.9999 г.") # Дата: г.
Проверить соответствие введенных данных маске позволяет метод hasAcceptableInput().
Если данные соответствуют маске, метод возвращает значение True, а в противном случае
- False.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QLineEdit,
                               QLabel,
                               )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса однострочного редактируемого текстового поля QLineEdit, класса виджета ярлыка QLabel

Импорт из модуля PySide6.QtCort класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от класса главных окон
    """

    def __init__(self, parent=None):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.resize(200, 100)  # установка исходного размера окна
        self.setWindowTitle('Поле ввода')  # установка заголовка главного окна приложения

        self.line_edit_1 = QLineEdit(self)  # создание редактируемого текстового поля
        self.line_edit_1.resize(175, 25)  # указание исходного размера поля
        self.line_edit_1.setInputMask('Дата: 99.B9.9999 г.;*')  # создание маски ввода
        self.line_edit_1.setAlignment(Qt.AlignmentFlag.AlignCenter)  # настройка выравнивания в поле
        self.line_edit_1.textEdited.connect(self.text_edited)

        # создание ярлыка с проверкой валидности ввода по маске
        self.lbl = QLabel(f'Input valid: {self.line_edit_1.hasAcceptableInput()}', self)
        self.lbl.move(10, 50)  # смещение ярлыка

    def text_edited(self, new_text: str) -> None:
        """
        Обработчик сигнала на редактирование текста в поле
        """
        self.lbl.setText(f'Input valid: {self.line_edit_1.hasAcceptableInput()}')
        # проверка валидности ввода по маске


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
