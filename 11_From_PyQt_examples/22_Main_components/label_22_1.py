"""
Основные компоненты интерфейса. Надпись.

Надпись применяется для вывода подсказки пользователю, информирования пользователя
о ходе выполнения операции, назначении клавиш быстрого доступа и т. п. Надпись
может выводить обычный текст, текст, отформатированный НТМL-тегами или тегами Markdown.
Надпись реализуется классом QLabel. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QLabel
Конструктор класса QLabel имеет два формата:
QLabel([parent=None][, f=0])
QLabel(<Текст>[, parent=None][, f=0])
В параметре parent указывается ссылка на родительский компонент. Если он не указан
или имеет значение None, компонент будет обладать своим собственным окном, тип которого
можно задать с помощью параметра f. Параметр <Текст> позволяет задать текст, который
будет отображен на надписи. Пример:
label = QtWidgets.QLabel("Текст надписи", f=QtCore.Qt.WindowType.Window)
label.resize(300, 50)
label.show()
Класс QLabel поддерживает следующие основные методы (полный их список смотрите на
странице https://doc.qt.io/qt-6/qlabel.html):
♦ setText (<Текст>) - задает текст, который будет отображен на надписи. Можно указать
  как обычный текст, так и содержащий СSS-форматирование текст в формате HTML. Пример:
  label.setText("Текст <Ь>полужирный</Ь>")
  Перевод строки в простом тексте осуществляется с помощью символа \n, а в тексте в
  формате HTML - с помощью тега <br>:
  label.setText("Текст\nнa двух строках")
  Внутри текста символ &, указанный перед буквой или цифрой, задает комбинацию клавиш
  быстрого доступа. В этом случае буква, перед которой указан символ &, будет в качестве
  подсказки пользователю - подчеркнута. При одновременном нажатии клавиши <Alt> и
  подчеркнутой буквы компонент, ссылка. на который передана в метод setBuddy(), окажется
  в фокусе ввода. Чтобы вывести сам символ &, необходимо его удвоить. Если надпись не
  связана с другим компонентом, символ & выводится в составе текста. Пример:
  label = QtWidgets.QLabel("&Пapoль")
  lineEdit = QtWidgets.QLineEdit()
  label.setBuddy(lineEdit)
  Метод является слотом;
♦ setNun(<Число>) - выводит в надписи заданное целое или вещественное число. Метод
  является слотом;
♦ setWordWrap(<Флаг>) - если в параметре указано значение True, текст может
  переноситься на другую строку. По умолчанию перенос строк не осуществляется;
♦ text() - возвращает текст надписи;
♦ setTextFormat(<Режим>) - задает режим отображения текста. Могут быть указаны
  следующие элементы перечисления TextFormat из модуля QtCore.Qt:
  • PlainText - простой текст;
  • RichText - текст, отформатированный тегами HTML;
  • AutoText - автоматическое определение (режим по умолчанию). Если текст содержит НТМL-теги,
    то используется режим RichText, в. противном случае - режим PlainText;
  • MarkdownText - текст, отформатированный тегами Markdown;
♦ setAlignment(<Режим>) - задает режим выравнивания текста внутри надписи:
  label.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight |
                     QtCore.Qt .Alignment.Flag.AlignBottom)
♦ setOpenExternalLinks(<Флаг>) - если в качестве параметра указано значение True, теги
  <а>, присутствующие в тексте, будут преобразованы в гиперссылки:
  label.setText('<a href="https://www.google.ru/">Это гиперссылка</а>')
  label.setOpenExternalLinks(True)
♦ setBuddy(<Компонент>) - связывает надпись с другим компонентом. В этом случае в
  тексте надписи можно задавать клавиши быстрого доступа, указав символ & перед
  буквой или цифрой;
♦ setPixmap(<Изображение QPixmap>) - позволяет вывести изображение на надпись:
  label.setPixmap(QtGui.QPixmap("picture. jpg"))
  Метод является слотом;
♦ setPicture (<Рисунок QPicture>) - выводит заданный рисунок. Метод является слотом;
♦ setScaledContents(<Флаг>) - если в параметре указано значение True, то при изменении
  размеров надписи размер содержимого также будет изменяться. По умолчанию изменение размеров
  содержимого не осуществляется;
♦ setMargin(<Отступ>) - задает отступы от границ компонента до его содержимого;
♦ setIndent(<Отступ>) - задает отступ от рамки до текста надписи в зависимости от значения
  выравнивания. Если выравнивание производится по левой стороне, то задает отступ
  слева, если по правой стороне, то справа;
♦ clear() - удаляет содержимое надписи. Метод является слотом;
♦ setTextInteractionFlags(<Режим>) - задает режим взаимодействия пользователя с текстом
  надписи. Можно указать следующие элементы (или их комбинацию через оператор |) перечисления
  TextInteractionFlag из модуля QtCore. Qt:
  • NoTextInteraction - пользователь не может взаимодействовать с текстом надписи;
  • TextSelectableByMouse - текст можно выделить мышью;
  • TextSelectableByKeyboard - текст можно выделить с помощью клавиш на клавиатуре. Внутри
    надписи будет отображен текстовый курсор;
  • LinksAccessibleByMouse- на гиперссылках, присутствующих в тексте надписи, можно щелкать мышью;
  • LinksAccessibleByKeyboard - с гиперссылками, присутствующими в тексте надписи, допускается
    взаимодействовать с помощью клавиатуры: перемещаться между гиперссылками - нажатиями клавиши
    <ТаЬ>, а переходить по гиперссылке - по нажатии клавиши <Enter>;
  • TextEditable - текст надписи можно редактировать;
  • TextEditorInteraction - комбинация TextSelectableByMouse |
    TextSelectableByKeyboard | TextEditable;
  • TextBrowserInteraction - комбинация TextSelectableByMouse |
    LinksAccessibleByMouse | LinksAccessibleByKeyboard;
♦ setSelection(<Индекс>, <Длина>) - выделяет фрагмент длиной <Длина>, начиная с позиции <Индекс>;
♦ selectionStart() - возвращает начальный индекс выделенного фрагмента или значение -1,
  если ничего не выделено;
♦ selectedText() - возвращает выделенный текст или пустую строку, если ничего не выделено;
♦ hasSelectedText() - возвращает значение True, если фрагмент текста надписи выделен,
  и False - в противном случае.
Класс QLabel поддерживает следующие сигналы:
♦ linkActivated(<Интернет-адрес>) - генерируется при переходе по гиперссылке. Через параметр
  внутри обработчика доступен целевой интернет-адрес, заданный в виде строки;
♦ linkHovered(<Интернет-адрес>) - генерируется при наведении курсора мыши на гиперссылку.
  Через параметр внутри обработчика доступен интернет-адрес гиперссьшки в виде строки или
  пустая строка.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QLabel,
                               QFrame,
                               )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класс главного окна QMainWindow, класс надписи QLabel

Импорт из модуля PySide6.QtCort класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Надпись - QLabel')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера окна
        self.lbl_1 = QLabel('Надпись без родителя', f=Qt.WindowType.Window)
        self.lbl_1.resize(200, 50)
        self.lbl_1.move(200, 200)
        self.lbl_1.show()  # показать окно с надписью

        self.lbl_2 = QLabel('<b>Полужирная надпись<br>с переносом</b>', self)
        self.lbl_2.resize(250, 50)
        self.lbl_2.setFrameStyle(QFrame.Shape.Box)

        self.lbl_3 = QLabel('Надпись с автоматическим переносом', self)
        self.lbl_3.setFixedSize(150, 50)
        self.lbl_3.move(0, 50)
        self.lbl_3.setWordWrap(True)  # включение автоматического переноса по словам
        self.lbl_3.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.lbl_3.setFrameStyle(QFrame.Shape.Box)


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
