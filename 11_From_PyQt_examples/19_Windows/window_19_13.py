"""
Пример оформления окна при помощи таблиц стилей CSS

Это позволяет сделать метод setStyleSheet(<Таблица стилей>), который можно вызвать:
♦ у самой программы - тогда заданные в таблице стилей параметры оформления будут
  применены ко всем компонентам всех окон программы;
♦ у отдельного окна - тогда эти параметры будут действовать в пределах этого окна;
♦ у отдельного компонента - тогда они будут действовать только на этот компонент.
При указании таблицы стилей у программы и окна можно использовать привычный формат
объявления СSS-стилей:
<Селектор> {<Определение стилей>}
<Селектор> записывается в следующем формате:
<Основной селектор>[<Дополнительный селектор>] [<Псевдокласс>] [<Псевдоселектор>]

Параметр <Основной селектор> указывает на класс компонента. Его можно задать в одном
из следующих форматов:
♦ * (звездочка) - указывает на все компоненты. Например, так можно задать у всех
  компонентов зеленый цвет текста: * {color: green;}
♦ <Класс> - указывает на компоненты, относящиеся к заданному <Классу> и его подклассам.
  Задание красного цвета текста у всех компонентов, относящихся к классу QAbstractButton
  и его подклассам (т. е. у командных кнопок, флажков и переключателей), осуществляется так:
  QAbstractButton {color: red;}
♦ .<Класс> - указывает только на компоненты, относящиеся лишь к заданному <Классу>, но не
  к его подклассам. Указание полужирного шрифта у всех компонентов класса QPushbutton
  (командных кнопок), но не у его подклассов, осуществляется так:
  .QPushButton {font-weight: bold;}

Параметр <Дополнительный селектор> задает дополнительные параметры компонента. Его форматы:
♦ [<Свойство>="<Значение>"] - указанное <Свойство> компонента должно иметь заданное <Значение>.
  Полужирный шрифт у кнопки, чье свойство default имеет значение true (кнопки по умолчанию),
  задается так:
  QPushButton[default="true"] {font-weight: bold;}
♦ #<Имя> - указывает на компонент с заданным <Именем>. <Имя> можно задать вызовом у компонента
  метода setObjectName(<Имя>), а получить вызовом метода objectName(). Красный цвет текста у
  кнопки с именем btnRed задается так:
  QPushButton#btnRed {color: red;}

Параметр <Псевдокласс> указывает на отдельную составную часть сложного компонента.
Он записывается в формате :: <Обозначение составной части>. Вот пример указания графического
изображения у кнопки разворачивания раскрывающегося списка (обозначение этой составной части
- down-arrow):
QComboBox::down-arrow {image: url(arrow.png);}

Параметр <Псевдоселектор> указывает на состояние компонента (должна ли быть кнопка нажата,
должен ли флажок быть установленным и т. п.). Он может быть записан в двух форматах:
♦ :<Обозначение состояния>- компонент должен находиться в указанном состоянии. Пример указания
  белого цвета фона у кнопки, когда она нажата (это состояние имеет обозначение pressed):
  QPushButton:pressed {background-color: white;}
♦ :!<Обозначение состояния> - компонент должен находиться в любом состоянии, кроме указанного.
  Пример указания желтого цвета фона у кнопки, когда она не нажата:
  QPushButton:!pressed {background-color: yellow;}
  Можно указать сразу несколько псевдоселекторов, расположив их непосредственно друг за другом
  - тогда селектор будет указывать на компонент, находящийся одновременно во всех состояниях,
  которые обозначены этими селекторами. Вот пример указания черного цвета фона и белого цвета
  текста у кнопки, которая нажата и над которой находится курсор мыши (обозначение - hover):
  QPushButton:pressed:hover {color: white; background-color: black;}

В стиле можно указать сразу несколько селекторов, записав их через запятую, - тогда стиль
будет применен к компонентам, на которые указывают эти селекторы. Вот пример задания зеленого
цвета фона у кнопок и надписей:
QLabel, QPushButton {background-color: green;}
В PyQt компоненты не наследуют параметры оформления от их родителей. Скажем, если мы укажем
у группы красный цвет текста:
app.setStyleSheet("QGroupBox {color: red;}")
вложенные в эту группу компоненты не унаследуют его и будут иметь цвет текста, заданный по
умолчанию. Придется задать для них нужный цвет явно:
app.setStyleSheet("QGroupBox, QGroupBox * {color: red;}")

Есть возможность указать компонентам-потомкам наследовать параметры оформления у родителя.
Для этого достаточно вызвать у объекта программы статический метод setAttribute(), передав
ему в качестве первого параметра элемент AA_UseStyleSheetPropagationInWidgetStyles
перечисления ApplicationAttribute из модуля QtCore.Qt, а в качестве второго параметра -
значение True:
QtWidgets.QApplication.setAttribute(
          QtCore.Qt.ApplicationAttribute.AA_UseStyleSheetPropagationInWidgetStyles, True)
Чтобы отключить такую возможность, достаточно вызвать этот метод еще раз, указав в нем
вторым параметром False.

При вызове метода setStyleSheet() у компонента в назначаемой ему таблице стилей не
указываются ни селектор, ни фигурные скобки - они просто не нужны.
В случае PyQt, как и в CSS, также действуют правила каскадности. Так, таблица стилей,
заданная у окна, имеет больший приоритет, нежели таковая, указанная у программы, а стиль,
что был задан у компонента, имеет наивысший приоритет. Более специфические стили имеют
больший приоритет, чем менее специфические, - так, стиль с селектором, в состав которого
входит имя компонента, перекроет стиль с селектором любого другого типа.
За более подробным описанием поддерживаемых PyQt псевдоклассов, псевдоселекторов и
особенностей указания стилей для отдельных классов компонентов обращайтесь по интернет-адресу
https://doc.qt.io/qt-6/stylesheet-reference.html.
"""

import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QPushButton,
                               QLabel,
                               QVBoxLayout,
                               QGroupBox,
                               QWidget,
                               )

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow,
класса виджета кнопки QPushButton, класс виджета ярлыка QLabel, класс слоев для виджетов QVBoxLayout,
класс групп компонентов QGroupBox, класс базового пустого виджета QWidget
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Таблицы стилей')  # устанавливаем заголовок главного окна
        self.resize(300, 300)  # задаем исходный размер окна

        # На уровне окна задаем зеленый цвет текста у надписи с именем first и
        # красный цвет текста у надписи, на которую наведен курсор мыши
        self.setStyleSheet('QLabel#first {color: green;} QLabel:hover {color:red;}')

        self.lbl_1 = QLabel('Зеленый текст')  # создаем ярлык с надписью
        self.lbl_1.setObjectName('first')  # присваиваем ярлыку имя для указания в таблице стиля (см выше)
        self.lbl_2 = QLabel('Полужирный текст')  # создаем ярлык с надписью
        self.lbl_2.setStyleSheet('font-weight: bold')  # указываем полужирный шрифт в таблице стиля 2-го ярлыка
        self.lbl_3 = QLabel('Синий цвет')  # создаем ярлык с надписью
        self.btn = QPushButton('Курсивный текст')  # создаем кнопку
        self.box = QGroupBox('Группа')  # создаем группу для компонентов
        self.vbox = QVBoxLayout()  # создаем слой для виджетов
        self.vbox.addWidget(self.lbl_3)  # помещаем в слой ярлык с надписью
        self.box.setLayout(self.vbox)  # вставляем слой с виджетами в группу
        self.main_box = QVBoxLayout()  # создаем главный слой для виджетов
        self.main_box.addWidget(self.lbl_1)  # помещаем на главный слой ярлык 1
        self.main_box.addWidget(self.lbl_2)  # помещаем на главный слой ярлык 2
        self.main_box.addWidget(self.box)  # помещаем на главный слой группу
        self.main_box.addWidget(self.btn)  # помещаем на главный слой кнопку
        self.container = QWidget()  # создание контейнера для слоев
        self.container.setLayout(self.main_box)  # размещаем главный слой в контейнере для слоев
        self.setCentralWidget(self.container)  # размещение контейнера со слоями в окне


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса

    # На уровне программы задаем синий цвет текста у надписей, вложенных в группы,
    # и курсивное начертание текста кнопок
    app.setStyleSheet('QGroupBox QLabel {color: blue;} QPushButton {font-style: italic}')

    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
