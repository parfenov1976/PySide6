"""
Модели. Стандартная двухмерная модель (таблицы и иерархические структуры)

Класс QStandardItemModel из модуля QtGui реализует двумерную (таблица) и иерархическую
модели. Каждый элемент такой модели представлен классом QStandardItem из того же модуля.
Вывести на экран ее содержимое можно с помощью классов QTableView, QTreeView и др.,
передав модель в метод setModel() представления. Иерархия наследования:
QObject - QAbstractItemModel - QStandardItemModel Форматы конструктора класса QStandardItemModel:
QStandardItemModel([parent=None])
QStandardItemModel(<Количество строк>, <Количество столбцов>[, parent=None])

Класс QStandarditemМodel поддерживает следующие основные методы (полный их список можно найти
на странице https://doc.qt.io/qt-6/qstandarditemmodel.html):
♦ setRoWCount(<Количество строк>)-задает количество строк;
♦ setColumnCount(<Количество столбцов>) - задает количество столбцов;
♦ rowCount([parent=QModelIndex()])- возвращает количество строк. Необязательный параметр
  parent указывает элемент верхнего уровня, при этом будет возвращено количество вложенных
  в этот элемент строк, - если параметр не задан, возвращается количество строк верхнего
  уровня иерархии;
♦ columnCount([parent=QModelIndex()]) - возвращает количество столбцов. Необязательный
  параметр parent в этом случае не используется;
♦ setItem(<Строка>, <Столбец>, <Элемент QStandardItem>) - устанавливает элемент в ячейку,
  располагающуюся на пересечении указанных строки и столбца;
♦ appendRow(<Список элементов QStandardItem>.) - добавляет одну строку в конец модели.
  В качестве параметра указывается список отдельных столбцов добавляемой строки;
♦ appendRow(<Элемент QStandardItem>) - добавляет строку из одного столбца в конец модели;
♦ appendColumn(<Список элементов QStandardItem>) - добавляет один столбец в конец модели.
  В качестве параметра указывается список отдельных строк добавляемого столбца;
♦ insertRow(<Индекс строки>, <Список элементов QStandardItem>) - добавляет одну строку
  в указанную позицию модели. В качестве параметра <Список> указывается список отдельных
  столбцов добавляемой строки;
♦ insertRow(<Индекс строки>, <Элемент QStandardItem>) - добавляет одну строку из одного
  столбца в указанную позицию модели;
♦ insertRow(<Индекс> [, parent=QModelIndex()]) - добавляет одну пустую строку в указанную
  позицию модели. Необязательный параметр parent указывает элемент верхнего уровня,
  в который будет вложена добавляемая строка, - если параметр не задан, строка добавляется
  на самый верхний уровень иерархии. Метод возвращает значение True, если операция успешно
  выполнена;
♦ insertRows(<Индекс>, <Количество>[, parent=QModelindex()]) - добавляет несколько пустых
  строк в указанную позицию модели. Необязательный параметр parent указывает элемент верхнего
  уровня, в который будут вложены добавляемые строки, - если параметр не задан, строки
  добавляются на самый верхний уровень иерархии. Метод возвращает значение True, если
  операция успешно выполнена;
♦ insertColumn(<Индекс столбца>, <Список элементов QStandardItem>) - добавляет один столбец
  в указанную позицию модели. В качестве параметра <Список> указывается список отдельных
  строк добавляемого столбца;
♦ insertColumn(<Индекс>[, parent=QModelIndex()]) - добавляет один пустой столбец в указанную
  позицию. Необязательный параметр parent указывает элемент верхнего уровня - владелец
  элементов, в который будет добавлен столбец. Если этот параметр не задан, столбец
  добавляется в элементы самого верхнего уровня иерархии. Метод возвращает значение True,
  если операция выполнена успешно;
♦ insertColumns(<Индекс>, <Количество>[, parent=QModelindex()]) - добавляет несколько
  пустых столбцов в указанную позицию. Необязательный параметр parent указывает элемент
  верхнего уровня - владелец элементов, в который будут добавлены столбцы. Если этот
  параметр не задан, столбцы добавляются в элементы самого верхнего уровня иерархии.
  Метод возвращает значение True, если операция успешно выполнена;
♦ removeRows(<Индекс>, <Количество>[, parent=QModelIndex()]) - удаляет указанное
  количество строк, начиная со строки, имеющей заданный индекс. Необязательный параметр
  parent указывает элемент верхнего уровня - владелец удаляемых строк. Если этот параметр
  не задан, будут удалены строки из самого верхнего уровня иерархии. Метод возвращает
  значение True, если операция успешно выполнена;
♦ removeColumns(<Индекс>, <Количество> [, parent=QModelIndex()]) - удаляет указанное
  количество столбцов, начиная со столбца, имеющего заданный индекс. Необязательный
  параметр parent указывает элемент верхнего уровня - владелец элементов, из которых
  будут удалены столбцы. Если этот параметр не задан, удаляются столбцы из элементов
  самого верхнего уровня иерархии. Метод возвращает значение True, е�ли операция
  успешно выполнена;
♦ takeItem(<Строка> [, <Столбец>=0]) - удаляет указанный элемент из модели и возвращает
  его в виде объекта класса QStandardItem;
♦ takeRow(<Индекс>) - удаляет строку с указанным индексом и возвращает ее в виде списка
  объектов класса QStandardItem;
♦ takeColumn(<Индекс>) - удаляет столбец с указанным индексом и возвращает его в виде
  списка объектов класса QStandardItem;
♦ clear() - удаляет все элементы из модели;
♦ item(<Строка> [, <Столбец>=0 ] ) - возвращает ссылку на элемент (объект класса
  QStandardItem), расположенный в указанной ячейке;
♦ invisibleRootItem() - возвращает ссылку на невидимый· корневой элемент модели в виде
  объекта класса QStandardItem;
♦ itemFromIndex(<Индекс QModelIndex>) - возвращает ссылку на элемент (объект класса
  QStandardItem), на который ссылается заданный индекс;
♦ index(<Строка>, <Столбец>[, parent=QModelIndex()]) - возвращает индекс элемента
  (объект класса QModelindex), расположенного в указанной ячейке. Необязательный параметр
  parent задает элемент верхнего уровня для искомого элемента. Если таковой не задан,
  будет выполнен поиск элемента на самом верхнем уровне иерархии;
♦ indexFromItem(<Элемент QStandardItem>) возвращает индекс указанного элемента в виде объекта
  класса QModelIndex;
♦ setData() - задает значение для роли role элемента, на который указывает заданный индекс.
  Метод возвращает значение True, если операция успешно выполнена. Формат метода:
  sеtData(<Индекс QModelIndex>, <Значение>[, role=ItemDataRole.EditRole])
♦ data(<Индекс QModelIndex>[, role=ItemDataRole.DisplayRole]) - возвращает данные,
  относящиеся к указанной роли элемента, на который ссылается заданный индекс;
♦ setHorizontalHeaderLabels(<Список строк>) - задает заголовки столбцов. В качестве
  параметра указывается список строк;
♦ setVerticalHeaderLabels(<Список строк>) - задает заголовки строк. В качестве параметра
  указывается список строк;
♦ setHorizontalHeaderItem(<Индекс>, <заголовок QStandardItem>) - задает заголовок столбца
  с указанным индексом;
♦ setVerticalHeaderItem(<Индекс>, <Заголовок QStandardItem>) - задает заголовок строки
  с указанным индексом;
♦ horizontalHeaderItem(<Индекс>) - возвращает заголовок (объект класса QStandardItem)
  столбца с указанным индексом;
♦ verticalHeaderItem(<Индекс>) - возвращает заголовок (объект класса QStandardItem) строки
  с указанным индексом;
♦ setHeaderData() - задает новое значение для указанной роли заголовка. Формат метода:
  setHeaderData(<Индекс>, <Ориентация>, <Значение>[, role=ItemDataRole.EditRole])
  В первом параметре указывается индекс строки или столбца, а во втором - ориентация
  в виде элемента Horizontal (горизонтальная) или Vertical (вертикальная) перечисления
  Orientation из модуля QtCore.Qt. Метод возвращает значение True, если операция успешно выполнена;
♦ headerData(<Индекс>, <Ориентация>[, role=ItemDataRole.DisplayRole]) - возвращает
  значение, соответствующее указанной роли заголовка. В первом параметре указывается индекс строки
  или столбца, а во втором - ориентация;
♦ findItems(<Текст>[, flags=MatchFlag.MatchExactly][, column=0]) - производит поиск элемента
  внутри модели в указанном в параметре column столбце по заданному тексту. Допустимые значения
  параметра flags см modelindex_23_4_1.py. В качестве значения метод возвращает список объектов
  класса QStandardItem или пустой список;
♦ sort(<Индекс столбца>[, order=SortOrder.AscendingOrder]) - производит сортировку. Если во
  втором параметре указан элемент AscendingOrder перечисления SortOrder из модуля QtCore.Qt,
  сортировка производится в прямом порядке, а если элемент DescendingOrder того же перечисления
  - в обратном;
♦ setSortRole(<Роль>) - задает роль, по которой производится сортировка;
♦ parent(<Индекс QModelIndex>) - возвращает индекс (объект класса QModelIndex) родительского
  элемента. В качестве параметра указывается индекс элемента-потомка;
♦ hasChildren([parent=QModelIndex()]) - возвращает True, если заданный элемент имеет хотя
  бы одного потомка, и False - в противном случае.
При изменении значения элемента генерируется сигнал itemChanged(<Элемент QStandardItem>).
Внутри обработчика через параметр доступна ссылка на изменившийся элемент.
"""
# todo добавить пример
