"""
Модели. Стандартная двухмерная модель (таблицы и иерархические структуры)

Класс QStandardItemModel из модуля QtGui реализует двумерную (таблица) и иерархическую
модели. Каждый элемент такой модели представлен классом QStandardItem из того же модуля.
Вывести на экран ее содержимое можно с помощью классов QTableView, QTreeView и др.,
передав модель в метод setModel() представления. Иерархия наследования:
QObject - QAbstractItemModel - QStandardItemModel Форматы конструктора класса QStandardItemModel:
QStandardItemModel([parent=None])
QStandardItemModel(<Количество строк>, <Количество столбцов>[, parent=None])

Класс QStandarditemМodel поддерживает следующие основные методы (полный их список можно найти
на странице https://doc.qt.io/qt-6/qstandarditemmodel.html):
♦ setRoWCount(<Количество строк>)-задает количество строк;
♦ setColumnCount(<Количество столбцов>) - задает количество столбцов;
♦ rowCount([parent=QModelIndex()])- возвращает количество строк. Необязательный параметр
  parent указывает элемент верхнего уровня, при этом будет возвращено количество вложенных
  в этот элемент строк, - если параметр не задан, возвращается количество строк верхнего
  уровня иерархии;
♦ columnCount([parent=QModelIndex()]) - возвращает количество столбцов. Необязательный
  параметр parent в этом случае не используется;
♦ setItem(<Строка>, <Столбец>, <Элемент QStandardItem>) - устанавливает элемент в ячейку,
  располагающуюся на пересечении указанных строки и столбца;
♦ appendRow(<Список элементов QStandardItem>.) - добавляет одну строку в конец модели.
  В качестве параметра указывается список отдельных столбцов добавляемой строки;
♦ appendRow(<Элемент QStandardItem>) - добавляет строку из одного столбца в конец модели;
♦ appendColumn(<Список элементов QStandardItem>) - добавляет один столбец в конец модели.
  В качестве параметра указывается список отдельных строк добавляемого столбца;
♦ insertRow(<Индекс строки>, <Список элементов QStandardItem>) - добавляет одну строку
  в указанную позицию модели. В качестве параметра <Список> указывается список отдельных
  столбцов добавляемой строки;
♦ insertRow(<Индекс строки>, <Элемент QStandardItem>) - добавляет одну строку из одного
  столбца в указанную позицию модели;
♦ insertRow(<Индекс> [, parent=QModelIndex()]) - добавляет одну пустую строку в указанную
  позицию модели. Необязательный параметр parent указывает элемент верхнего уровня,
  в который будет вложена добавляемая строка, - если параметр не задан, строка добавляется
  на самый верхний уровень иерархии. Метод возвращает значение True, если операция успешно
  выполнена;
♦ insertRows(<Индекс>, <Количество>[, parent=QModelindex()]) - добавляет несколько пустых
  строк в указанную позицию модели. Необязательный параметр parent указывает элемент верхнего
  уровня, в который будут вложены добавляемые строки, - если параметр не задан, строки
  добавляются на самый верхний уровень иерархии. Метод возвращает значение True, если
  операция успешно выполнена;
♦ insertColumn(<Индекс столбца>, <Список элементов QStandardItem>) - добавляет один столбец
  в указанную позицию модели. В качестве параметра <Список> указывается список отдельных
  строк добавляемого столбца;
♦ insertColumn(<Индекс>[, parent=QModelIndex()]) - добавляет один пустой столбец в указанную
  позицию. Необязательный параметр parent указывает элемент верхнего уровня - владелец
  элементов, в который будет добавлен столбец. Если этот параметр не задан, столбец
  добавляется в элементы самого верхнего уровня иерархии. Метод возвращает значение True,
  если операция выполнена успешно;
♦ insertColumns(<Индекс>, <Количество>[, parent=QModelindex()]) - добавляет несколько
  пустых столбцов в указанную позицию. Необязательный параметр parent указывает элемент
  верхнего уровня - владелец элементов, в который будут добавлены столбцы. Если этот
  параметр не задан, столбцы добавляются в элементы самого верхнего уровня иерархии.
  Метод возвращает значение True, если операция успешно выполнена;
♦ removeRows(<Индекс>, <Количество>[, parent=QModelIndex()]) - удаляет указанное
  количество строк, начиная со строки, имеющей заданный индекс. Необязательный параметр
  parent указывает элемент верхнего уровня - владелец удаляемых строк. Если этот параметр
  не задан, будут удалены строки из самого верхнего уровня иерархии. Метод возвращает
  значение True, если операция успешно выполнена;
♦ removeColumns(<Индекс>, <Количество> [, parent=QModelIndex()]) - удаляет указанное
  количество столбцов, начиная со столбца, имеющего заданный индекс. Необязательный
  параметр parent указывает элемент верхнего уровня - владелец элементов, из которых
  будут удалены столбцы. Если этот параметр не задан, удаляются столбцы из элементов
  самого верхнего уровня иерархии. Метод возвращает значение True, е�ли операция
  успешно выполнена;
♦ takeItem(<Строка> [, <Столбец>=0]) - удаляет указанный элемент из модели и возвращает
  его в виде объекта класса QStandardItem;
♦ takeRow(<Индекс>) - удаляет строку с указанным индексом и возвращает ее в виде списка
  объектов класса QStandardItem;
♦ takeColumn(<Индекс>) - удаляет столбец с указанным индексом и возвращает его в виде
  списка объектов класса QStandardItem;
♦ clear() - удаляет все элементы из модели;
♦ item(<Строка> [, <Столбец>=0 ] ) - возвращает ссылку на элемент (объект класса
  QStandardItem), расположенный в указанной ячейке;
♦ invisibleRootItem() - возвращает ссылку на невидимый· корневой элемент модели в виде
  объекта класса QStandardItem;
♦ itemFromIndex(<Индекс QModelIndex>) - возвращает ссылку на элемент (объект класса
  QStandardItem), на который ссылается заданный индекс;
♦ index(<Строка>, <Столбец>[, parent=QModelIndex()]) - возвращает индекс элемента
  (объект класса QModelindex), расположенного в указанной ячейке. Необязательный параметр
  parent задает элемент верхнего уровня для искомого элемента. Если таковой не задан,
  будет выполнен поиск элемента на самом верхнем уровне иерархии;
♦ indexFromItem(<Элемент QStandardItem>) возвращает индекс указанного элемента в виде объекта
  класса QModelIndex;
♦ setData() - задает значение для роли role элемента, на который указывает заданный индекс.
  Метод возвращает значение True, если операция успешно выполнена. Формат метода:
  sеtData(<Индекс QModelIndex>, <Значение>[, role=ItemDataRole.EditRole])
♦ data(<Индекс QModelIndex>[, role=ItemDataRole.DisplayRole]) - возвращает данные,
  относящиеся к указанной роли элемента, на который ссылается заданный индекс;
♦ setHorizontalHeaderLabels(<Список строк>) - задает заголовки столбцов. В качестве
  параметра указывается список строк;
♦ setVerticalHeaderLabels(<Список строк>) - задает заголовки строк. В качестве параметра
  указывается список строк;
♦ setHorizontalHeaderItem(<Индекс>, <заголовок QStandardItem>) - задает заголовок столбца
  с указанным индексом;
♦ setVerticalHeaderItem(<Индекс>, <Заголовок QStandardItem>) - задает заголовок строки
  с указанным индексом;
♦ horizontalHeaderItem(<Индекс>) - возвращает заголовок (объект класса QStandardItem)
  столбца с указанным индексом;
♦ verticalHeaderItem(<Индекс>) - возвращает заголовок (объект класса QStandardItem) строки
  с указанным индексом;
♦ setHeaderData() - задает новое значение для указанной роли заголовка. Формат метода:
  setHeaderData(<Индекс>, <Ориентация>, <Значение>[, role=ItemDataRole.EditRole])
  В первом параметре указывается индекс строки или столбца, а во втором - ориентация
  в виде элемента Horizontal (горизонтальная) или Vertical (вертикальная) перечисления
  Orientation из модуля QtCore.Qt. Метод возвращает значение True, если операция успешно выполнена;
♦ headerData(<Индекс>, <Ориентация>[, role=ItemDataRole.DisplayRole]) - возвращает
  значение, соответствующее указанной роли заголовка. В первом параметре указывается индекс строки
  или столбца, а во втором - ориентация;
♦ findItems(<Текст>[, flags=MatchFlag.MatchExactly][, column=0]) - производит поиск элемента
  внутри модели в указанном в параметре column столбце по заданному тексту. Допустимые значения
  параметра flags см modelindex_23_4_1.py. В качестве значения метод возвращает список объектов
  класса QStandardItem или пустой список;
♦ sort(<Индекс столбца>[, order=SortOrder.AscendingOrder]) - производит сортировку. Если во
  втором параметре указан элемент AscendingOrder перечисления SortOrder из модуля QtCore.Qt,
  сортировка производится в прямом порядке, а если элемент DescendingOrder того же перечисления
  - в обратном;
♦ setSortRole(<Роль>) - задает роль, по которой производится сортировка;
♦ parent(<Индекс QModelIndex>) - возвращает индекс (объект класса QModelIndex) родительского
  элемента. В качестве параметра указывается индекс элемента-потомка;
♦ hasChildren([parent=QModelIndex()]) - возвращает True, если заданный элемент имеет хотя
  бы одного потомка, и False - в противном случае.
При изменении значения элемента генерируется сигнал itemChanged(<Элемент QStandardItem>).
Внутри обработчика через параметр доступна ссылка на изменившийся элемент.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QTableView,
                               )
from PySide6.QtGui import (QStandardItemModel,
                           QIcon,
                           QStandardItem,
                           )
import os

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса представления таблицы QTableView

Импорт из модуля PySide6.QtCore класса модели двухмерной модели QStandardItemModel,
класса иконок QIcon, класса стандартного элемента модели QStandardItem

Импорт модуля для работы с переменными среды os
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект, объект верхнего уровня
        """
        super().__init__(parent)  # вызов конструктора родительского класса через функцию super()
        # QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Двухмерная модель')  # установка заголовка главного окна
        self.resize(400, 300)  # установка исходного размера главного окна
        self.table_view = QTableView(parent=self)  # создание экземпляра табличного представления
        self.table_model = QStandardItemModel()  # создание модели таблицы
        # создаем списки элементов строк таблицы
        lst_1 = ['Perl', 'РНР', 'Python', 'Ruby']
        lst_2 = [' http://www.perl.org/', 'http://php.net/', 'https://www.python.org/',
                 'https://www.ruby-lang.org/']
        lst_3 = [QIcon(os.path.join('data', 'perl.png')),
                 QIcon(os.path.join('data', 'php.png')),
                 QIcon(os.path.join('data', 'python.png')),
                 QIcon(os.path.join('data', 'ruby.png'))]
        for name, link, ico in zip(lst_1, lst_2, lst_3):
            self.table_model.appendRow([QStandardItem(ico, ''),  # создаем экземпляры элементов модели
                                        QStandardItem(name),
                                        QStandardItem(link)])
        self.table_model.setHorizontalHeaderLabels(['Значок', 'Название', 'Сайт'])  # задаем строку заголовков столбцов
        self.table_view.setModel(self.table_model)  # присоединяем модель к представлению
        self.table_view.setColumnWidth(0, 50)  # задаем исходную ширину столбца
        self.table_view.setColumnWidth(2, 200)

        self.setCentralWidget(self.table_view)  # размещение представления в главном окне приложения

        print(self.table_model.rowCount())  # выводим количество строек
        self.table_model.setItem(3, 1, QStandardItem('Ruby on rails'))  # заменяем элемент в таблице
        self.table_model.appendRow(QStandardItem('Bla'))  # добавляем строку в таблицу
        self.table_model.appendColumn([QStandardItem('New column'), QStandardItem('New column')])  # добавляем столбец
        self.table_model.insertRow(2)  # вставляем строку в таблицу по индексу строки

        self.table_model.itemChanged.connect(lambda item: print(item.text()))  # обработка сигнала на изменение элемента


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
