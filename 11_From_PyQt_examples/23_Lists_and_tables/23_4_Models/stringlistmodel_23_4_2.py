"""
Модели. Одномерная модель, содержащая список строк

Класс QStringListModel из модуля QtCore реализует одномерную модель, содержащую список
строк. Ее содержимое можно отобразить с помощью классов QListView, QComЬoBox и др.,
передав в метод setModel() представления. Иерархия наследования:
QObject - QAbstractItemModel - QAbstractListModel - QStringListModel
Форматы конструктора класса QStringListModel:
QStringListModel([parent=None])
QStringListModel(<Список строк>[, parent=None])
Пример:
1st = ['Perl', 'РНР', 'Python', 'RuЬy']
slm = QtCore .QStringListModel(lst, parent=window)
сЬо = QtWidgets.QComЬoBox()
cbo .setModel(slm)
Класс QStringListModel наследует метод index() из класса QAbstractListModel, который
возвращает индекс (объект класса QModelindex) элемента модели. Формат метода:
index(<Строка>[, column=0] [, parent=QModelIndex()])
Первый параметр задает номер строки в модели, в которой хранится нужный элемент.
Необязательный параметр column указывает номер столбца модели - для класса
QStringListModel, позволяющего хранить простые списки строк, его следует задать равным 0.
Необязательный параметр parent позволяет задать элемент верхнего уровня для искомого
элемента - если таковой не задан, будет выполнен поиск элемента на самом верхнем уровне
иерархии.
Класс QStringListModel поддерживает также следующие методы (здесь приведены только
основные - полный их список можно найти на странице https://doc.qt.io/qt-6/
qstringlistmodel.html):
♦ setStringList(<Список строк>) - устанавливает список строк в качестве содержимого
  модели;
♦ stringList() - возвращает список строк, хранящихся в модели;
♦ insertRows(<Индекс>, <Количество> [, parent=QModelIndex()]) - вставляет указанное
  количество пустых элементов в позицию, заданную первым параметром, остальные элементы
  сдвигаются в, конец списка. Необязательный параметр parent позволяет указать
  элемент верхнего уровня, в который будут вложены добавляемые элементы, - если таковой
  не задан, элементы будут добавлены на самый верхний уровень иерархии. Метод
  возвращает значение True, если операция успешно выполнена';
♦ removeRows (<Индекс>, <Количество> [, parent=QModelindex()]) - удаляет указанное
  количество элементов, начиная с позиции, заданной первым параметром. Необязательный
  параметр parent дозволяет указать элемент верхнего уровня, в который вложены
  удаляемые элементы, - если таковой не задан, элементы будут удалены из самого верхнего
  уровня иерархии. Метод возвращает значение True, если операция успешно выполнена;
♦ setData() - задает значение для роли role элемента, на который указывает индекс,
  заданный первым параметром. Формат метода:
  sеtData(<Индекс QModelindex>, <Значение>[, role=ItemDataRole.EditRole])
  Метод возвращает значение True, если операция выполнена успешно. Пример:
  1st = QtWidgets.QComЬoBox()
  slm = QtCore.QStringListModel(parent=window)
  slm.insertRows(0, 4)
  slm.setData(slm.index(0), 'Perl')
  slm.setData(slm.index(l), 'РНР')
  slm.setData(slm.index(2), 'Python')
  slm.setData(slm.index(З), 'RuЬy')
  lst.setModel(slm)
♦ data(<Индекс QModelIndex> [, role=ItemDataRole.DisplayRole]) - возвращает данные,
  хранимые в роли, указанной в параметре role, элемента, на который ссылается индекс
  из первого параметра;
♦ flags() - возвращает свойства элемента в виде комбинации элементов перечисления
  ItemFlag из модуля QtCore.Qt (см. modelindex_23_4_1.py);
♦ rowCount([parent=QModelIndex()]) - возвращает количество элементов в модели.
  Необязательный параметр parent указывает элемент верхнего уровня, при этом будет возвращено
  количество вложенных в него элементов. Если параметр не задан, возвращается
  количество элементов верхнего уровня иерархии;
♦ sort (<Индекс столбца>[, order=SortOrder .AscendingOrder]) - производит сортировку.
  Если во втором параметре указан элемент AscendingOrder перечисления SortOrder из
  класса QtCore. Qt, сортировка производится в прямом порядке, а если элемент
  DescendingOrder того же перечисления - в обратном.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QListView,
                               )
from PySide6.QtCore import QStringListModel, Qt

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса представления списка QListView

Импорт из модуля PySide6.QtCore класса модели списка строк QStringListModel,
класса перечислителя свойств виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """
    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Модель списка строк')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера окна
        self.list_view = QListView()  # создание представления списка
        self.slm = QStringListModel(parent=self)  # создание модели списка строк
        self.slm.setStringList(['Perl', 'РНР', 'Python', 'Ruby'])  # добавление строк в модель
        self.list_view.setModel(self.slm)  # добавление модели в представление
        self.slm.setData(self.slm.index(1), 'PHP to Bla', role=Qt.ItemDataRole.DisplayRole)
        # установка данных для элемента по индексу через модель индекса элемента
        print(self.slm.itemData(self.slm.index(0)))  # вывод данных из элемента
        print(self.slm.index(0).flags())  # вывод значения флагов элемента
        print(self.slm.index(0).row())  # вывод индекса строки для элемента
        print(self.slm.index(0).column())  # вывод индекса столбца для элемента
        print(self.slm.index(0).parent())  # вывод родительского элемента списка
        self.slm.insertRow(2)  # вставка строки по индексу
        self.slm.setData(self.slm.index(2), 'Added to index 2', role=Qt.ItemDataRole.DisplayRole)
        # установка данных для элемента по индексу

        self.setCentralWidget(self.list_view)  # добавление представления списка в главное окно приложения


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
