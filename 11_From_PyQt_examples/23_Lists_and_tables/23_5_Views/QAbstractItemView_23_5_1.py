"""
Модели. Абстрактный базовый класс представлений QAbstractItemView

Абстрактный класс QAbstractItemView является базовым для всех представлений.
Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea - QAbstractItemView

Класс QAbstractItemView поддерживает следующий набор полезных для нас методов (полный
их список можно найти на странице https://doc.qt.io/qt-6/qabstractitemview.html):
♦ setModel (<Модель>) -задает для представления модель. В качестве параметра передается
  объект одного из классов, производных от QAbstractItemModel;
♦ model() - возвращает заданную для представления модель;
♦ selectedIndexes() - возвращает выделенные элементы, представленные списком объектов
   класса QModelIndex;
♦ setCurrentIndex(<Индекс QModelIndex>) - делает элемент с указанным индексом текущим.
  Метод является слотом;
♦ currentIndex() - возвращает индекс (объект класса QModelIndex) текущего элемента;
♦ setRootIndex(<Индекс QModelIndex>) - делает элемент с заданным индексом корневым.
  Метод является слотом;
♦ rootIndex() -возвращает индекс (объект класса QModelIndex) корневого элемента;
♦ setAlternatingRowColors(<Флаг>) - если в качестве параметра указано значение True,
  то четные и нечетные строки будут иметь разный цвет фона;
♦ setIndexWidget(<Индекс QModelIndex>, <Компонент>) - устанавливает компонент в позицию,
  указанную индексом, и делает его потомком представления. Если в той позиции уже
  находится какой-либо компонент, он удаляется;
♦ indexWidget(<Индекс QModelIndex>) - возвращает ссылку на компонент, который был
  ранее установлен в позицию, указанную индексом;
♦ setSelectionModel (<Модель выделения>) - устанавливает модель выделения (объект
  класса QItemSelectionModel);
♦ selectionModel() - возвращает модель выделения (объект класса QItemSelectionModel);
♦ setSelectionMode(<Режим>) -задает режим выделения элементов. В качестве параметра
  указываются следующие элементы перечисления SelectionMode из класса QAbstractItemView:
  • NoSelection - элементы не могут быть выделены;
  • SingleSelection - можно выделить только один элемент;
  • MultiSelection - можно выделить несколько элементов. Повторный щелчок на элементе
    снимает выделение;
  • ExtendedSelection - можно выделить несколько элементов, щелкая на них мышью и удерживая
    при этом нажатой клавишу, <Ctrl>. Можно также нажать на элементе левую кнопку мыши и
    перемещать мышь, не отпуская кнопку. Если удерживать нажатой клавишу <Shift>, все
    элементы от текущей позиции до позиции щелчка мышью выделяются;
  • ContiguousSelection - можно выделить несколько элементов, нажав на элементе левую
    кнопку мыши и перемещая мышь, не отпуская кнопку. Если удерживать нажатой
    клавишу <Shift>, все элементы от текущей позиции до позиции щелчка мышью
    выделяются;
♦ setSelectionBehavior(<Режим>) - задает режим представления выделенных элементов.
  В качестве параметра указываются следующие элементы перечисления SelectionBehavior
  из класса QAbstractItemView:
  • SelectItems - выделяется отдельный элемент;
  • SelectRows- выделяется строка целиком;
  • SelectColumns- выделяется столбец целиком;
♦ selectAll() - выделяет все элементы. Метод является слотом;
♦ clearSelection() - снимает выделение. Метод является слотом;
♦ edit(<Индекс QModelIndex>) - переключает элемент с заданным индексом в режим
  редактирования, не делая его выделенным. Метод является слотом;
♦ setEditTriggers (<Действие>) - задает действие, при котором элемент переключается
  в режим редактирования. В качестве параметра указывается комбинация следующих
  элементов перечисления EditTrigger из класса QAbstractItemView:
  • NoEditTriggers - элемент не будет поддерживать редактирование;
  • currentChanged - при выделении-элемента;
  • DoubleClicked - при двойном щелчке мышью;
  • SelectedClicked - при щелчке мышью на уже выделенном элементе;
  • EditKeyPressed - при нажатии клавиши <F2>;
  • AnyKeyPressed - при нажатии любой символьной клавиши;
  • AllEditTriggers - при любом упомянутом ранее действии;
♦ setIconSize(<Размеры QSize>) - задает размеры значков;
♦ setTextElideMode(<Режим>) - задает режим обрезки текста, если он не помещается в
  отведенную область (в месте пропуска выводится многоточие). Могут быть указаны
  следующие элементы перечисления TextElideMode из модуля QtCore.Qt:
  • ElideLeft - текст обрезается слева;
  • ElideRight - текст обрезается справа;
  • ElideMiddle - текст вырезается посередине;
  • ElideNone - текст не обрезается;
♦ setTabKeyNavigation(<Флаг>) - если в качестве параметра указано значение True, между
  элементами можно перемещаться с помощью клавиш <Tab> и <Shift>+<Tab>;
♦ scrollTo(<Индекс QModelIndex>[, hint=ScrollHint.EnsureVisible]) - прокручивает
  представление таким образом, чтобы элемент, на который ссылается заданный индекс,
  был видим. В параметре hint указываются следующие элементы перечисления ScrollHint
  из класса QAbstractItemView:
  • EnsureVisible - элемент должен находиться в области видимости;
  • PositionAtTop - элемент должен находиться в верхней части;
  • PositionAtBottom - элемент должен находиться в нижней части;
  • PositionAtCenter - элемент должен находиться в центре;
♦ scrollToTop() - прокручивает представление в самое начало. Метод является слотом;·
♦ scrollToBottom() - прокручивает представление в самый конец. Метод является с.дотом;
♦ setDragEnabled(<Флаг>) - если в качестве параметра указано значение True, перетаскивание
  элементов разрешено;
♦ setDragDropMode(<Режим>) - задает режим работы drag & drop. В качестве параметра
  указываются следующие элементы перечисления DragDropMode из класса QAbstractItemView:
  • NoDragDrop - drag & drop не поддерживается;
  • DragOnly - поддерживается только перетаскивание;
  • DropOnly - поддерживается только сбрасывание;
  • DragDrop - поддерживается перетаскивание и сбрасывание;
  • InternalMove - допускается лишь перетаскивание внутри компонента;
♦ setDragDropOverwriteMode(<Флаг>) - если в качестве параметра задано значение True,
  сбрасываемые данные заменят имевшиеся в элемент ранее, если False - будут вставлены
  в позицию сброса (поведение по умолчанию);
♦ setDropIndicatorShown(<Флаг>)- если в качестве параметра указано значение True,
  позиция возможного сброса элемента будет подсвечена;
♦ setAutoScroll(<Флаг>) - если в качестве параметра указано значение True, при перетаскивании
  пункта будет производиться автоматическая прокрутка;
♦ setAutoScrollMargin(<Отступ>)- задает расстояние от края области, при достижении которого
  будет производиться автоматическая прокрутка области;
♦ update(<Индекс QModelIndex>) - обновляет элемент с заданным индексом. Метод является
  слотом.
Класс QAbstractItemView поддерживает следующие сигналы:
♦ activated(<Индекс QModelIndex>)- генерируется при активизации элемента путем одинарного,
  двойного щелчка мышью или нажатия клавиши <Enter>. В обработчике через параметр
  доступен индекс активного элемента;
♦ clicked(<Индекс QModelIndex>) - генерируется при щелчке мышью над элементом. Параметр
  хранит индекс элемента;
♦ douЫeClicked(<Индекс QModelIndex>) - генерируется при двойном щелчке мышью над элементом.
  Параметр хранит индекс элемента;
♦ entered(<Индекс QModelIndex>) - генерируется при вхождении курсора мыши в область
  элемента. Чтобы сигнал сработал, необходимо включить обработку перемещения курсора
  вызовом метода setMouseTracking(), унаследованного от класса QWidget. Внутри
  обработчика через параметр доступен индекс элемента;
♦ pressed(<Индекс QModelIndex>) - генерируется при нажатии кнопки мыши над элементом.
  Внутри обработчика через параметр доступен индекс элемента;
♦ viewportEntered() - генерируется при вхождении курсора мыши в область компонента.
  Чтобы сигнал сработал, необходимо включить обработку перемещения курсора с помощью
  метода setMouseTracking(), унаследованного от класса QWidget.
"""

# примеры использования см примеры по конкретным представлениям
