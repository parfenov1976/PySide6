"""
Преставления. Иерархический список.

Класс QTreeView реализует иерархический список. Иерархия наследования:
QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea -
QAbstractItemView - QTreeView
Формат конструктора класса QTreeView:
QTreeView([parent=None])
Класс QTreeView наследует все методы и сигналы класса QAbstractItemView
и дополнительно поддерживает следующие методы (здесь приведены только основные -
полный их список можно найти на странице https://doc.qt.io/qt-6/qtreeview.html):
♦ header() - возвращает ссылку на горизонтальный заголовок (объект класса QHeaderView);
♦ setColumnWidth(<Индекс>, <Ширина>) - задает ширину столбца с указанным в первом
  параметре индексом;
♦ columnWidth(<Индекс>) - возвращает ширину столбца;
♦ rowHeight(<Индекс QModelIndex>) - возвращает высоту строки, в которой находится
  элемент с указанным индексом;
♦ resizeColumnToContents(<Индекс столбца>) - изменяет ширину указанного столбца
  таким образом, чтобы в нем поместилось все содержимое. Метод является слотом;
♦ setUniformRowHeights(<Флаг>) - если в качестве параметра указано значение True, все
  элементы будут иметь одинаковую высоту;
♦ setHeaderHidden(<Флаг>) - если в качестве параметра указано значение True, заголовок
  будет скрыт. Значение False отображает заголовок;
♦ isHeaderHidden() - возвращает значение True, если заголовок скрыт, и False - в противном
  случае;
♦ setColumnHidden (<Индекс>, <Флаг>) - если во втором параметре указано значение True,
  то столбец с индексом, указанным в первом параметре, будет скрыт. Значение False
  отображает столбец;
♦ hideColumn(<Индекс>) - скрывает столбец с указанным индексом. Метод является слотом;
♦ showColumn(<Индекс>) - отображает столбец с указанным индексом. Метод является слотом;
♦ isColumnHidden (<Индекс>) - возвращает значение True, если столбец с указанным
  индексом скрыт, и False - в противном случ􀁃е;
♦ setRowHidden(<Индекс>, <Индекс родителя QModelIndex>, <Флаг>) - если в третьем параметре
  указано значение True, то строка с указанными индексом и индексом родителя
  будет скрыта. Значение False отображает строку;
♦ isRowHidden(<Индекс>, <Индекс родителя QModelIndex>) - возвращает значение True,
  если строка с указанными индексом и индексом родителя скрыта, и False - в противном
  случае;
♦ isIndexHidden(<Индекс QModelIndex>) - возвращает значение True, если элемент с указанным
  индексом скрыт, и False - в противном случае;
♦ setExpanded(<Индекс QModelIndex>, <Флаг>) - если во втором параметре указано значение
  True, то элементы, которые являются дочерними для элемента с указанным в первом
  параметре индексом, будут отображены, а если False - то скрыты.
♦ expand(<Индекс QModelindex>) - отображает элементы, которые являются дочерними
  для элемента с указанным индексом. Метод является слотом;
♦ expandToDepth(<Уровень>) - отображает все дочерние элементы до указанного уровня.
  Метод является слотом;
♦ expandAll() - отображает все дочерние элементы. Метод является слотом;
♦ collapse(<Индекс QModelIndex>) - скрывает элементы, которые являются дочерними
  для элемента с указанным индексом. Метод является слотом;
♦ collapseAll() - скрывает все дочерние элементы. Метод является слотом;
♦ isExpanded(<Индекс QModelIndex>) - возвращает значение True, если элементы, которые
  являются дочерними для элемента с указанным индексом, отображены, и False -
  в противном случае;
♦ setItemsExpandable(<Флаг>) - если в качестве параметра указано значение False, пользователь
  не сможет отображать или скрывать дочерние элементы;
♦ setAnimated(<Флаг>) - если в качестве параметра указано значение True, отображение
  и сокрытие дочерних элементов будет производиться с анимацией;
♦ setIndentation(<Отступ>) - задает отступ для дочерних элементов.
♦ setRootIsDecorated(<Флаг>) - если в качестве параметра указано значение False,
  у элементов верхнего уровня не будут показываться элементы управления, с помощью
  которых производится отображение и сокрытие дочерних элементов;
♦ setFirstColumnSpanned() - если третьим параметром передано значение True, содержимое
  первого столбца строки с указанными индексом и индексом родителя, займет всю
  ширину списка. Формат метода:
  setFirstColumnSpanned(<Индекс строки>, <Индекс родителя QModelIndex>, <Флаг>)
♦ setExpandsOnDoubleClick(<Флаг>) - если передать в параметре значение False, сворачивание
  и разворачивание пунктов списка будут выполняться по двойному щелчку мыши;
♦ setSortingEnabled(<Флаг>) - если в качестве параметра указано значение True, столбцы
  можно сортировать щелчками мыши на их заголовках. При этом в заголовке показывается
  текущее направление сортировки;
♦ setWordWrap(<Флаг>) - если в качестве параметра указано значение True, текст элементов
  при необходимости будет переноситься по строкам;
♦ sortByColumn (<Индекс столбца>, <Направление>) - производит сортировку. Если во
  втором параметре указан элемент AscendingOrder перечисления SortOrder из модуля
  QtCore.Qt, сортировка производится в прямом порядке, а если элемент DescendingOrder
  того же перечисления - в обратном. Метод является слотом.
Класс QTreeView поддерживает сигналы:
♦ expanded(<Индекс QModelIndex>) - генерируется при отображении дочерних элементов.
  Внутри обработчика через параметр доступен индекс элемента-родителя;
♦ collapsed(<Индекс QModelIndex>) - генерируется при сокрытии дочерних элементов.
  Внутри обработчика через параметр доступен индекс элемента-родителя.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QTreeView,
                               )
from PySide6.QtGui import (QStandardItemModel,
                           QStandardItem,
                           )
from PySide6.QtCore import Qt
import os

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса представления иерархического списка QTreeView

Импорт из модуля PySide6.QtCore класса модели двухмерной модели QStandardItemModel,
класса стандартного элемента модели QStandardItem

Импорт из модуля PySide6.QtCore класса перечислителя свойств виджетов

Импорт модуля для работы с переменными среды os
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект верхнего уровня
        """
        # super(parent).__init__()  # вызов конструктора родительского класса через функцию super()
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Класс элемента модели')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера главного окна приложения
        self.tree_view = QTreeView()  # создание представления иерархического списка
        self.standard_item_model = QStandardItemModel()  # создание модели иерархического списка
        # сборка иерархического списка
        rootitem_1 = QStandardItem('QAbstractItemView')
        rootitem_2 = QStandardItem('Базовый класс')
        item_1 = QStandardItem('QListView')
        item_2 = QStandardItem('Список')
        rootitem_1.appendRow([item_1, item_2])
        item_3 = QStandardItem('QTableView')
        item_4 = QStandardItem('Таблица')
        rootitem_1.appendRow([item_3, item_4])
        item_5 = QStandardItem('QTreeView')
        item_6 = QStandardItem('Иерархический список')
        rootitem_1.appendRow([item_5, item_6])
        self.standard_item_model.appendRow([rootitem_1, rootitem_2])

        rootitem_3 = QStandardItem('QAbstractItemModel')
        rootitem_4 = QStandardItem('Базовый класс')
        item_7 = QStandardItem('QStringListModel')
        item_8 = QStandardItem('Одномерная модель')
        rootitem_3.appendRow([item_7, item_8])
        item_9 = QStandardItem('QStandardItemModel')
        item_10 = QStandardItem('Двухмерная модель')
        rootitem_3.appendRow([item_9, item_10])
        item_11 = QStandardItem('QStandardItem')
        item_12 = QStandardItem('Элемент модели')
        rootitem_3.appendRow([item_11, item_12])
        self.standard_item_model.appendRow([rootitem_3, rootitem_4])

        self.standard_item_model.setHorizontalHeaderLabels(['Класс', 'Описание'])

        self.tree_view.setAnimated(True)  # включение анимации при развертывании / свертывании
        self.tree_view.setModel(self.standard_item_model)  # подключение модели к представлению
        self.tree_view.setColumnWidth(0, 170)
        self.setCentralWidget(self.tree_view)  # размещение представления в главном окне приложения

        # сигналы и обработчики сворачивания / разворачивания
        self.tree_view.expanded.connect(lambda index: print(index))
        self.tree_view.collapsed.connect(lambda index: print(index))

        self.tree_view.expand(rootitem_3.index())  # развернуть 2-ой список


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
