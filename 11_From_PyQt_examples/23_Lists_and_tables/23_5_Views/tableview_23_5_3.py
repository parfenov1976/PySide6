"""
Представления. Таблица.

Класс QTableView реализует таблицу. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea -
QAbstractItemView - QTableView
Формат конструктора класса QTableView:
QTableView([parent=None])

Класс QTableView наследует все методы и сигналы из класса QAbstractItemView
и дополнительно поддерживает следующие методы (здесь приведены только
основные - полный их список можно найти на странице https://doc.qt.io/qt-6/qtableview.html):
♦ selectRow(<Индекс>) - выделяет строку с указанным индексом. Метод является слотом;
♦ selectColumn(<Индекс>) - выделяет столбец с указанным индексом. Метод является
  слотом;
♦ horizontalHeader() - возвращает ссылку на горизонтальный заголовок, представленный
  объектом класса QHeaderView;
♦ verticalHeader () - возвращает ссылку на вертикальный заголовок, представленный
  объектом класса QHeaderView. Например, вывести таблицу без заголовков можно следующим
  образом:
  view.horizontalHeader().hide()
  view.verticalHeader().hide()
♦ setRowHeight(<Индекс>, <Высота>) - задает высоту строки с указанным в первом параметре
  индексом;
♦ rowHeight(<Индекс>) - возвращает высоту строки с указанным индексом;
♦ setColumnWidth (<Индекс>, <Ширина>) - задает ширину столбца с указанным в первом
  параметре индексом;
♦ columnWidth(<Индекс>) - возвращает ширину столбца с указанным индексом;
♦ resizeRowToContents(<Индекс строки>) - изменяет размер указанной строки таким
  образом, чтобы в нее поместилось все содержимое. Метод является слотом;
♦ resizeRowsToContents() - изменяет размер всех строк таким образом, чтобы в них поместилось
  все содержимое. Метод является слотом;
♦ resizeColumnToContents(<Индекс столбца>) - изменяет размер указанного столбца
  таким образом, чтобы в него поместилось все содержимое. Метод является слотом;
♦ resizeColumnsToContents() - изменяет размер всех столбцов таким образом, чтобы
  в них поместилось содержимое. Метод является слотом;
♦ setSpan() - растягивает элемент с указанными в первых двух параметрах индексами на
  заданное количество строк и столбцов, производя как бы объединение ячеек таблицы.
  Формат метода:
  setSpan(<Индекс строки>, <Индекс столбца>, <Количество строк>, <Количество столбцов>)
♦ rowSpan(<Индекс строки>, <Индекс столбца>) - возвращает количество ячеек в строке,
  которое занимает элемент с указанными индексами.
♦ columnSpan(<Индекс строки>, <Индекс столбца>) - возвращает количество ячеек в
  столбце, которое занимает элемент с указанными индексами;
♦ clearSpans() - отменяет все объединения ячеек;
♦ setRowHidden(<Индекс>, <Флаг>) - если во втором параметре указано значение True, то
  строка с индексом, указанным в первом параметре, будет скрыта. Значение False отображает
  строку;
♦ hideRow(<Индекс>) - скрывает строку с указанным индексом. Метод является слотом;
♦ showRow(<Индекс>) - отображает строку с указанным индексом. Метод является слотом;
♦ isRowHidden(<Индекс>) - возвращает значение True, если строка с указанным индексом
  скрыта, и False - в противном случае;
♦ setColumnHidden(<Индекс>, <Флаг>) - если во втором параметре указано значение True,
  то столбец с индексом, указанным в первом параметре, будет скрыт. Значение False
  отображает столбец;
♦ hideColumn(<Индекс>) - скрывает столбец с указанным индексом. Метод является слотом;
♦ showColumn(<Индекс>) - отображает столбец с указанным индексом. Метод является
  слотом;
♦ isColumnHidden(<Индекс>) - возвращает значение True, если столбец с указанным индексом
  скрыт, и False - в противном случае;
♦ isIndexHidden(<Индекс QModelIndex>) - возвращает значение True, если элемент с указанным
  индексом скрыт, и False - в противном случае;
♦ setGridStyle(<Стиль>) - задает стиль линий сетки. В качестве параметра указываются
  следующие элементы перечисления PenStyle из модуля QtCore.Qt:
  • NoPen - линии не выводятся;
  • SolidLine - сплошная линия;
  • DashLine - штриховая линия;
  • DotLine - точечная линия;
  • DashDotLine - штрих и точка, штрих и точка и т. д.;
  • DashDotDotLine - штрих и две точки, штрих и две точки и т. д.;
♦ setShowGrid(<Флаг>) - если в качестве параметра указано значение True, то сетка будет
  отображена, а если False - то скрыта. Метод является слотом;
♦ setSortingEnabled(<Флаг>) - если в качестве параметра указано значение True, столбцы
  можно сортировать, щелкая мышью на их заголовках. При этом в заголовке показывается
  текущее направление сортировки;
♦ setCornerButtonEnabled(<Флаг>) - если в качестве параметра указано значение True,
  с помощью кнопки в левом верхнем углу заголовка можно выделить всю таблицу. Значение
  False отключает кнопку;
♦ setWordWrap (<Флаг>) - если в качестве параметра указано значение True, текст элементов
  при необходимости будет переноситься по строкам;
♦ sortByColumn (<Индекс столбца>, <Направление>) - производит сортировку. Если во
  втором параметре указан элемент AscendingOrder перечисления SortOrder из модуля
  QtCore.Qt, сортировка производится в прямом порядке, а если элемент DescendingOrder
  того же перечисления - в обратном. Метод является слотом.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QTableView,
                               )
from PySide6.QtGui import (QStandardItemModel,
                           QIcon,
                           QStandardItem,
                           )
from PySide6.QtCore import Qt
import os

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса представления таблицы QTableView

Импорт из модуля PySide6.QtCore класса модели двухмерной модели QStandardItemModel,
класса иконок QIcon, класса стандартного элемента модели QStandardItem

Импорт из модуля PySide6.QtCore класса перечислителя свойств виджетов

Импорт модуля для работы с переменными среды os
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект, объект верхнего уровня
        """
        super().__init__(parent)  # вызов конструктора родительского класса через функцию super()
        # QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Двухмерная модель')  # установка заголовка главного окна
        self.resize(400, 300)  # установка исходного размера главного окна
        self.table_view = QTableView(parent=self)  # создание экземпляра табличного представления
        self.table_model = QStandardItemModel()  # создание модели таблицы
        # создаем списки элементов строк таблицы
        lst_1 = ['Perl', 'РНР', 'Python', 'Ruby']
        lst_2 = [' http://www.perl.org/', 'http://php.net/', 'https://www.python.org/',
                 'https://www.ruby-lang.org/']
        lst_3 = [QIcon(os.path.join('data', 'perl.png')),
                 QIcon(os.path.join('data', 'php.png')),
                 QIcon(os.path.join('data', 'python.png')),
                 QIcon(os.path.join('data', 'ruby.png'))]
        for name, link, ico in zip(lst_1, lst_2, lst_3):
            self.table_model.appendRow([QStandardItem(ico, ''),  # создаем экземпляры элементов модели
                                        QStandardItem(name),
                                        QStandardItem(link)])
        self.table_model.setHorizontalHeaderLabels(['Значок', 'Название', 'Сайт'])  # задаем строку заголовков столбцов
        self.table_view.setModel(self.table_model)  # присоединяем модель к представлению
        self.table_view.setColumnWidth(0, 50)  # задаем исходную ширину столбца
        self.table_view.setColumnWidth(2, 200)
        self.table_view.setGridStyle(Qt.PenStyle.DashLine)  # настройка вывода линий сетки
        self.table_view.setSortingEnabled(True)  # включение сортировки столбцов
        self.table_view.setCornerButtonEnabled(True)  # включение угловой кнопки для выделения всей таблицы
        self.table_view.setWordWrap(True)  # включение переноса по строкам
        self.table_view.selectRow(2)
        self.table_view.sortByColumn(2, Qt.SortOrder.AscendingOrder)  # сортировка таблицы

        self.setCentralWidget(self.table_view)  # размещение представления в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
