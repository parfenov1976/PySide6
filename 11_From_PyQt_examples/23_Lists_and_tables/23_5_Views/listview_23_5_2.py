"""
Представления. Простой список.

Класс QListView реализует простой список с возможностью выбора как одного, так и нескольких
пунктов. Кроме текста, в любом пункте такого списка может присутствовать значок.
Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea -
QAbstractItemView - QListView
Формат конструктора класса QListView:
QListView([parent=None])
Класс QListView наследует все методы и сигналы из класса QAbstractItemView,
включая методы setModel(), model() и selectedIndexes(). Помимо этого, он дополнительно
определяет следующие методы (здесь приведены только основные - полный их список
можно найти на странице https://doc.qt.io/qt-6/qlistview.html):
♦ setModelColumn(<Индекс>) - задает индекс отображаемого столбца в табличной модели
  (по умолчанию отображается первый столбец с индексом 0);
♦ setViewMode(<Режим>) - задает режим отображения элементов. В качестве параметра
  указываются следующие элементы перечисления ViewMode из класса QListView:
  • ListMode - элементы выстраиваются по вертикали, а значки имеют маленькие размеры;
  • IconMode - элементы выстраиваются по горизонтали, а значки имеют большие размеры.
    Элементы можно свободно перемещать мышью;
♦ setMovement(<Режим>) - задает режим перемещения элементов. В качестве параметра
  указываются следующие элементы перечисления Movement из класса QListView:
  • Static - пользователь не может перемещать элементы;
  • Free - свободное перемещение;
  • Snap - перемещаемые элементы автоматически выравниваются по сетке, размеры
    которой задаются методом setGridSize();
♦ setGridSize(<Размеры QSize>) - задает размеры отдельной ячейки сетки, по которой
  выравниваются перемещаемые элементы;
♦ setResizeMode(<Режим>) - задает режим расположения элементов при изменении размера
  списка. В качестве параметра указываются следующие элементы перечисления
  ResizeMode из класса QListView:
  • Fixed - элементы остаются в том же положении;
  • Adjust - положение элементов изменяется при изменении размеров;
♦ setFlow(<Режим>) - задает порядок вывода элементов. В качестве параметра указываются
  следующие элементы перечисления Flow из класса QListView: LeftToRight (слева
  направо) и TopToBottom (сверху вниз);
♦ setWrapping(<Флаг>) - если в качестве параметра указано значение False, перенос элементов
  на новую строку (если они не помещаются в ширину области) запрещен;
♦ setWordWrap(<Флаг>) - если в качестве параметра указано значение True, текст элементов
  при необходимости будет переноситься по строкам;
♦ setLayoutMode(<Режим>) - задает режим размещения элементов. В качестве параметра
  указываются следующие элементы перечисления LayoutMode из класса QListView:
  • SinglePass - элементы размещаются все сразу. Если список слишком большой, то
  • окно останется заблокированным, пока все элементы не будут отображены;
  • Batched - элементы размещаются блоками. Размер такого блока задается методом
    setBatchSize();
♦ setBatchSize(<Количество>) - задает количество элементов в отдельном блоке, если
  в качестве режима размещения элементов указан Batched;
♦ setUniformItemSizes(<Флаг>) - если в качестве параметра указано значение True, все
  элементы будут иметь одинаковый размер (по умолчанию они имеют разные размеры,
  зависящие от содержимого);
♦ setSpacing(<Отступ>) - задает отступ вокруг элемента;
♦ setSelectionRectVisible(<Флаг>) - если в качестве параметра указано значение True,
  будет отображаться вспомогательная рамка, показывающая область выделения. Метод
  доступен только при использовании режима множественного выделения;
♦ setRowHidden(<Индекс>, <Флаг>) - если во втором параметре указано значение True,
  строка с индексом, указанным в первом параметре, будет скрыта. Значение False отображает
  строку;
♦ isRowHidden(<Индекс>) - возвращает значение True, если строка с указанным индексом
  скрыта, и False - в противном случае.
Класс QListView поддерживает сигнал indexesMoved(<Список индексов QModelIndex>), генерируемый
при перемещении элементов. Внутри обработчика через параметр доступен список
индексов перемещаемых элементов.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QListView,
                               )
from PySide6.QtGui import (QStandardItemModel,
                           QStandardItem,
                           QIcon,
                           )
from PySide6.QtCore import QSize
import os

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,
класса представления простого списка QListView

Импорт из модуля PySide6.QtCore класса модели двухмерной модели QStandardItemModel,
класса иконок QIcon, класса стандартного элемента модели QStandardItem

Импорт модуля для работы с переменными среды os
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект, объект верхнего уровня
        """
        super().__init__(parent)  # вызов конструктора родительского класса через функцию super()
        # QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Простой список')  # установка заголовка главного окна
        self.resize(400, 300)  # установка исходного размера главного окна
        self.list_view = QListView(parent=self)  # создание экземпляра табличного представления
        self.standard_item_model = QStandardItemModel()  # создание модели таблицы
        # создаем списки элементов срок списка
        lst_1 = ['Perl', 'РНР', 'Python', 'Ruby']
        lst_2 = [QIcon(os.path.join('data', 'perl.png')),
                 QIcon(os.path.join('data', 'php.png')),
                 QIcon(os.path.join('data', 'python.png')),
                 QIcon(os.path.join('data', 'ruby.png'))]
        for name, ico in zip(lst_1, lst_2):
            item = QStandardItem(ico, name)  # создаем экземпляры элементов модели
            self.standard_item_model.appendRow(item)  # добавляем элементы в модель
        self.list_view.setViewMode(QListView.ViewMode.IconMode)  # включение режима отображения элементов иконками
        self.list_view.setMovement(QListView.Movement.Snap)  # задает режим перетаскивания с выравниванием по сетке
        self.list_view.setGridSize(QSize(50, 50))  # установка размера ячейки сетки
        self.list_view.setResizeMode(QListView.ResizeMode.Adjust)  # задает режим расположения при изменении
        # размера окна списка с изменением положения элементов

        self.list_view.indexesMoved.connect(lambda i: print(i))  # сигнал и обработчик на перемещение элементов списка

        self.list_view.setModel(self.standard_item_model)  # присоединяем модель к представлению

        self.setCentralWidget(self.list_view)  # размещение представления в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
