"""
Списки и таблицы. Использование делегатов

Все три представления, QListView, QTableView и QTreeView, дают возможность редактирования
текста их элементов. Например, в таблице (класс QTableView) мы можем дважды щелкнуть
мышью на любом элементе, после чего в нем появится поле ввода. Введем в это поле новый
текст и нажмем клавишу <Enter> для подтверждения ввода или <Esc> - для отмены.
За редактирование данных в представлении отвечает особый класс, называемый делегатом.
Он создает компонент, в котором будет выполняться редактирование значения (редактор),
задает его параметры, заносит в него само редактируемое значение, а по окончании
редактирования переносит его назад, в модель.

По умолчанию в качестве делегата используется класс QItemDelegate из модуля QtWidgets.
А в качестве компонента-редактора применяется однострочное поле ввода (класс QLineEdit).
Если мы хотим использовать для редактирования значения в каком-либо столбце или строке
другой редактор (например, многострочное поле ввода, поле ввода даты или целого числа),
мы создадим другой делегат и назначим его представлению. Класс, представляющий
делегат, должен быть унаследован от класса QStyledItemDelegate.
Иерархия наследования классов QItemDelegate и QStyledItemDelegate:
QObject - QAbstractItemDelegate - QItemDelegate
QObject - QAbstractItemDelegate - QStyledItemDelegate

В новом классе-делегате следует переопределить следующие методы:
♦ createEditor() - создает компонент, который будет использоваться для редактирования
  данных, и задает его параметры. Формат метода:
  createEditor(self, <Родитель>, <Настройки>, <Индекс>)
  Вторым параметром передается ссылка на компонент-представление, который станет
  родителем создаваемого редактора (список, таблица или иерархический список). Третьим
  параметром передается объект класса QStyleOptionViewItem, хранящий дополнительные
  настройки делегата, четвертым - индекс текущего элемента модели в виде объекта
  класса QModelIndex.
  Метод createEditor() должен создать компонент-редактор, задать у него в качестве
  родителя компонент-представление (он передается вторым параметром) и вернуть созданный
  компонент в качестве результата.
  Чтобы отказаться от использования собственного делегата и указать представлению использовать
  делегат по умолчанию, в методе createEditor() следует вернуть значение None.
♦ setEditorData() - заносит в компонент-редактор, созданный в методе createEditor(),
  данные из текущего элемента модели, тем самым подготавливая редактор для редактирования
  этих данных. Формат метода:
  setEditorData(self, <Редактор>, <Индекс>)
  Вторым параметром передается компонент-редактор, а третьим - индекс текущего элемента
  модели в виде объекта класса QModelindex;
♦ updateEditorGeometry() - задает размеры редактора соответственно размерам области,
  отведенной под него в компоненте-представлении. Формат:
  updateEditorGeometry(self, <Редактор>, <Настройки>, <Индекс>)
  Вторым параметром передается ссылка на компонент-редактор, третьим - ссылка на
  объект класса QStyleOptionViewItem, хранящий настройки делегата, четвертым - индекс
  текущего элемента модели, представленный объектом класса QModelIndex.
  Размеры отведенной под редактор области можно получить из атрибута rect объекта
  класса QStyleOptionViewItem, переданного третьим параметром (полное описание класса
  QStyleOptionViewItem приведено на странице https://doc.qt.io/qt-6/qstyleoptionviewitem.html,
  а описание класса QStyleOption, от которого он порожден - на странице
  https://doc.qt.io/qt-6/qstyleoption.html);
♦ setModelData() - по окончании редактирования переносит значение из редактора в текущий
  элемент модели. Формат:
  setModelData(self, <Редактор>, <Модель>, <Индекс>)
  Вторым параметром передается ссылка на компонент-редактор, третьим - ссылка на
  модель, четвертым - индекс текущего элемента модели в виде объекта класса
  QModelIndex.
  Полное описание базового класса-делегата QAbstractItemDelegate можно найти на странице
  https://doc.qt.io/qt-6/qabstractitemdelegate.html,
  класса QItemDelegate - на странице https://doc.qt.io/qt-6/qitemdelegate.html,
  а класса QStyledItemDelegate - на странице https://doc.qt.io/qt-6/qstyleditemdelegate.html.
Для назначения делегатов представлению следует применять следующие методы, унаследованные
от класса QAbstractItemView:
♦ setItemDelegate(<Делегат>) - назначает заданный делегат для всего представления;
♦ setitemDelegateForColumn(<Индекс столбца>, <Делегат>) - назначает заданный делегат
  для столбца представления с указанным индексом;
♦ setitemDelegateForRow(<Индекс строки>, <Делегат>) - назначает заданный делегат
  для строки представления с указанным индексом.
  Если в какой-либо ячейке представления действуют одновременно два делегата, заданные
  для столбца и для строки, будет использоваться делегат, заданный для строки.
"""

# TODO добавить пример
