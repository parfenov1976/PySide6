"""
Получение данных о базе данных. Получений сведений о полях таблиц базы данных

Сведения об отдельном поле таблицы возвращаются методами field() класса QSqlRecord.
Они представляются объектом класса QSqlField, поддерживающим следующие методы:
♦ name() -возвращает имя поля;
♦ metaType() - возвращает объект класса QMetaType (модуль QtCore), описывающий тип
  поля.
  Класс QMetaType поддерживает метод id(), возвращающий целочисленный идентификатор
  типа поля. Идентификаторы наиболее часто применяемых типов применительно
  к Python приведены далее (полный их список можно найти по адресу
  https://doc.qt.io/qt-6/qmetatype.html#Type-enum):
  • 0 - тип определить не удалось;
  • 1 - логический;
  • 2, 4 или 32 - целочисленный;
  • 6 или 38 - вещественный;
  • 10 - строковый;
  • 14 - дата;
  • 15 - время;
  • 16 - временная отметка;
  • 3, 5 или 35 - положительное целое число;
  • 7 - строка из одного символа;
  • 12 - двоичные данные QByteArray;
♦ length() -возвращает максимальную длину поля в символах;
♦ precision() - возвращает количество знаков после запятой у полей, хранящих вещественные
  числа;
♦ defaultValue() - возвращает значение поля по умолчанию;
♦ requiredStatus() - возвращает признак, является ли поле обязательным к заполнению,
  в виде одного из элементов перечисления RequiredStatus из класса QSqlField:
  • Required - поле является обязательным к заполнению;
  • Optional - поле не является обязательным к заполнению;
  • Unknown - определить признак обязательности заполнения поля не представляется
    возможным;
♦ isAutoValue() - возвращает True, если значение в поле заносится автоматически (что
  может быть, например, у поля автоинкремента), и False - в противном случае;
♦ isReadOnly() - возвращает True, если поле доступно только для чтения, и False -
  в противном случае.
Полное описание класса QSqlField приведено на странице https://doc.qt.io/qt-6/qsqlfield.html.
"""

from PySide6.QtWidgets import (QMainWindow,
                               QPlainTextEdit,
                               )
from PySide6.QtSql import QSqlDatabase

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, 
класса многострочного редактируемого текстового поля для простого текста QPlainTextEdit

Импорт из модуля PySide6.QtSql класса соединений с базами данных QSqlDatabase
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Получение данных о таблицах базы данных')  # установка заголовка главного окна приложения
        self.resize(600, 600)  # установка исходного размера окна
        self.txt_field = QPlainTextEdit()  # создание многострочного текстового поля
        self.setCentralWidget(self.txt_field)  # размещение текстового поля в главном окне приложения

    def append_txt(self, txt: str) -> None:
        """
        Метод добавления текста в текстовое поле
        :param txt: str - текст для добавления в поле
        """
        self.txt_field.appendPlainText(txt)  # добавление текста


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sqlite_con = QSqlDatabase.addDatabase('QSQLITE')  # создание объекта соединения с базой данных
    sqlite_con.setDatabaseName('data.sqlite')  # подключение базы данных
    sqlite_con.open()  # открытие базы
    window.append_txt(str(sqlite_con.tables()) + '\n')  # вывод списка таблиц базы данных
    table = sqlite_con.record('albums')  # запрос структуры одной из таблиц базы данных
    window.append_txt(str(table) + '\n')  # вывод данных объекта информации о таблице
    table_field = table.field(0)  # запрос данных о поле по его индексу
    window.append_txt(str(table_field) + '\n')  # вывод сведений о поле
    window.append_txt(f'Имя поля: {str(table_field.name())}')  # вывод имени поля
    table_field_type = table_field.metaType()  # запрос объекта описания поля
    window.append_txt(f'Идентификатор типа поля: {str(table_field_type.id())}')
    window.append_txt(f'Максимальная длина поля: {str(table_field.length())}'
                      f' (отрицательное число указывает, что параметр не установлен)')
    window.append_txt(f'Количество знаков после запятой для вещественных чисел: {str(table_field.length())}'
                      f' (отрицательное число указывает, что параметр не установлен)')
    window.append_txt(f'Значение по умолчанию: {str(table_field.defaultValue())}')
    window.append_txt(f'Обязательность заполнения поля: {str(table_field.requiredStatus())}')
    sqlite_con.close()  # закрытие базы
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла
