"""
Размещение компонентов интерфейса в окнах. Контейнеры-стопки

Контейнер-стопка выстраивает находящиеся в нем компоненты в линию. Существуют два
следующих класса, представляющих подобного рода контейнеры:
♦ QHBoxLayout - горизонтальная стопка;
♦ QVBoxLayout - вертикальная стопка.
Иерархия наследования для этих классов выглядит так:
(QObject, QLayoutItem) - QLayout - QBoxLayout - QHBoxLayout (QObject, QLayoutItem)
- QLayout - QBoxLayout - QVBoxLayout
Контейнеры-стопки не являются наследниками класса QWidget, вследствие чего не обладают
собственным окном и не могут использоваться отдельно. Поэтому они обязательно должны
быть привязаны к родительскому компоненту (обычно окну или другому контейнеру).
При привязке контейнера к родителю контейнер автоматически выводится на экран.
Формат вызова конструктора обоих классов:
QHBoxLayout | QVBoxLayout([<Родитель>])
Если родитель не был указан при создании объекта контейнера, привязать контейнер к
родителю можно вызовом у последнего метода setLayout(<Привязываемый контейнер>).
Добавить компоненты в контейнер, удалить их и заменить другими позволяют следующие методы:
♦ addWidget() - добавляет компонент в конец контейнера. Формат метода:
  addWidget(<Компонент>[, stretch=O] [, alignment=O])
  В первом параметре указывается ссылка на компонент. Необязательный параметр stretch задает
  фактор растяжения для ячейки в виде целого числа, а параметр alignment - выравнивание
  компонента внутри ячейки. Два последних параметра можно задавать как позиционные или
  именованные, например:
  hbox.addWidget(button1, 10, QtCore.Qt.AlignmentFlag.AlignRight)
  hbox.addWidget(button2, stretch=10)
  hbox.addWidget(button3, alignment=QtCore.Qt.AlignmentFlag.AlignRight)
♦ insertWidget() - добавляет компонент в позицию контейнера, обозначенную указанным индексом.
  Формат метода:
  insertWidget(<Индекс>, <Компонент>[, stretch=0][, alignment=0])
  Если в первом параметре указано значение О, компонент будет добавлен в начало контейнера,
  а если отрицательное значение - в конец контейнера. Иное значение указывает определенную
  позицию. Остальные параметры аналогичны параметрам метода addWidget().Пример:
  hbox.addWidget(button1)
  hbox.insertWidget(-1, button2) # Добавление в конец
  hbox.insertWidget(O, button3) # Добавление в начало
♦ removeWidget(<Компонент>) - удаляет указанный компонент из контейнера;
♦ replaceWidget() - заменяет присутствующий в контейнере компонент другим.
  Формат метода:
  replaceWidget(<Заменяемый компонент>, <Заменяющий компонент>[,
                options=FindChildOption.FindChildrenRecursively])
  В необязательном параметре options можно задать режим поиска заменяемого компонента
  в виде одного из элементов перечисления FindChildOptions из модуля QtCore. Qt:
  FindDirectChildrenOnly (искать только среди содержимого текущего, контейнера) и
  FindChildrenRecursively (искать среди содержимого текущего и всех вложенных в него
  контейнеров);
♦ addLayout(<Контейнер>[, stretch=0) - добавляет другой контейнер в конец текущего контейнера.
  С помощью этого метода можно вкладывать один контейнер в другой, создавая таким образом
  структуру любой сложности;
♦ insertLayout(Позиция>, <Контейнер>[, stretch=0]) - добавляет другой контейнер в позицию
  текущего контейнера, обозначенную указанным индексом. Если в первом параметре задано
  отрицательное значение, контейнер добавляется в конец;
♦ addSpacing(<Размер>) - добавляет пустое пространство указанного размера (в пикселах)
  в конец контейнера:
  hbox.addSpacing(100)
♦ insertSpacing(<Индекс>, <Размер>) - добавляет пустое пространство указанного размера
  (в пикселах) в позицию с заданным индексом. Если первым параметром передается отрицательное
  значение, то пространство добавляется в конец;
♦ addStretch([stretch=OJ) - добавляет пустое растягиваемое пространство с нулевым
  минимальным размером и фактором растяжения stretch в конец контейнера. Это пространство
  можно сравнить с пружиной, вставленной между компонентами, а параметр stretch - с
  жесткостью пружины;
♦ insertStretch(<Индекс>[, stretch=0) - добавляет растягиваемое пространство в позицию
  с указанным индексом. Если в первом параметре задано отрицательное значение, пространство
  добавляется в конец контейнера.
Параметр alignment в методах addWidget() и insertWidget() задает выравнивание компонента
внутри ячейки в виде одного из следующих элементов перечисления AlignmentFlag из модуля
QtCore. Qt:
♦ AlignLeft или AlignLeading - горизонтальное выравнивание по левому краю;
♦ AlignRight или AlignTrailing - горизонтальное выравнивание по правому краю;
♦ AlignHCenter - горизонтальное выравнивание по центру;
♦ AlignJustify - заполнение всей ячейки;
♦ AlignTop - вертикальное выравнивание по верхнему краю;
♦ AlignBottom - вертикальное выравнивание по нижнему краю;
♦ AlignVCenter - вертикальное выравнивание по центру;
♦ AlignBaseline - вертикальное выравнивание по базовой линии;
♦ AlignCenter - горизонтальное и вертикальное выравнивание по центру;
♦ AlignAbsolute- если в методе setLayoutDirection(<Выравнивание>) класса QWidget
  указан элемент RightToLeft перечисления LayoutDirection из модуля QtCore.Qt,
  атрибут AlignLeft задает выравнивание по правому краю, а атрибут AlignRight -
  по левому краю. Чтобы атрибут AlignLeft всегда соответствовал именно левому краю,
  необходимо указать комбинацию AlignAbsolute | AlignLeft. Аналогично следует поступить
  с атрибутом AlignRight.
Можно задавать комбинации элементов, один из которых укажет выравнивание по горизонтали,
другой - по вертикали. Например, комбинация AlignLeft | AlignTop задает выравнивание
по левому и верхнему краям. Противоречивые значения приводят к непредсказуемым результатам.
Контейнеры поддерживают также следующие методы (здесь приведены только основные, полный
их список ищите в документации):
♦ setDirection(<Направление>) - задает направление вывода компонентов. В параметре можно
  указать следующие элементы перечисления Direction из класса QHBoxLayout или QVBoxLayout:
  • LeftToRight - слева направо (значение по умолчанию у горизонтального контейнера);
  • RightToLeft - справа налево;
  • TopToBottom - сверху вниз (значение по умолчанию у вертикального контейнера);
  • BottomToTop - снизу вверх;
♦ setContentsMargins() - задает величины отступов от границ контейнера до его содержимого.
  Форматы метода:
  setContentsMargins(<Слева>, <Сверху>, <Справа>, <Снизу>)
  setContentsMargins(<Отступы QMargins>)
  Примеры:
  hbox.setContentsMargins(2, 4, 2, 4)
  m = QtCore.QMargins(4, 2, 4, 2)
  hbox.setContentsMargins(m)
♦ setSpacing(<Расстояние>) - задает расстояние между компонентами.

"""
from PySide6.QtWidgets import (QMainWindow,
                               QHBoxLayout,
                               QPushButton,
                               QWidget)

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса стопки с горизонтальным расположением виджетов QHBoxLayout,
класса виджета кнопки QPushButton, базовый класс пустого виджета QWidget
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Горизонтальная стопка QHBoxLayout')  # установка заголовка главного окна
        self.resize(300, 60)  # установка исходного размера окна приложения
        self.btn_1 = QPushButton('1')  # создание экземпляра виджета кнопки
        self.btn_2 = QPushButton('2')
        self.btn_3 = QPushButton('3')
        self.btn_4 = QPushButton('4')
        self.hbox = QHBoxLayout()  # создаем контейнер горизонтальную стопку
        self.hbox.addWidget(self.btn_1)  # добавляем компонент в стопку
        self.hbox.addWidget(self.btn_2)
        self.hbox.addWidget(self.btn_3)
        self.hbox.addWidget(self.btn_4)
        self.container = QWidget()  # создание контейнера для стопок с виджетами
        self.container.setLayout(self.hbox)  # размещение стопки в контейнере
        self.setCentralWidget(self.container)  # размещение контейнера в главном окне приложения с заполнением до
        # размеров главного окна


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
