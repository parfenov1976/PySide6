"""
Размещение компонентов интерфейса в окнах. Абсолютное позиционирование.

Размещать компоненты в окнах можно двумя способами:
♦ посредством абсолютного позиционирования - явно указывая местоположение и размеры
  каждого компонента;
♦ используя контейнеры - особые компоненты, предназначенные для размещения других
  компонентов в определенном порядке (например, в стопку или в ячейках воображаемой сетки).
Все описанные далее классы определены в модуле QtWidgets.

При создании компонента с указанием ссылки на родителя созданный компонент будет выведен
в позицию с координатами (0, 0) - в левый верхний угол родителя. Если создать таким
образом несколько компонентов, то все они отобразятся в одной и той же позиции, наложившись
друг на друга. Размеры добавляемых компонентов будут соответствовать их содержимому.
Для перемещения компонента можно воспользоваться методом move(), а для изменения размеров
- методом resize(). Выполнить одновременное изменение позиции и размеров позволяет метод
setGeometry().

Абсолютное позиционирование имеет следующие недостатки:
♦ при изменении размеров окна координаты и размеры располагающихся в нем компонентов
  придется изменять самостоятельно;
♦ при запуске программы на другом компьютере, имеющем другие настройки экрана, системных
  шрифтов или другую операционную систему, надписи на компонентах могут выходить за их пределы.
  Аналогичная проблема возникнет, если программа поддерживает несколько языков интерфейса
  (поскольку длина слов в разных языках различается).
"""

from PySide6.QtWidgets import QMainWindow, QLabel, QPushButton

"""
Импорт из модуля PySide6.QWidgets класса главных окон QMainWindow, класса виджета ярлыка QLabel
класс виджета кнопки QPushButton
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Абсолютное позиционирование')  # установка заголовка главного окна
        self.resize(300, 120)  # установка исходного размера главного окна
        self.lbl = QLabel('Текст надписи', self)  # создание экземпляра виджета ярлыка с надписью и
        # с указанием на родительский объект
        self.btn = QPushButton('Текст на кнопке', self)  # создание кнопки с указанием на родительский объект
        self.lbl.setGeometry(10, 10, 280, 60)  # указание координат ЛВУ и размеров компонента
        self.btn.resize(280, 30)  # указание размеров компонента
        self.btn.move(10, 80)  # указание координат ЛВУ компонента


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
