"""
Размещение компонентов интерфейса в окне. Контейнер-сетка.

Контейнер-сетка располагает добавленные в него компоненты в ячейках воображаемой
сетки. Он реализуется классом QGridLayout. Иерархия его наследования:
(QObject, QLayoutItem) - QLayout - QGridLayout
Формат конструктора класса QGridLayout:
QGridLayout([<Родитель>])
Если родитель не был указан при создании объекта контейнера, привязать контейнер к родителю
можно вызовом у последнего метода setLayout().
Добавить компоненты в сетку позволяют следующие методы:
♦ addWidget() - добавляет компонент в указанную ячейку сетки. Метод имеет следующие
  форматы:
  addWidget(<Компонент>, <Строка>, <Столбец> [, alignment=0])
  addWidget(<Компонент>, <Строка>, <Столбец>, <Количество строк>,
            <Количество столбцов>[, alignment=0])
  В первом параметре указывается ссылка на компонент, во втором параметре - индекс
  строки, а в третьем - индекс столбца. Нумерация строк и столбцов начинается с нуля.
  Параметр <Количество строк> задает количество занимаемых компонентом ячеек по
  вертикали, а параметр <Количество столбцов> - по горизонтали. Параметр alignment
  задает выравнивание компонента внутри ячейки в виде одного из элементов перечисления
  AlignmentFlag из модуля QtCore.Qt. Пример:
  grid = QtGui.QGridLayout()
  grid.addWidget(button1, О, О, alignment=QtCore.Qt.AlignmentFlag.AlignLeft)
  grid.addWidget(button2, О, 1, QtCore.Qt.AlignmentFlag.AlignRight)
  grid.addWidget(button3, 1, О, 1, 2)
♦ addLayout() - добавляет заданный контейнер в указанную ячейку сетки. Метод имеет
  следующие форматы:
  addLayout(<Контейнер>, <Строка>, <Столбец>[, alignment=0])
  addLayout(<Контейнер>, <Строка>, <Столбец>, <Количество строк>,
            <Количество столбцов>[, alignment=0])
  В первом параметре указывается ссылка на контейнер. Остальные параметры аналогичны
  параметрам метода addWidget().
Для удаления и замены компонентов следует пользоваться методами:
♦ removeWidget(<Компонент>) - удаляет указанный компонент из контейнера;
♦ replaceWidget() - заменяет присутствующий в контейнере компонент другим.
  Формат метода:
  replaceWidget(<Заменяемый компонент>, <Заменяющий компонент>[,
                options=FindChildOption.FindChildrenRecursively])
  В необязательном параметре options можно задать режим поиска заменяемого компонента
  в виде одного из элементов перечисления FindChildOptions из модуля QtCore. Qt:
  FindDirectChildrenOnly (искать только среди содержимого текущего, контейнера) и
  FindChildrenRecursively (искать среди содержимого текущего и всех вложенных в него
  контейнеров);
Класс QGridLayout поддерживает следующие методы (здесь приведены только основные
методы - полный их список смотрите на странице https://doc.qt.io/qt-6/qgridlayout.html):
♦ setRowMinimumHeight(<Индекс>, <Высота>) - задает минимальную высоту строки с индексом
  <Индекс>;
♦ setColumnMinimumWidth(<Индекс>, <Ширина>) - задает минимальную ширину столбца
  с индексом <Индекс>;
♦ setRowStretch(<Индекс>, <Фактор растяжения>) - задает фактор растяжения по вертикали
  для строки с индексом <Индекс>;
♦ setColumnStretch(<Индекс>, <Фактор растяжения>) - задает фактор растяжения по горизонтали
  для столбца с индексом <Индекс>;
♦ setContentsMargins() - задает величины отступов от границ сетки до ее содержимого.
  Форматы метода:
  setContentsMargins(<Слева>, <Сверху>, <Справа>, <Снизу>)
  setContentsMargins(<Отступы QMargins>)
♦ setSpacing(<Расстояние>) - задает расстояние между компонентами по горизонтали и
  вертикали;
♦ setHorizontalSpacing(<Расстояние>) - задает расстояние между компонентами по горизонтали;
♦ setVerticalSpacing(<Расстояние>) - задает расстояние между компонентами по вертикали;
♦ rowCount() - возвращает количество строк сетки;
♦ columnCount() - возвращает количество столбцов сетки;
♦ cellRect(<Индекс строки>, <Индекс колонки>) - возвращает объект класса QRect, который
  хранит координаты и размеры ячейки, расположенной на пересечении строки и
  колонки с указанными индексами.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QPushButton,
                               QGridLayout,
                               QWidget,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса контейнера-сетки QGridLayout, класса виджета кнопки QPushButton, 
базового класса пустого виджета QWidget
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Контейнер-сетка QGridLayout')  # установка заголовка главного окна приложения
        self.resize(250, 100)  # установка исходного размера окна приложения
        self.btn_1 = QPushButton('1')  # создание экземпляра виджета кнопки
        self.btn_2 = QPushButton('2')
        self.btn_3 = QPushButton('3')
        self.btn_4 = QPushButton('4')
        self.grid = QGridLayout()  # создание сетки для размещения виджетов
        self.grid.addWidget(self.btn_1, 0, 0)  # размещение виджета в сетке
        self.grid.addWidget(self.btn_2, 0, 1)
        self.grid.addWidget(self.btn_3, 1, 0)
        self.grid.addWidget(self.btn_4, 1, 1)
        self.container = QWidget()  # создание контейнера для сетки с виджетами
        self.container.setLayout(self.grid)  # размещение сетки с виджетами в контейнере для слоев
        self.setCentralWidget(self.container)  # размещение контейнера в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
