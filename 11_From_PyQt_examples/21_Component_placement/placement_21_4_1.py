"""
Размещение компонентов интерфейса в окне. Контейнер-стек

Контейнер-стек в каждый момент времени выводит лишь один компонент-потомок. Он
реализуется классом QStackedLayout. Иерархия наследования выглядит так:
(QObject, QLayoutItem) - QLayout - QStackedLayout
Формат конструктора класса QStackedLayout:
QStackedLayout([<Родитель>])
Если родитель не был указан при создании объекта контейнера, привязать контейнер к родителю
можно вызовом у последнего метода setLayout().
Класс QStackedLayout поддерживает следующие методы:
♦ addWidget(<Компонент>) - добавляет компонент в конец контейнера. Метод возвращает
  индекс добавленного компонента;
♦ insertWidget(<Индекс>, <Компонент>) - добавляет компонент в позицию контейнера,
  обозначенную указанным индексом. Метод возвращает индекс добавленного компонента;
♦ setCurrentIndex(<Индекс>) - делает видимым компонент с указанным индексом. Метод
  является слотом;
♦ currentIndex() - возвращает индекс видимого компонента;
♦ setCurrentWidget(<Компонент>) - делает видимым указанный компонент. Метод является
  слотом;
♦ currentWidget() - возвращает ссылку на видимый компонент;
♦ setStackingMode(<Режим>) - задает режим отображения компонентов. В параметре
  могут быть указаны следующие элементы перечисления StackingMode · из класса
  QStackedLayout:
  • StackOne - видим только один компонент (значение по умолчанию);
  • StackAll - видны все компоненты;
♦ stackingMode() - возвращает режим отображения компонентов;
♦ count() - возвращает количество компонентов внутри контейнера;
♦ widget(<Индекс>) - возвращает ссылку на компонент, который расположен по
  указанному индексу, или значение None при обращении по несуществующему индексу.
Для удаления и замены компонентов следует пользоваться методами:
♦ removeWidget(<Компонент>) - удаляет указанный компонент из контейнера;
♦ replaceWidget() - заменяет присутствующий в контейнере компонент другим.
  Формат метода:
  replaceWidget(<Заменяемый компонент>, <Заменяющий компонент>[,
                options=FindChildOption.FindChildrenRecursively])
  В необязательном параметре options можно задать режим поиска заменяемого компонента
  в виде одного из элементов перечисления FindChildOptions из модуля QtCore. Qt:
  FindDirectChildrenOnly (искать только среди содержимого текущего, контейнера) и
  FindChildrenRecursively (искать среди содержимого текущего и всех вложенных в него
  контейнеров);
Класс QStackedLayout поддерживает следующие сигналы:
♦ currentChanged(<Индекс>) - генерируется при выводе другого компонента. Через параметр
  внутри обработчика доступен целочисленный индекс выведенного компонента;
♦ widgetRemoved(<Индекс>) - генерируется при удалении компонента из контейнера.
  Через параметр внутри обработчика доступен целочисленный индекс удаленного компонента.

Класс QStackedWidget также реализует стек компонентов, но представляет собой полноценный
компонент. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QStackedWidget
Формат конструктора этого класса:
QStackedWidget([<Родитель>])
Класс QStackedWidget поддерживает описанные ранее методы addWidget(), insertWidget(),
removeWidget(), replaceWidget(), count(), currentIndex(), currentWidget(), widget(),
setCurrentIndex() и setCurrentWidget(). Кроме того, класс QStackedWidget наследует все
методы из базовых классов и определяет два дополнительных:
♦ indexOf (<Компонент>) - возвращает индекс компонента, ссылка на который указана
  в параметре;
♦ __len__() - возвращает количество компонентов. Метод вызывается при использовании
функции len(), а также для проверки объекта на логическое значение.
Поддерживаются и описанные ранее сигналы currentChanged() и widgetRemoved().
"""

from PySide6.QtWidgets import (QMainWindow,
                               QPushButton,
                               QStackedLayout,
                               QWidget,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса контейнера-стека QStackedLayout, класса виджета кнопки QPushButton, 
базового класса пустого виджета QWidget
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Контейнер-сетка QGridLayout')  # установка заголовка главного окна приложения
        self.resize(250, 100)  # установка исходного размера окна приложения
        self.btn_1 = QPushButton('1')  # создание экземпляра виджета кнопки
        self.btn_2 = QPushButton('2')
        self.btn_3 = QPushButton('3')
        self.btn_4 = QPushButton('4')
        self.stack = QStackedLayout()  # создание контейнера-стека для размещения виджетов
        self.stack.addWidget(self.btn_1)  # размещение виджета в стеке
        self.stack.addWidget(self.btn_2)
        self.stack.addWidget(self.btn_3)
        self.stack.addWidget(self.btn_4)
        self.container = QWidget(self)  # создание контейнера для стека с виджетами
        self.container.setLayout(self.stack)  # размещение стека с виджетами в контейнере для слоев
        self.setCentralWidget(self.container)  # размещение контейнера в главном окне приложения
        self.stack.currentChanged.connect(self.on_change)  # создание сигнала на смену компонента и привязка обработчика

    def wheelEvent(self, event):
        """
        Обработчик события прокрутки колесика мыши
        :param event: QWheelEvent объект класса события прокрутки колесика мыши
        :return: None
        """
        if event.angleDelta().y() > 0:
            self.stack.setCurrentIndex(self.stack.currentIndex() - 1)
        else:
            self.stack.setCurrentIndex(self.stack.currentIndex() + 1)

    @staticmethod
    def on_change(index):
        print(f'Смена видимого компонента {index}')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
