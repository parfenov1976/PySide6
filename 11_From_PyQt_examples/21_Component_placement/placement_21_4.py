"""
Размещение компонентов интерфейса в окне. Контейнер-форма.

Контейнер-форма выстраивает компоненты в виде таблицы из двух столбцов: в левом столбце
располагаются надписи для компонентов, в правом - сами компоненты. Он реализуется
классом QFormLayout. Иерархия наследования выглядит так:
(QObject, QLayoutItem) - QLayout - QFormLayout
Формат конструктора класса QFormLayout:
QFormLayout([<Родитель>])
Если родитель не был указан при создании объекта контейнера, привязать контейнер к родителю
можно вызовом у последнего метода setLayout().
Класс QFormLayout поддерживает следующие методы (здесь приведены только основные -
полный их список смотрите на странице https://doc.qt.io/qt-6/qformlayout.html):
♦ addRow() - добавляет в конец контейнера строку с указанными надписью и компонентом
  или другим контейнером. Форматы метода:
  addRow(<Текст надписи>, <Компонент> 1 <Контейнер>)
  addRow(<Надпись QLabel>, <Компонент> 1 <Контейнер>)
  addRow(<Компонент> 1 <Контейнер>)
  В первом формате в тексте надписи можно указать символ &, который пометит клавишу
  быстрого доступа для компонента (контейнера). Второй формат принимает в качестве
  надписи компонент класса QLabel - в этом случае связь с компонентом (контейнером)
  необходимо устанавливать вручную, передав ссылку на него в метод setBuddy(). Третий
  формат помещает компонент (контейнер) сразу в оба столбца формы;
♦ insertRow() - добавляет строку в позицию контейнера, обозначенную указанным индексом.
  Если в первом параметре задано отрицательное значение, компонент добавляется в
  конец контейнера. Форматы метода:
  insertRow(<Индекс>, <Текст надписи>, <Компонент> 1 <Контейнер>)
  insertRow(<Индекс>, <Надпись QLabel>, <Компонент> 1 <Контейнер>)
  insertRow(<Индекс>, <Компонент> 1 <Контейнер>)
♦ setFormAlignment(<Режим>) - задает режим выравнивания формы:
  form.setFormAlignment(QtCore.Qt.AlignmentFlag.AlignRight |
                        QtCore.Qt.AlignmentFlag.AlignBottom)
♦ setLabelAlignment(<Режим>) - задает режим выравнивания надписей:
  form.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
    Параметр alignment в методах setFormAlignment() и setLabelAlignment() задает
    выравнивание компонента внутри ячейки в виде одного из следующих элементов
    перечисления AlignmentFlag из модуля QtCore. Qt:
    ♦ AlignLeft или AlignLeading - горизонтальное выравнивание по левому краю;
    ♦ AlignRight или AlignTrailing - горизонтальное выравнивание по правому краю;
    ♦ AlignHCenter - горизонтальное выравнивание по центру;
    ♦ AlignJustify - заполнение всей ячейки;
    ♦ AlignTop - вертикальное выравнивание по верхнему краю;
    ♦ AlignBottom - вертикальное выравнивание по нижнему краю;
    ♦ AlignVCenter - вертикальное выравнивание по центру;
    ♦ AlignBaseline - вертикальное выравнивание по базовой линии;
    ♦ AlignCenter - горизонтальное и вертикальное выравнивание по центру;
    ♦ AlignAbsolute- если в методе setLayoutDirection(<Выравнивание>) класса QWidget
      указан элемент RightToLeft перечисления LayoutDirection из модуля QtCore.Qt,
      атрибут AlignLeft задает выравнивание по правому краю, а атрибут AlignRight -
      по левому краю. Чтобы атрибут AlignLeft всегда соответствовал именно левому краю,
      необходимо указать комбинацию AlignAbsolute | AlignLeft. Аналогично следует поступить
      с атрибутом AlignRight.
♦ setRowWrapPolicy(<Режим>) - задает местоположение надписей относительно связанных с
  ними компонентов. В параметре указываются следующие элементы перечисления RowWrapPolicy
  из класса QFormLayout:
  • DontWrapRows - надписи расположены слева от компонентов;
  • WrapLongRows - длинные надписи могут находиться выше компонентов, а короткие
    надписи - слева от компонентов;
  • WrapAllRows - надписи всегда расположены выше компонентов;
♦ setFieldGrowthPolicy(<Режим>) - задает режим управления размерами компонентов.
  В параметре указываются следующие элементы перечисления FieldGrowthPolicy из
  класса QFormLayout:
  • FieldsStayAtSizeHint - компоненты всегда будут принимать рекомендуемые
    (возвращаемые методом sizeHint()) размеры;
  • ExpandingFieldsGrow - компоненты, у которых установлена политика изменения
    размеров Expanding или MinimumExpanding, займут всю доступную ширину. Размеры
    остальных компонентов всегда будут соответствовать рекомендуемым;
  • AllNonFixedFieldsGrow - все компоненты по возможности займут всю доступную ширину;
♦ setContentsMargins() - задает величины отступов от границ формы до ее содержимого.
  Форматы метода:
  setContentsMargins(<Слева>, <Сверху>, <Справа>, <Снизу>)
  setContentsMargins(<Отступы QMargins>)
♦ setSpacing(<Расстояние>) - задает расстояние между компонентами по горизонтали и вертикали;
♦ setHorizontalSpacing(<Расстояние>) - задает расстояние между компонентами по горизонтали;
♦ setVerticalSpacing(<Расстояние>) - задает расстояние между компонентами по вертикали.
Для удаления и замены компонентов следует пользоваться методами:
♦ removeWidget(<Компонент>) - удаляет указанный компонент из контейнера;
♦ replaceWidget() - заменяет присутствующий в контейнере компонент другим.
  Формат метода:
  replaceWidget(<Заменяемый компонент>, <Заменяющий компонент>[,
                options=FindChildOption.FindChildrenRecursively])
  В необязательном параметре options можно задать режим поиска заменяемого компонента
  в виде одного из элементов перечисления FindChildOptions из модуля QtCore. Qt:
  FindDirectChildrenOnly (искать только среди содержимого текущего, контейнера) и
  FindChildrenRecursively (искать среди содержимого текущего и всех вложенных в него
  контейнеров);
"""
from PySide6.QtWidgets import (QMainWindow,
                               QFormLayout,
                               QHBoxLayout,
                               QLineEdit,
                               QTextEdit,
                               QPushButton,
                               QWidget,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса контейнера-формы QFormLayout, класса горизонтальной стопки QHBoxLayout,
класса виджета однострочного редактируемого текста QLineEdit, класса виджета
многострочного редактируемого текста QTextEdit, класса виджета кнопки QPushButton, 
базового класса пустого виджета QWidget
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Контейнер-форма QFormLayout')  # установка заголовка главного окна
        self.resize(300, 150)  # установка исходного размера окна
        self.line_edit = QLineEdit()  # создание экземпляра виджета однострочного текстового поля
        self.text_edit = QTextEdit()  # создание экземпляра виджета многострочного текстового поля
        self.btn_1 = QPushButton('О&тправить')  # создание кнопки
        self.btn_2 = QPushButton('О&чистить')  # создание кнопки
        self.hbox = QHBoxLayout()  # создание горизонтального контейнера-стопки для виджетов
        self.hbox.addWidget(self.btn_1)  # добавление виджета в контейнер
        self.hbox.addWidget(self.btn_2)
        self.form = QFormLayout()  # создание контейнера-формы
        self.form.addRow('&Название:', self.line_edit)  # размещение в контейнере-форме однострочного текстового поля
        # и названия строки
        self.form.addRow('&Описание:', self.text_edit)  # размещение в контейнере-форме многострочного текстового поля
        # и названия строки
        self.form.addRow(self.hbox)  # размещение в контейнере-форме слоя с кнопками
        self.container = QWidget()  # создание контейнера для размещения слоев с виджетами
        self.container.setLayout(self.form)  # размещение контейнера-формы в контейнере для слоев с виджетами
        self.setCentralWidget(self.container)  # размещение контейнера со слоями в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
