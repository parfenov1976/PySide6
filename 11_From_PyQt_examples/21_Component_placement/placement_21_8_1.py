"""
Размещение компонентов интерфейса в окне. Прокручиваемая панель.

Панель с полосами прокрутки (которые выводятся автоматически, если содержимое панели
не помещается в ней) представляется классом QScrollArea. Иерархия наследования выглядит
так:
(QObject, QPaintDevice) - QWidget - QFrame - QAbstractScrollArea - QScrollArea
Конструктор класса QScrollArea имеет следующий формат:
QScroll.Area([<Родитель>])
Класс QScrollArea поддерживает следующие методы (здесь приведены только основные - полный
их список смотрите на странице https://doc.qt.io/qt-6/qscrollarea.html):
♦ setWidget(<Компонент>) - помещает заданный компонент в панель-;
♦ setWidgetResizable(<Флаг>) - если в качестве параметра указано значение True, при
  изменении размеров панели будут изменяться и размеры компонента. Значение False
  запрещает изменение размеров компонента;
♦ setAlignment(<Выравнивание>) - задает местоположение компонента внутри панели,
  когда размеры панели больше размеров компонента, в виде одного из элементов перечисления
  AlignmentFlag из модуля QtCore.Qt:
  ♦ AlignLeft или AlignLeading - горизонтальное выравнивание по левому краю;
  ♦ AlignRight или AlignTrailing - горизонтальное выравнивание по правому краю;
  ♦ AlignHCenter - горизонтальное выравнивание по центру;
  ♦ AlignJustify - заполнение всей ячейки;
  ♦ AlignTop - вертикальное выравнивание по верхнему краю;
  ♦ AlignBottom - вертикальное выравнивание по нижнему краю;
  ♦ AlignVCenter - вертикальное выравнивание по центру;
  ♦ AlignBaseline - вертикальное выравнивание по базовой линии;
  ♦ AlignCenter - горизонтальное и вертикальное выравнивание по центру;
  ♦ AlignAbsolute- если в методе setLayoutDirection(<Выравнивание>) класса QWidget
    указан элемент RightToLeft перечисления LayoutDirection из модуля QtCore.Qt,
    атрибут AlignLeft задает выравнивание по правому краю, а атрибут AlignRight -
    по левому краю. Чтобы атрибут AlignLeft всегда соответствовал именно левому краю,
    необходимо указать комбинацию AlignAbsolute | AlignLeft. Аналогично следует поступить
    с атрибутом AlignRight.
  scrollArea.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
♦ ensureVisible(<X>, <У>[, xMargin=50][, yMargin=50]) - прокручивает панель таким
  образом, чтобы точка с координатами (<Х>, <У>) оказалась в видимой области. Параметры
  xMargin и yMargin задают отступы соответственно по горизонтали и вертикали между
  границами панели и видимой области;
♦ ensureWidgetVisible(<Компонент>[, xMargin=50][, yMargin=50]) - прокручивает панель
  таким образом, чтобы <Компонент> оказался в видимой области. Параметры xMargin и yMargin
  задают отступы соответственно по горизонтали и вертикали между границами панели и видимой
  области;
♦ widget() - возвращает ссылку на компонент, который расположен внутри панели, или значение
  None, если панель пуста;
♦ takeWidget() - удаляет компонент из панели и возвращает ссылку на него. Сам компонент
  не удаляется.
Класс QScrollArea наследует следующие методы из класса QAbstractScrollArea (здесь перечислены
только основные - полный их список смотрите на странице
https://doc.qt.io/ qt-6/qabstractscrollarea.html):
♦ horizontalScrollBar() - возвращает ссылку на горизонтальную полосу прокрутки (объект
  класса QScrollBar);
♦ verticalScrollBar() - возвращает ссылку на вертикальную полосу прокрутки (объект
  класса QScrollBar);
♦ setHorizontalScrollBarPolicy(<Режим>) - устанавливает режим отображения горизонтальной
  полосы прокрутки;
♦ setVerticalScrollBarPolicy(<Режим>) - устанавливает режим отображения вертикальной
  полосы прокрутки.
  В параметре <Режим> могут быть указаны следующие элементы перечисления ScrollBarPolicy
  из модуля QtCore. Qt:
  • ScrollBarAsNeeded - полоса прокрутки отображается только в том случае, если размеры
    компонента больше размеров панели;
  • ScrollBarAlwaysOff - полоса прокрутки никогда не отображается;
  • ScrollBarAlwaysOn - полоса прокрутки отображается всегда.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QScrollArea,
                               QLabel,
                               QFrame,
                               )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса прокручиваемой 
панели QScrollArea, класса виджета ярлыка QLabel, класса рамки QFrame

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('QScrollArea')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера главного окна
        self.lbl_1 = QLabel('Компонент 1')  # создание ярлыка в качестве компонента
        self.lbl_1.setFixedSize(200, 400)  # установка фиксированного размера ярлыка
        self.lbl_1.setFrameStyle(QFrame.Shape.Box | QFrame.Shadow.Plain)  # создание рамки вокруг ярлыка
        self.sroll_area = QScrollArea()  # создание панели с прокруткой
        self.sroll_area.setWidget(self.lbl_1)  # размещение в панели с прокруткой виджета
        self.sroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)  # установка политики видимости
        # вертикальной полосы прокрутки
        self.setCentralWidget(self.sroll_area)  # размещение панели с прокруткой в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
