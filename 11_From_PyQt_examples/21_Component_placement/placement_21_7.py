"""
Размещение компонентов интерфейса в окне. Аккордеон (QToolBox).

Аккордеон похож на панель с вкладками, только отдельные панели в нем расположены по
вертикали: при переключении на какую-либо панель она разворачивается, а развернутая
ранее - сворачивается. Аккордеон представляется классом QToolBox. Иерархия наследования
выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QToolBox
Конструктор класса QToolBox имеет следующий формат:
QToolBox([parent=None] [, flags=0])
В параметре parent указывается ссылка на родительский компонент. Если этот параметр
имеет значение None, и у параметра flags указано значение О, компонент не будет иметь
родителя и получит свое собственное окно. Параметр flags указывает тип создаваемого окна.
В качестве типа окна можно указать один из следующих элементов перечисления WindowType
из модуля QtCore.Qt:
♦ Widget - в зависимости от наличия родителя:
  • родитель указан - компонент выводится в составе родительского окна;
  • родитель не указан - компонент выводится в окне изменяемых размеров с рамкой,
    заголовком, системным меню, кнопками сворачивания, разворачивания и закрытия.
  Этот тип используется по умолчанию у класса QWidget;
♦ Window - то же самое, что и Widget, только компонент всегда выводится в собственном
  окне, независимо от наличия или отсутствия у него родителя;
♦ Dialog - диалоговое окно: изменяемых размеров, с рамкой, заголовком и кнопкой
  закрытия. Используется умолчанию у класса QDialog. Пример:
  window.setWindowFlags(QtCore.Qt.WindowType.Dialog)
♦ Sheet и Drawer - окна в стиле Apple Macintosh;
♦ Popup - всплывающее окно неизменяемых размеров, без рамки, заголовка и кнопок,
  может отбрасывать тень;
♦ Tool - панель инструментов: изменяемых размеров, с рамкой, уменьшенным заголовком
  и кнопкой закрытия;
♦ ToolTip - всплывающая подсказка: неизменяемых размеров, без рамки, заголовка и кнопок;
♦ SplashScreen - заставка: неизменяемых размеров, без рамки, заголовка и кнопок.
  Используется по умолчанию у класса QSplashScreen;
♦ SubWindow - подчиненное окно неизменяемых размеров, с рамкой, уменьшенным заголовком,
  без кнопок;
♦ ForeignWindow - окно, созданное другим процессом;
♦ CoverWindow - окно, представляющее свернутую программу· на некоторых платформах.
Получить тип окна в программе позволяет метод windowType().
У окон можно через оператор | дополнительно указать следующие элементы перечисления
WindowType (упомянуты только наиболее часто используемые элементы, полный их список
ищите в документации):
♦ MSWindowsFixedSizeDialogHint - запрещает изменение размеров окна. Кнопка разворачивания
  в заголовке окна станет неактивной;
♦ FramelessWindowHint - убирает рамку и заголовок окна. Изменять размеры окна и перемещать
  его будет нельзя;
♦ NoDropShadowWindowHint - убирает отбрасываемую окном тень;
♦ CustomizeWindowHint - убирает рамку и заголовок окна, но добавляет эффект объемности.
  Размеры окна можно изменять;
♦ WindowTitleHint - добавляет заголовок окна. Пример вывода окна фиксированного размера
  с заголовком, в котором находится только текст:
  window.setWindowFlags(QtCore.Qt.WindowType.Window |
                        QtCore.Qt.WindowType.FramelessWindowHint |
                        QtCore.Qt.WindowType.WindowTitleHint)
♦ WindowSystemMenuHint - добавляет в заголовок системное меню и кнопку закрытия;
♦ WindowMinimizeButtonHint - добавляет в заголовок кнопку сворачивания;
♦ WindowMaximizeButtonHint - добавляет в заголовок кнопку разворачивания;·
♦ WindowMinMaxButtonsHint - добавляет в заголовок кнопки сворачивания и разворачивания;
♦ WindowCloseButtonHint - добавляет в заголовок кнопку закрытия;
♦ WindowContextHelpButtonHint - добавляет в заголовок кнопку вывода справки;
♦ WindowStaysOnTopHint - сообщает системе, что окно всегда должно отображаться поверх
  всех других окон;
♦ WindowStaysOnBottomHint - сообщает системе, что окно всегда должно быть расположено
  позади всех других окон.
Получить все установленные элементы-типы окна из программы позволяет метод
windowFlags().
Класс QToolBox поддерживает следующие методы (здесь приведены только основные -
полный их список смотрите на странице https://doc.qt.io/qt-6/qtoolbox.html):
♦ addItem() -добавляет вкладку в конец контейнера. Метод возвращает индекс добавленной
  вкладки. Форматы метода:
  addItem(<Компонент>, <Текст ярлыка>)
  addItem(<Компонент>, <Значок QIcon>, <Текст ярлыка>)
  В параметре <Компонент> указывается ссылка на компонент, который будет отображаться
  на вкладке. Чаще всего этот компонент является лишь родителем для других компонентов.
  Параметр <Текст ярлыка> задает текст, который будет отображаться на ярлыке вкладки.
  Внутри текста вкладки символ &, указанный перед буквой, задает комбинацию клавиш
  быстрого доступа. Параметр <Значок> указывает значок, который отобразится перед
  текстом на ярлыке вкладки;
♦ insertItem() - добавляет вкладку по указанному индексу и возвращает индекс добавленной
  вкладки. Форматы метода:
  insertItem(<Индекс>, <Компонент>, <Текст ярлыка>)
  insertItem(<Индекс>, <Компонент>, <Значок QIcon>, <Текст заголовка>)
♦ removeItem(<Индекс>) - удаляет вкладку с указанным индексом, при этом компонент,
  который отображался на вкладке, не удаляется;
♦ setItemText(<Индекс>, <Текст заголовка>) - задает текст ярлыка у вкладки с указанным
  индексом;
♦ itemText(<Индекс>) - возвращает текст ярлыка у вкладки с указанным индексом;
♦ setItemIcon(<Индекс>, <Значок QIcon>) - устанавливает значок на ярлыке вкладки
  с указанным индексом;
♦ setItemToolTip(<Индекс>, <Текст>) - задает текст всплывающей подсказки у ярлыка
  вкладки с указанным индексом;
♦ setItemEnabled(<Индекс>, <Флаг>) - если вторым параметром передается значение False,
  вкладка с указанным в первом параметре индексом станет недоступной. Значение True
  делает вкладку доступной;
♦ isItemEnabled(<Индекс>) - возвращает значение True, если вкладка с указанным индексом
  доступна, и False - в противном случае;
♦ setCurrentIndex(<Индекс>) - делает видимой вкладку с указанным индексом. Метод является
  слотом;
♦ currentIndex() - возвращает индекс видимой вкладки;
♦ setCurrentWidget(<Компонент>) - разворачивает вкладку с указанным компонентом.
  Метод является слотом;
♦ currentWidget() - возвращает ссылку на компонент, расположенный на развернутой вкладке;
♦ widget(<Индекс>) - возвращает ссылку на компонент, расположенный на вкладке с указанным
  индексом, или значение None в случае обращения по несуществующему индексу;
♦ indexOf(<Компонент>) - возвращает индекс вкладки, на которой расположен заданный
  компонент. Если компонент не найден, возвращается значение -1;
♦ count() - возвращает количество вкладок. Получить количество вкладок можно также
  с помощью функции len():
  print(toolBox.count(), len(toolBox))
При переключении на другую вкладку генерируется сигнал currentChanged(<Индекс>). Через
параметр внутри обработчика доступен индекс вкладки, на которую было выполнено переключение.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QToolBox,
                               QLabel,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса виджета ярлыка QLabel,
класса виджета вкладок типа аккордеон QToolBox, 
"""


class MainWindow(QMainWindow):
    """
    Клас главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('QTabWidget')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера окна
        self.tab = QToolBox()  # создание контейнера для вкладок
        self.tab.addItem(QLabel('Содержимое вкладки 1'), 'Вкладка &1')  # добавление вкладки
        self.tab.addItem(QLabel('Содержимое вкладки 2'), 'Вкладка &2')
        self.tab.addItem(QLabel('Содержимое вкладки 3'), 'Вкладка &3')
        self.tab.setCurrentIndex(0)  # сделать активной вкладку 1
        self.setCentralWidget(self.tab)  # размещение контейнера вкладок в главно окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
