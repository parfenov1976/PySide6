"""
Расположение компонентов интерфейса в окне. Панель с изменяемыми областями

Панель с изменяемыми областями включает ряд областей, каждая из которых содержит
один компонент. На границах между областями располагаются захваты, перемещая которые
с помощью мыши можно менять относительные размеры этих областей. Такая панель реализуется
классом QSplitter. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame - QSplitter
Конструктор класса QSplitter имеет два формата:
QSplitter([parent=None])
QSplitter(<Ориентация>[, parent=None])
В параметре parent указывается ссылка на родительский компонент. Если таковой не указан
или имеет значение None, компонент будет обладать своим собственным окном. Параметр
<Ориентация> задает ориентацию расположения областей в виде одного из следующих
элементов перечисления Orientation из модуля QtCore.Qt: Horizontal (горизонтальная -
значение по умолчанию) или Vertical (вертикальная).
Класс QSplitter поддерживает следующие методы (здесь приведены только основные -
полный их список смотрите на странице https://doc.qt.io/qt-6/qsplitter.html):
♦ addWidget(<Компонент>) - добавляет компонент в конец панели, создавая в ней новую
  область;
♦ insertWidget(<Индекс>, <Компонент>) - добавляет компонент по указанному индексу.
  Если компонент был добавлен ранее, он будет перемещен по указанному индексу;
♦ setOrientation(<Ориентация>) - задает ориентацию расположения областей. Могут
  быть заданы элементы Horizontal (горизонтальная) или vertical (вертикальная) перечисления
  Orientation из модуля QtCore.Qt;
♦ setHandleWidth(<Ширина>) - задает толщину захвата;
♦ saveState() - возвращает объект класса QByteArray с размерами всех областей. Эти
  данные можно сохранить (например, в файл), а затем восстановить с помощью метода
  restoreState() ;
♦ restoreState(<Объект QByteArray>) - восстанавливает размеры областей из объекта
  класса QByteArray, возвращенного методом savestate();
♦ setChildrenCollapsible(<Флаг>) - если в параметре указано значение False, пользователь
  не сможет уменьшить размеры всех областей до нуля. По умолчанию размер может
  быть нулевым, даже если для какого-либо компонента установлены минимальные размеры;
♦ setCollapsible(<Индекс>, <Флаг>) - значение False в параметре <Флаг> запрещает
  уменьшение размеров до нуля у компонента с указанным индексом;
♦ setOpaqueResize(<Флаг>) - если в качестве параметра указано значение False, размеры
  областей изменятся только после окончания перемещения захвата и отпускания кнопки
  мыши. В процессе перемещения мыши вместе с ней будет перемещаться специальный
  компонент в виде линии;
♦ setStretchFactor(<Индекс>, <Фактор>) - задает целочисленный фактор растяжения
  для компонента с указанным индексом;
♦ setSizes(<Список>) - задает размеры всех областей. У панели с горизонтальной ориентацией
  указывается список со значениями ширины каждой области, у панели с вертикальной
  ориентацией - список со значениями высоты каждой области;
♦ sizes() - возвращает список с размерами (шириной или высотой):
  print(splitter .sizes()) # Результат: (308, 15]
♦ count () - возвращает количество областей. Получить количество областей можно также
  с помощью функции len() :
  print (splitter.count(), len(splitter))
♦ widget(<Индекс>) - возвращает ссылку на компонент, расположенный по указанному
  индексу, или значение N􀂾ne в случае обращения по несуществующему индексу;
♦ indexOf(<Компонент>) - возвращает индекс области, в которой расположен заданный
  компонент. Если таковой не найден, возвращается значение -1.
При перемещении какого-либо из захватов генерируется сигнал splitterMoved(<Позиция>,
<Индекс>). Через первый параметр внутри обработчика доступна новая позиция перемещенного
захвата, а через второй параметр - индекс этого захвата.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QSplitter,
                               QLabel,
                               QFrame,
                               QVBoxLayout,
                               QWidget,
                               )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса разделителя областей QSplitter,
класса виджета ярлыка QLabel, класса рамки QFrame, класса вертикальной стопки QVBoxLayout,
базового класса виджета QWidget

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('QSplitter')  # установка заголовка главного окна приложения
        self.resize(250, 200)  # установка исходного размера окна
        self.splitter = QSplitter(Qt.Orientation.Vertical)  # создание экземпляра разделителя областей
        self.lbl_1 = QLabel('Содержимое области 1')  # создание ярлыка с надписью
        self.lbl_2 = QLabel('Содержимое области 2')  # создание ярлыка с надписью
        self.lbl_1.setFrameStyle(QFrame.Shape.Box | QFrame.Shadow.Plain)  # создание рамки вокруг ярлыка
        self.lbl_2.setFrameStyle(QFrame.Shape.Box | QFrame.Shadow.Plain)  # создание рамки вокруг ярлыка
        self.splitter.addWidget(self.lbl_1)  # добавление ярлыка в разделитель
        self.splitter.addWidget(self.lbl_2)  # добавление ярлыка в разделитель
        self.vbox = QVBoxLayout()  # создание экземпляра вертикальной стопки
        self.vbox.addWidget(self.splitter)  # размещение разделителя в стопке
        self.container = QWidget()  # создание контейнера окна
        self.container.setLayout(self.vbox)  # размещение стопки в контейнере окна
        self.setCentralWidget(self.container)  # размещение контейнера в главном окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
