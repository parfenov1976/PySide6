"""
Размещение компонентов интерфейса в окне. Панель с рамкой.


Класс QFrame расширяет возможности класса QWidget, добавляя рамку вокруг компонента.
Этот класс, в свою очередь, наследуют некоторые компоненты - например, надписи,
многострочные текстовые поля и др. Иерархия наследования выглядит так:
(QObject, QPaintDevice) - QWidget - QFrame
Конструктор класса QFrame имеет следующий формат:
QFrame([parent=None] [, flags=O])
В параметре parent указывается ссылка на родительский компонент. Если этот параметр
имеет значение None и у параметра flags указано значение 0, компонент не будет
иметь родителя и получит свое собственное окно. Параметр flags указывает тип
создаваемого окна.
В качестве типа окна можно указать один из следующих элементов перечисления WindowType
из модуля QtCore.Qt:
♦ Widget - в зависимости от наличия родителя:
  • родитель указан - компонент выводится в составе родительского окна;
  • родитель не указан - компонент выводится в окне изменяемых размеров с рамкой,
    заголовком, системным меню, кнопками сворачивания, разворачивания и закрытия.
  Этот тип используется по умолчанию у класса QWidget;
♦ Window - то же самое, что и Widget, только компонент всегда выводится в собственном
  окне, независимо от наличия или отсутствия у него родителя;
♦ Dialog - диалоговое окно: изменяемых размеров, с рамкой, заголовком и кнопкой
  закрытия. Используется умолчанию у класса QDialog. Пример:
  window.setWindowFlags(QtCore.Qt.WindowType.Dialog)
♦ Sheet и Drawer - окна в стиле Apple Macintosh;
♦ Popup - всплывающее окно неизменяемых размеров, без рамки, заголовка и кнопок,
  может отбрасывать тень;
♦ Tool - панель инструментов: изменяемых размеров, с рамкой, уменьшенным заголовком
  и кнопкой закрытия;
♦ ToolTip - всплывающая подсказка: неизменяемых размеров, без рамки, заголовка и кнопок;
♦ SplashScreen - заставка: неизменяемых размеров, без рамки, заголовка и кнопок.
  Используется по умолчанию у класса QSplashScreen;
♦ SubWindow - подчиненное окно неизменяемых размеров, с рамкой, уменьшенным заголовком,
  без кнопок;
♦ ForeignWindow - окно, созданное другим процессом;
♦ CoverWindow - окно, представляющее свернутую программу· на некоторых платформах.
Получить тип окна в программе позволяет метод windowType().
У окон можно через оператор | дополнительно указать следующие элементы перечисления
WindowType (упомянуты только наиболее часто используемые элементы, полный их список
ищите в документации):
♦ MSWindowsFixedSizeDialogHint - запрещает изменение размеров окна. Кнопка разворачивания
  в заголовке окна станет неактивной;
♦ FramelessWindowHint - убирает рамку и заголовок окна. Изменять размеры окна и перемещать
  его будет нельзя;
♦ NoDropShadowWindowHint - убирает отбрасываемую окном тень;
♦ CustomizeWindowHint - убирает рамку и заголовок окна, но добавляет эффект объемности.
  Размеры окна можно изменять;
♦ WindowTitleHint - добавляет заголовок окна. Пример вывода окна фиксированного размера
  с заголовком, в котором находится только текст:
  window.setWindowFlags(QtCore.Qt.WindowType.Window |
                        QtCore.Qt.WindowType.FramelessWindowHint |
                        QtCore.Qt.WindowType.WindowTitleHint)
♦ WindowSystemMenuHint - добавляет в заголовок системное меню и кнопку закрытия;
♦ WindowMinimizeButtonHint - добавляет в заголовок кнопку сворачивания;
♦ WindowMaximizeButtonHint - добавляет в заголовок кнопку разворачивания;·
♦ WindowМinМaxButtonsHint - добавляет в заголовок кнопки сворачивания и разворачивания;
♦ WindowCloseButtonHint - добавляет в заголовок кнопку закрытия;
♦ WindowContextHelpButtonHint - добавляет в заголовок кнопку вывода справки;
♦ WindowStaysOnTopHint - сообщает системе, что окно всегда должно отображаться поверх
  всех других окон;
♦ WindowStaysOnBottomHint - сообщает системе, что окно всегда должно быть расположено
  позади всех других окон.
Получить все установленные элементы-типы окна из программы позволяет метод
windowFlags().
Класс QFrame поддерживает следующие методы (здесь приведены только основные - полный
их список смотрите на странице https://doc.qt.io/qt-6/qframe.html):
♦ setFrameShape(<Форма>) - задает форму рамки. Могут быть указаны следующие элементы
  перечисления Shape из класса QFrame:
  • NoFrame - нeт рамки;
  • Вох - прямоугольная рамка;
  • Panel - панель, которая может быть выпуклой или вогнутой;
  • WinPanel - панель в стиле Windows 2000, которая может быть выпуклой или вогнутой.
    Толщина границы - 2 пиксела. Этот элемент присутствует для совместимости со
    старыми версиями Qt;
  • HLine - горизонтальная линия. Используется как разделитель;
  • VLine - вертикальная линия;
  • StyledPanel - панель, внешний вид которой зависит от текущего стиля. Она может
    быть выпуклой или вогнутой. Это рекомендуемая форма рамки для панелей;
♦ setFrameShadow(<Тень>) - задает стиль тени. Могут быть указаны следующие элементы
  перечисления Shadow из класса QFrame:
  • Plain - нет тени;
  • Raised - панель отображается выпуклой;
  • Sunken - панель отображается вогнутой;
♦ setFrameStyle(<Стиль>) - задает форму рамки и стиль тени одновременно. В качестве
  значения через оператор | указывается комбинация приведенных ранее элементов
  перечислений Shape и Shadow класса QFrame:
  frame.setFrameStyle(QtWidgets.QFrame.Shape.Panel |
                      QtWidgets.QFrame.Shadow .Raised)
♦ setLineWidth(<Ширина>) - задает толщину линий у рамки;
♦ setMidLineWidth(<Ширина>) - задает толщину средней линии у рамки. Средняя линия
  используется для создания эффекта выпуклости и вогнутости и доступна только для
  форм рамки Вох, HLine и VLine
♦ setFrameRect(<Область QRect>) - задает местоположение и размеры области внутри
  панели, вокруг которой будет проведена рамка, в виде объекта класса QRect. По
  умолчанию рамка рисуется вокруг всей панели.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QFrame,
                               QLineEdit,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса рамки QFrame,
класса однострочного редактируемого текстового поля QLineEdit
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный запуск конструктора родительского класса
        self.setWindowTitle('Панель с рамкой')  # установка заголовка главного окна приложения
        self.resize(300, 300)  # установка исходного размера главного окна
        self.line = QLineEdit(self)  # создание экземпляра виджета текстового поля с указанием родительского объекта
        self.line.move(self.size().width() // 2 - self.line.size().width() // 2,
                       self.size().height() // 2 - self.line.size().height() // 2)
        # размещаем текстовое поле в центре главного окна приложения
        self.frame = QFrame(self.line)  # создание рамки вокруг текстового опля
        self.frame.setFrameShape(QFrame.Shape.WinPanel)  # установка формы рамки
        self.frame.setFrameShadow(QFrame.Shadow.Sunken)  # установка типа тени рамки

    def resizeEvent(self, event: QMainWindow.resizeEvent) -> None:
        """
        Обработчик события изменения размеров окна
        """
        self.line.move(self.size().width() // 2 - self.line.size().width() // 2,
                       self.size().height() // 2 - self.line.size().height() // 2)
        # динамически перемещаем текстовое поле при изменении размеров главного окна
        QMainWindow.resizeEvent(self, event)  # отправляем событие дальше


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
