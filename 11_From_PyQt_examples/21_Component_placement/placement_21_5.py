"""
Размещение компонентов интерфейса в окне. Группы.

Группа - это область, содержащая какой-либо набор компонентов и окруженная рамкой,
на верхней границе которой выводится текст заголовка. Она реализуется классом QGroupBox.
Иерархия наследования выглядит так:
(QObj.ect, QPaintDevice) - QWidget - QGroupBox
Формат конструктора класса QGroupBox:
QGroupBox([<Родитель>])
QGroupBox(<Тексе заголовка>[, <Родитель>])
В тексте заголовка символ &, указанный перед буквой, задает комбинацию клавиш быстрого
доступа.
После создания объекта класса QGroupBox следует добавить компоненты в какой-либо контейнер,
а затем передать ссылку на этот контейнер в метод setLayout() группы.
Класс QGroupBox поддерживает следующие методы (здесь приведены только основные -
полный их список смотрите на странице https://doc.qt.io/qt-6/qgroupbox.html):
♦ setTitle(<Текст>) - задает текст заголовка;
♦ title() - возвращает текст заголовка;
♦ setAlignment(<Выравнивание>) - задает горизонтальное выравнивание текста заголовка.
  В параметре указывается один из следующих элементов перечисления AlignmentFlag из
  модуля QtCore.Qt: AlignLeft, AlignHCenter или AlignRight:
  box.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight)
♦ alignment() - возвращает горизонтальное выравнивание текста заголовка;
♦ setCheckable(<Флаг>) - если в параметре указать значение True, то перед заголовком
  группы будет отображен флажок. Если флажок установлен, группа станет доступной для
  ввода, а если флажок снят - недоступной. По умолчанию флажок не отображается;
♦ isCheckable() - возвращает значение True, если перед заголовком группы выводится
  флажок, и False - в противном случае;
♦ setChecked(<Флаг>) - если в параметре указать значение True, флажок, отображаемый
  перед заголовком группы, будет установлен. Значение False сбрасывает флажок. Метод
  является слотом;
♦ isChecked() - возвращает значение True, если флажок, отображаемый перед заголовком
  группы, установлен, и False -в противном случае;
♦ setFlat(<Флаг>) - если в параметре указано значение True, будет отображаться только
  верхняя граница рамки, а если False -то все границы рамки;
♦ isFlat() - возвращает значение True, если отображается только верхняя граница рамки,
  и False - если все границы рамки.
Класс QGroupBox поддерживает сигналы:
♦ clicked(<Состояние флажка>) - генерируется при щелчке мышью на флажке, выводимом
  перед заголовком группы. Если состояние флажка изменяется с помощью метода
  setChecked(), сигнал не генерируется. Через параметр внутри обработчика доступно
  значение True, если флажок установлен, и False - если сброшен;
♦ toggled(<Состояние флажка>) - генерируется при изменении состояния флажка, выводимого
  перед заголовком группы. Через параметр внутри обработчика доступно значение
  True, если флажок установлен, и False - если сброшен.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QHBoxLayout,
                               QRadioButton,
                               QGroupBox,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главного окна приложения QMainWindow,
класса контейнера горизонтальной стопки QHBoxLayout, класса виджета радиокнопки QRadioButton, 
класса группы виджетов QGroupBox
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('QGroupBox')  # установка заголовка главного окна
        self.resize(250, 80)  # установка исходного размера окна
        self.radio_btn_1 = QRadioButton('&Да')  # создание экземпляра виджета радиокнопки
        self.radio_btn_2 = QRadioButton('&Нет')
        self.box = QGroupBox('&Вы знаете язык Python?')  # создание группы и установка названия
        self.box.setCheckable(True)  # добавление чекбокса для активации группы
        self.h_box = QHBoxLayout()  # создание контейнера стопки для виджетов
        self.h_box.addWidget(self.radio_btn_1)  # размещение в стопке виджета радиокнопки
        self.h_box.addWidget(self.radio_btn_2)
        self.box.setLayout(self.h_box)  # размещение стопки с виджетами в группе
        self.setCentralWidget(self.box)  # размещение контейнера с группой в окне приложения

        self.box.clicked.connect(self.on_clicked)  # создание сигнала и привязка обработчика на клик чекбокса
        # данный сигнал не возбуждается на метод setChecked()
        self.box.toggled.connect(self.on_toggled)  # создание сигнала и привязка обработчика на изменение
        # состояния чекбокс, который генерируется, в том числе, и при использовании метода setChecked()

        self.box.setChecked(False)  # переключение состояния чекбокса

    @staticmethod
    def on_clicked(param: QGroupBox) -> None:
        """
        Обработчик сигнала клика на чекбокс группы
        :param param: параметр состояния чекбокса группы
        :return: None
        """
        print(f'Clicked {param}')

    @staticmethod
    def on_toggled(param: QGroupBox) -> None:
        """
        Обработчик сигнала клика на чекбокс группы
        :param param: параметр состояния чекбокса группы
        :return: None
        """
        print(f'Toggled {param}')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
