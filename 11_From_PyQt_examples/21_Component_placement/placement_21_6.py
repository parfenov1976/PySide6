"""
Расположение компонентов интерфейса в окне. Панель с вкладками.

Панели с вкладками (блокнот) реализуется классом QTabWidget. Иерархия наследования
у него выглядит так:
(QObject, QPaintDevice) - QWidget - QTabWidget
Конструктор класса QTabWidget имеет следующий формат:
QTabWidget([<Родитель>])
В параметре <Родитель> указывается ссылка на родительский компонент. Если он не
указан, компонент будет обладать своим собственным окном.
Класс QTabWidget поддерживает следующие методы (здесь приведены только основные -
полное описание класса содержится на странице https://doc.qt.io/qt-6/qtabwidget.html):
♦ addTab() - добавляет вкладку в конец контейнера и возвращает ее индекс. Форматы
  метода:
  addTab(<Компонент>, <Текст ярлыка>)
  addTab(<Компонент>, <Значок QIcon>, <Текст ярлыка>)
  В параметре <Компонент> указывается ссылка на компонент, который будет отображаться
  на вкладке. Чаще всего этот компонент является лишь родителем для других компонентов.
  Параметр <Текст ярлыка> задает текст, который будет отображаться на ярлыке вкладки.
  Внутри текста ярлыка символ &, указанный перед буквой, задает комбинацию клавиш
  быстрого доступа. Параметр <Значок> указывает значок, который отобразится перед
  текстом на ярлыке вкладки.
  Пример указания стандартного значка:
  style = window.style()
  icon = style.standardIcon(QtWidgets.QStyle.StandardPixmap.SP_DriveNetIcon)
  tab.addTab(QtWidgets.QLabel("Содержимое вкладки 1"), icon, "Вкладка &1")
  Пример загрузки значка из файла:
  icon = QtGui.QIcon("icon.png")
  tab.addTab(QtWidgets.QLabel("Содержимое вкладки 1"), icon, "Вкладка &1")
♦ insertTab() - добавляет вкладку по указанному индексу и возвращает индекс
  добавленной вкладки. Форматы метода:
  insertTab(<Индекс>, <Компонент>, <Текст ярлыка>)
  insertTab(<Индекс>, <Компонент>, <Значок QIcon>, <Текст ярлыка>)
♦ removeTab(<Индекс>) - удаляет вкладку с указанным индексом, при этом компонент,
  который отображался на вкладке, не удаляется;
♦ clear() - удаляет все вкладки, при этом компоненты, которые отображались на вкладках,
  не удаляются;
♦ setTabText(<Индекс>, <Текст заголовка>) - задает текст на ярлыке вкладки с указанным
  индексом;
♦ setElideMode(<Режим>) - задает режим обрезки текста на ярлыке вкладки, если он не
  помещается в отведенную область (в месте обрезки выводится троеточие). Могут быть
  указаны следующие элементы перечисления TextElideMode из модуля QtCore.Qt:
  • ElideLeft - текст обрезается слева;
  • ElideRight - текст обрезается справа;
  • ElideMiddle - текст вырезается посередине;
  • ElideNone - текст не обрезается;
♦ tabText(<Индекс>) - возвращает текст на ярлыке вкладки с указанным индексом;
♦ setTabIcon(<Индекс>, <Значок QIcon>) - устанавливает значок перед текстом на ярлыке
  вкладки с указанным индексом;
♦ setIconSize(<Размеры QSize>) - задает размеры значков, выводящихся на ярлыках вкладок;
♦ setTabPosition(<Позиция>) - задает местоположение заголовка панели, на котором выводятся
  ярлыки вкладок. Могут быть указаны следующие элементы перечисления TabPosition из класса
  QTabWidget: North (сверху), South (снизу), West (слева) или East (справа). Пример:
  tab.setTabPosition(QtWidgets.QTabWidget.TabPosition.South)
♦ setTabShape(<Форма>) - задает форму углов у ярлыков вкладок. Могут быть указаны
  следующие элементы перечисления TabShape из класса QТabWidget: Rounded (скругленная
  форма-значение по умолчанию) или Triangular (треугольная форма);
♦ setTabsClosable(<Флаг>) - если в качестве параметра указано значение True, то после
  текста на ярлыке вкладки будет отображена кнопка ее закрытия. При нажатии этой кнопки
  генерируется сигнал tabCloseRequested;
♦ setMovable(<Флаг>) - если в качестве параметра указано значение True, вкладки можно
  перетаскивать мышью за их ярлыки;
♦ setDocumentMode(<Флаг>) - если в качестве параметра указано значение True, панель
  не будет окружена рамкой;
♦ setUsesScrollButtons(<Флаг>) - если в качестве параметра указано значение True, то, если
  все ярлыки вкладок не помещаются в заголовке панели, появятся две кнопки, с помощью
  которых можно прокручивать содержимое заголовка. Значение False предписывает панели
  выводить все ярлыки в несколько строк;
♦ setTabBarAutoHide(<Флаг>) - если в качестве параметра указано значение True, и в панели
  присутствует всего одна вкладка (или ни одной), заголовок панели будет скрыт. Значение
  False указывает панели всегда отображать заголовок;
♦ setTabToolTip(<Индекс>, <Текст>) - задает текст всплывающей подсказки у ярлыка вкладки
  с указанным индексом;
♦ setTabWhatsThis(<Индекс>, <Текст>) - задает текст расширенной подсказки у ярлыка
  вкладки с указанным индексом;
♦ setCurrentIndex(<Индекс>) - делает видимой вкладку с указанным индексом. Метод
  является слотом;
♦ currentIndex() - возвращает индекс видимой вкладки;
♦ setCurrentWidget(<Компонент>) - делает видимой вкладку с указанным компонентом.
  Метод является слотом;
♦ setTabEnabled(<Индекс>, <Флаг>) - если вторым параметром передано значение False,
  вкладка с указанным индексом станет недоступной. Значение True делает вкладку доступной;
♦ isTabEnabled(<Индекс>) - возвращает значение True, если вкладка с указанным индексом
  доступна, и False - в противном случае;
♦ setTabVisible(<Индекс>, <Флаг>) - если вторым параметром передано значение False,
  вкладка с указанным индексом станет невидимой. Значение True делает вкладку видимой;
♦ isTabVisible(<Индекс>) - возвращает значение True, если вкладка с указанным индексом
  видима, и False - в противном случае;
♦ currentWidget() - возвращает ссылку на компонент, расположенный на видимой вкладке;
♦ widget(<Индекс>) - возвращает ссылку на компонент, расположенный на вкладке с указанным
  индексом, или значение None в случае обращения по несуществующему индексу;
♦ indexOf(<Компонент>) - возвращает индекс вкладки, на которой расположен заданный
  компонент. Если компонент не найден, возвращается значение -1;
♦ count() - возвращает количество вкладок. Получить количество вкладок можно также с
  помощью функции len():
  print(tab.count(), len(tab))
Класс QTabWidget поддерживает такие сигналы:
♦ currentChanged(<Индекс>) - генерируется при переключении на другую вкладку. Через
  параметр внутри обработчика доступен индекс выведенной вкладки;
♦ tabBarClicked(<Индекс>) - генерируется при щелчке на ярлыке вкладки. Через
  параметр внутри обработчика доступен индекс вкладки, на которой был выполнен
  щелчок, или значение -1, если щелчок был выполнен на области заголовка панели,
  не занятой ярлыками;
♦ tabBarDoubleClicked(<Индекс>) - генерируется при двойном щелчке на ярлыке вкладки.
  Через параметр внутри обработчика доступен индекс вкладки, на которой бьm выполнен
  двойной щелчок, или значение -1, если щелчок бьm выполнен на области заголовка панели,
  не занятой ярлыками;
♦ tabCloseRequested(<Индекс>) - генерируется при нажатии кнопки закрытия вкладки.
  Через параметр внутри обработчика доступен индекс закрываемой вкладки.
"""
from PySide6.QtWidgets import (QMainWindow,
                               QTabWidget,
                               QLabel,
                               )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow, класса виджета ярлыка QLabel,
класса виджета вкладок QTabWidget, 
"""


class MainWindow(QMainWindow):
    """
    Клас главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None):
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('QTabWidget')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера окна
        self.tab = QTabWidget()  # создание контейнера для вкладок
        self.tab.addTab(QLabel('Содержимое вкладки 1'), 'Вкладка &1')  # добавление вкладки
        self.tab.addTab(QLabel('Содержимое вкладки 2'), 'Вкладка &2')
        self.tab.addTab(QLabel('Содержимое вкладки 3'), 'Вкладка &3')
        self.tab.setCurrentIndex(0)  # сделать активной вкладку 1
        self.setCentralWidget(self.tab)  # размещение контейнера вкладок в главно окне приложения


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    import sys
    from PySide6.QtWidgets import QApplication

    """
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    Импорт из модуля PySide6.QWidgets класса управления приложением QApplication.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
