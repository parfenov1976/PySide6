"""
Пример повторного использования кода через наследование в стиле ООП от класса из ранее созданного модуля.
"""

import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QWidget,
                               QVBoxLayout,
                               QPushButton,
                               )
from PySide6.QtCore import Qt
from FirstProgram import MainWindow

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса базового виджета QWidget,
класса главных окон QMainWindow, класса кнопок QPushButton, класса контейнера
с вертикальным расположение виджетов QVBoxLayout.

Импорт из модуля PySide6.QtCore класса аттрибутов для настройки и управления виджетами Qt.

Импорт из модуля FirstProgram класса главного окна приложения  MainWindow
"""


class NewMainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self)  # явный вызов конструктора родительского класса
        self.my_window = MainWindow()  # создание экземпляра главного окна из импортированного модуля
        self.my_window.vbox.setContentsMargins(0, 0, 0, 0)  # изменение границ отступа контейнера
        self.btn_chl = QPushButton('&Изменить надпись')  # создание кнопки для изменения надписи на ярлыке
        self.btn_chl.clicked.connect(self.on_clicked)  # создание сигнала с привязкой слота
        self.widget = QWidget()  # создание контейнера для слоев с виджетами
        self.main_vbox = QVBoxLayout()  # создание слоя с вертикальной организацией для размещения виджетов
        self.main_vbox.addWidget(self.my_window)  # размещение экземпляра главного окна из импортированного модуля
        self.main_vbox.addWidget(self.btn_chl)  # размещение кнопки для изменения надписи на ярлыке
        self.widget.setLayout(self.main_vbox)  # размещение слоя в контейнере
        self.setCentralWidget(self.widget)  # размещение контейнера на главном окне приложения

    def on_clicked(self) -> None:
        """
        Слот для сигнала на клик по кнопке изменения надписи на ярлыке
        """
        # self.my_window.label.setText('Новая надпись')  # замещение текста на ярлыке
        self.my_window.label.setText('<center>Новая надпись</center>')  # замещение текста на ярлыке c использованием
        # HTML синтаксиса для форматирования по середине
        # self.my_window.label.setAlignment(Qt.AlignHCenter)  # выравнивание надписи ярлыка по центру
        self.btn_chl.setDisabled(True)  # деактивация кнопки


if __name__ == '__main__':  # условие для предотвращения запуска кода верхнего уровня при импортировании данного модуля
    app = QApplication(sys.argv)  # создание основного цикла событий главного окна
    app.setStyle('Fusion')  # более интересная глобальная кроссплатформенна тема Fusion
    window = NewMainWindow()  # создание экземпляра главного окна приложения
    window.resize(300, 100)  # установка размеров окна по умолчанию
    window.show()  # Метод для вывода главного окна. По умолчанию окно спрятано.
    sys.exit(app.exec())  # Запуск основного цикла событий главного окна приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
