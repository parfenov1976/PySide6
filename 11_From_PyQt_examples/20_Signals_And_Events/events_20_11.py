"""
Событие закрытия окна на примере подтверждения закрытия

При закрытии окна нажатием кнопки закрытия в его заголовке или вызовом метода close()
вызывается специальный метод closeEvent(self, <event>). Через параметр <event> доступен
объект класса QCloseEvent. Чтобы предотвратить закрытие окна, у объекта события следует
вызвать метод ignore(), в противном случае - метод accept().
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QMessageBox,
                               )

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow,
класс диалоговых окон QMessageBox
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Обработка событий закрытия окна')  # установка заголовка окна
        self.resize(300, 200)  # установка исходного размера окна

    def closeEvent(self, event: QMainWindow.closeEvent) -> None:
        result = QMessageBox.question(self,  # создание диалогового окна для подтверждения закрытия окна
                                      'Подтверждение закрытия окна',
                                      'Вы действительно хотите закрыть окно?')
        if result == QMessageBox.StandardButton.Yes:
            event.accept()
        else:
            event.ignore()


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
