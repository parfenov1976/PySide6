"""
Обработка событий клавиатуры. Нажатие и отпускание клавиш.

При нажатии и отпускании клавиши вызываются следующие специальные методы:
♦ keyPressEvent(self, <event>) - вызывается при нажатии клавиши. Если клавишу
  удерживать нажатой, метод будет вызываться многократно, пока клавишу не отпустят;
♦ keyReleaseEvent(self, <event>) - вызывается при отпускании нажатой ранее клавиши.
Через параметр <event> доступен объект класса QKeyEvent, хранящий дополнительную информацию
о событии. Он поддерживает следующие полезные для нас методы (полный их
список приведен на странице https://doc.qt.io/qt-6/qkeyevent.html):
♦ key() - возвращает код нажатой клавиши:
    if e.key() == QtCore.Qt.Key.Key_B:
        print("Нажата клавиша <В>")
♦ text() - возвращает текстовое представление введенного символа в кодировке Unicode
  или пустую строку, если была нажата специальная клавиша;
♦ modifiers() - позволяет определить, какие клавиши-модификаторы (<Shift>, <Ctrl>,
  <Alt> и др.) были нажаты. Возвращает значение одного из следующих элементов перечисления
  KeyboardModifier из модуля QtCore.Qt или их комбинацию:
    • NoModifier - модификаторы не были нажаты;
    • ShiftModifier - была нажата клавиша <Shift>;
    • ControlModifier - была нажата клавиша <Ctrl>;
    • AltModifier - была нажата клавиша <Alt>;
    • MetaModifier - была нажата клавиша <Meta>;
    • KeypadModifier - была нажата любая клавиша на дополнительной клавиатуре;
    • GroupSwitchModifier - была нажата клавиша <Mode_switch> (только в X11).
    Пример определения, была ли нажата клавиша-модификатор <Shift>:
    if e.modifiers() & QtCore.Qt.KeyboardModifier.ShiftModifier:
        print("Нажата клавиша-модификатор <Shift>")
♦ isAutoRepeat () - возвращает True, если событие было вызвано удержанием клавиши
  нажатой, и False - в противном случае;
♦ matches (<Обозначение>) - возвращает значение True, если была нажата специальная
  комбинация клавиш, соответствующая указанному обозначению, и False - в противном
  случае. В качестве параметра указывается один из элементов перечисления standardKey
  из класса QKeySequence - например, Сору соответствует комбинации клавиш <Ctrl>+
  +<С> (полный список элементов перечисления приведен на странице https://doc.qt.io/
  qt-6/qkeysequence.html#StandardKey-enum). Пример:
  if e.matches(QtGui.QKeySequence.StandardKey.Copy):
    print("Нажата комбинация клавиш <Ctrl>+<C>")
При обработке нажатия клавиш следует учитывать, что:
♦ компонент должен иметь возможность принимать фокус ввода. Некоторые компоненты
  (в частности, надписи) по умолчанию не могут принимать фокус ввода. Чтобы изменить
  способ получения фокуса, следует воспользоваться методом setFocusPolicy (<Способ>);
♦ чтобы захватить эксклюзивный ввод с клавиатуры, следует воспользоваться методом
  grabKeyboard(), а чтобы освободить ввод - методом releaseKeyboard();
♦ можно перехватить нажатие любых клавиш, кроме клавиши <ТаЬ> и комбинации
  <Shift>+<Tab>. Эти клавиши используются для передачи фокуса следующему и предыдущему
  компоненту соответственно. Перехватить нажатие этих клавиш можно только
  в методе event(self, <event>);
♦ если событие обработано, следует вызвать метод accept() объекта события. Чтобы
  родительский компонент смог получить событие, вместо метода accept() необходимо
  вызвать метод ignore().
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QPlainTextEdit,
                               )

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication,
класс виджета многострочного редактируемого текстового поля QPlainTextEdit 

Импорт из модула PySide6.QtGui класса горячих клавиш QShortcut, класса сочетаний клавиш QKeySequence,
класса действий QAction

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt
"""


class MainWindow(QPlainTextEdit):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна
        :param parent: ссылка на родительский объект
        """
        QPlainTextEdit.__init__(self, parent)
        self.setWindowTitle('Нажатие и отпускание клавиш')  # установка заголовка окна
        self.resize(300, 600)  # установка исходного размера окна

    def keyPressEvent(self, event):
        self.appendPlainText(f'Нажата кнопка {event.text()} (код клавиши {event.key()}) и модификатор {event.modifiers()}')

    def keyReleaseEvent(self, event):
        self.appendPlainText(f'Отпущена кнопка {event.text()} (код клавиши {event.key()}) и модификатор {event.modifiers()}')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
