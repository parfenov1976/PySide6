"""
События изменения состояния окна


Отследить изменение состояния окна (сворачивание, разворачивание, скрытие и отображение)
позволяют следующие методы:
♦ changeEvent(self, <event>) - вызывается при изменении состояния окна, компонента
  или программы, заголовка окна, его палитры, состояния активности окна верхнего уровня,
  языка, локали и др. (полный список смотрите в документации). При обработке события типа
  Type.WindowStateChange через параметр <event> доступен объект класса QWindowStateChangeEvent.
  Этот класс поддерживает только метод oldState(), с помощью которого можно получить предыдущее
  состояние окна;
♦ showEvent(self, <event>) - вызывается при отображении компонента. Через параметр <event>
  доступен объект класса QShowEvent;
♦ hideEvent(self, <event>)- вызывается при скрытии компонента. Через параметр <event> доступен
  объект класса QHideEvent.
"""

import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               )
from PySide6.QtCore import QEvent

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow

Импорт из модуля PySide6.QtCore класса событий QEvent
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктор родительского класса
        self.setWindowTitle('События изменение состояния окна')  # установка заголовка окна
        self.resize(300, 100)  # установка исходного размера окна

    def changeEvent(self, event: QEvent.Type.WindowStateChange) -> None:
        """
        Обработчик события изменения состояния окна
        """
        if event.type() == QEvent.Type.WindowStateChange:  # проверка типа события
            if self.isMinimized():  # проверка состояния окна
                print('Окно свернуто')
            elif self.isMaximized():
                print('Окно развернуто')
            elif self.isFullScreen():
                print('Полноэкранный режим')
            elif self.isActiveWindow():
                print('Окно в фокусе ввода')
        QMainWindow.changeEvent(self, event)  # отправляем событие дальше

    def showEvent(self, event: QMainWindow.showEvent) -> None:
        """
        Обработчик события отображения окна
        """
        print('Окно отображено')
        QMainWindow.showEvent(self, event)  # отправляем событие дальше

    def hideEvent(self, event: QMainWindow.hideEvent) -> None:
        """
        Обработчик события скрытия окна
        """
        print('Окно скрыто')
        QMainWindow.hideEvent(self, event)  # отправляем событие дальше


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
