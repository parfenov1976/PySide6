"""
Перехват и обработка событий

Обработка событий отличается от обработки сигналов. Чтобы обработать событие, необходимо
создать подкласс какого-либо компонента и переопределить в нем соответствующий специальный
метод (например, чтобы обработать нажатие клавиши, следует переопределить метод
keyPressEvent()). Специальные методы принимают объект, содержащий детальную информацию
о событии (обозначение нажатой кнопки мыши, код нажатой клавиши и т. п.).
Классы событий являются производными от класса QEvent и наследуют от него следующие методы:
♦ accept() - устанавливает флаг, разрешающий дальнейшую обработку события. Скажем, если
  в методе closeEvent() у объекта события вызвать метод accept(), окно будет закрыто.
  Этот флаг обычно установлен по умолчанию;
♦ ignore() - сбрасывает флаг, разрешающий дальнейшую обработку события. Так, если в
  методе closeEvent() у объекта события вызвать метод ignore(), окно закрыто не будет;
♦ setAccepted(<Флаг>) - если в качестве параметра указано значение True, флаг, разрешающий
  дальнейшую обработку события, будет установлен (аналогично вызову метода accept());
  а если False - сброшен (аналогично вызову метода ignore());
♦ isAccepted() - возвращает текущее состояние флага, разрешающего дальнейшую обработку события;
♦ spontaneous() - возвращает True, если событие сгенерировано операционной системой,
  и False - если самой программой;
♦ type() - возвращает тип события в виде одного из следующих элементов перечисления Туре
  из класса QEvent (приведены основные типы событий, полный их список содержится на странице
  https://doc.qt.io/qt-6/qevent.html#Type-enum):
    - None_ - нет события;
    - MouseButtonPress - нажата кнопка мыши;
    - MouseButtonRelease - отпущена кнопка мыши;
    - MouseButtonDblClick- двойной щелчок мышью;
    - MouseMove - перемещение мыши;
    - Wheel - прокручено колесико мыши;
    - Enter - курсор мыши помещен на компонент;
    - Leave - курсор мыши уведен с компонента;
    - DragEnter - курсор мыши помещен на компонент при операции перетаскивания;
    - DragMove - производится операция перетаскивания;
    - DragLeave - курсор мыши уведен с компонента при операции перетаскивания;
    - Drop - операция перетаскивания завершена;
    - KeyPress - нажата клавиша;
    - KeyRelease - отпущена клавиша;
    - Show - компонент отображен;
    - Hide - компонент скрыт;
    - Focusin - компонент получил фокус ввода;
    - FocusOut - компонент потерял фокус ввода;
    - Paint - компонент требует перерисовки;
    - Move - местоположение компонента изменилось;
    - Resize - размеры компонента изменились;
    - PolishRequest - компонент должен быть настроен;
    - Polish - компонент настроен;
    - ShoWТoParent - дочерний компонент отображен;
    - HideToParent - дочерний компонент скрыт;
    - ChildAdded - дочерний компонент добавлен;
    - ChildPolished - производится настройка дочернего компонента;
    - ChildRemoved - дочерний компонент удален;
    - Close - окно закрыто;
    - WindowActivate - окно стало активным;
    - WindowDeactivate - окно стало неактивным;
    - ActivationChange - изменилось состояние активности окна верхнего уровня;
    - WindowBlocked - окно блокировано модальным окном;
    - WindowUnblocked - окно разблокировано после закрытия модального окна;
    - WindowStateChange - состояние окна изменилось;
    - ApplicationStateChange - текущее состояние программы изменилось;
    - ContextMenu - событие контекстного меню;
    - Clipboard - содержимое буфера обмена изменилось;
    - Timer - событие таймера;
    - 1000-User - пользовательское событие;
    - 65535-MaxUser - максимальный идентификатор пользовательского события.
Статический метод registerEventType([<Идентификатор>]) класса QEvent позволяет зарегистрировать
пользовательский тип события с указанным идентификатором. В качестве последнего можно указать
значение в пределах от QEvent.User(1000) до QEvent.мaxUser(65535). Если заданный идентификатор занят,
выбирается ближайший свободный. В качестве результата возвращается идентификатор зарегистрированного
события.
Перехват всех событий осуществляется с помощью специального метода event(self, <event>).
Через параметр <event> доступен объект события. Этот объект различен у разных типов событий
(например, у события MouseButtonPress он относится к классу QMouseEvent, а у события KeyPress -
к классу QKeyEvent).
Из метода event() следует вернуть в качестве результата значение True, если событие было обработано,
и False - в противном случае. Если возвращается значение True, то. родительский компонент не получит
событие. Чтобы продолжить распространение события на родителя, необходимо вызвать метод event()
базового класса и передать ему текущий объект события. Обычно это делается так:
return QtWidgets.QWidget.event(self, е)
В этом случае пользовательский класс является наследником класса QWidget и переопределяет
метод event(). Если вы наследуете другой класс, следует вызывать метод именно этого класса.
Например, при наследовании класса QLabel инструкция будет выглядеть так:
return QtWidgets.QLabel.event(self, е)

Перехватывать все события следует только в самом крайнем случае.
В обычных ситуациях надо обрабатывать только нужные события.
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               )
from PySide6.QtCore import QEvent

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow,
класса виджета кнопки QPushButton

Импорт из модуля PySide6.QtCore класса событий QEvent
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Перехват и обработка событий')  # установка заголовка главного окна приложения
        self.resize(300, 100)  # установка исходного размера окна

    def event(self, event: QEvent) -> QEvent:
        """
        Обработчик событий
        """
        if event.type() == QEvent.Type.KeyPress:  # проверка типа события
            print('Нажата клавиша на клавиатуре')
            print(f'Код: {event.key()} , текст: {event.text()}')
        elif event.type() == QEvent.Type.Close:
            print('Окно закрыто')
        elif event.type() == QEvent.Type.MouseButtonPress:
            position = event.pos()
            print(f'Щелчок мышью. Координаты {position.x()}, {position.y()}')
        return QMainWindow.event(self, event)  # отправка события дальше


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
