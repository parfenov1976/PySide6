"""
Использование таймеров

Вместо методов startTimer() и killTimer() класса QObject можно воспользоваться классом
QTimer из модуля QtCore. Конструктор класса имеет следующий формат:
QTimer([parent=None])
Методы этого класса:
♦ setinterval(<Интервал>) - задает интервал времени· в миллисекундах, по истечении
которого генерируется сигнал timeout. Минимальное значение интервала зависит от
операционной системы. Если указать значение О, таймер будет срабатывать регулярно
при отсутствии других необработанных сигналов;
♦ start([<Интервал>]) - запускает таймер. В параметре можно указать интервал времени
в миллисекундах. Если параметр не указан, используется значение, заданное в вызове
метода setinterval() ;
♦ stop() - останавливает таймер;
♦ isActive() - возвращает значение True, если таймер запущен, и False - в противном
случае;
♦ timerId() - возвращает идентификатор таймера, если он запущен, и значение -1 -
в противном случае;
♦ remainingTime() - возвращает ·время, оставшееся до очередного срабатывания таймера,
в миллисекундах;
♦ interval() - возвращает установленный интервал;
♦ setSingleShot(<Состояние>) - если в параметре указано значение True, таймер сработает
только один раз, в противном случае - будет срабатывать многократно;
♦ isSingleShot() - возвращает значение True, если таймер сработает только один раз, и
False - в противном случае;
♦ setTimerType(<Тип таймера>) - задает тип таймера:
    ♦ PreciseTimer - точный таймер, обеспечивающий точность до миллисекунд;
    ♦ CoarseTimer - «приблизительный» таймер, обеспечивающий точность в пределах 5% от
      заданного интервала
    ♦ VeryCoarseTimer - «приблизительный» таймер, обеспечивающий точность до секунд.
♦ timerType() - возвращает тип таймера.

Статический метод singleShot() класса QTimer запускает таймер, настраивает его для однократного
срабатывания и указывает функцию или метод, который будет вызван по истечении
заданного интервала. Формат метода:
singleShot(<Интервал>[, <ТИп таймера>], <Функция или метод>)

Примеры:
QtCore.QTimer.singleShot(lOOO, self.on_timeout)
QtCore.QTimer.singleShot(lOOO, QtWidgets.QApplication.instance().quit)
"""

import sys
import time
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QLabel,
                               QPushButton,
                               QVBoxLayout,
                               QWidget,
                               )
from PySide6.QtCore import Qt, QTimer

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт модуля time, предоставляющего инструменты для работы с объектами времени

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow,
класса виджета кнопки QPushButton, класс базового пустого виджета QWidget, класс ярлыка QLabel,
класса слоя для виджетов QVBoxLayout с вертикальной организацией

Импорт из модуля PySide6.QtCore класса класса аттрибутов для настройки и управления виджетами Qt,
класса таймеров QTimer
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Часы')  # установка заголовка главного окна
        self.resize(200, 100)  # задаем исходный размер окна
        self.lbl = QLabel('')  # создаем пустой ярлык для отображения времени
        self.lbl.setAlignment(Qt.AlignmentFlag.AlignHCenter)  # настройка выравнивания внутри ярлыка
        self.btn1 = QPushButton('Запустить')  # создание виджета кнопки запуска таймер
        self.btn2 = QPushButton('Остановить')  # создание виджета кнопки остановки таймер
        self.btn2.setEnabled(False)  # блокировка кнопки остановки таймера
        self.vbox = QVBoxLayout()  # создание слоя для виджетов с вертикальной организацией
        self.vbox.addWidget(self.lbl)  # размещение в слое ярлыка для отображения времени
        self.vbox.addWidget(self.btn1)  # размещение в слое кнопки запуска таймера
        self.vbox.addWidget(self.btn2)  # размещение в слое кнопки остановки таймера
        self.container = QWidget()  # создание контейнера для слоев
        self.container.setLayout(self.vbox)  # размещение в контейнере слоя с виджетами
        self.setCentralWidget(self.container)  # размещение контейнера со слоями в главном окне
        self.btn1.clicked.connect(self.on_clicked_btn1)  # привязка обработчика к сигналу на нажатие кнопки
        self.btn2.clicked.connect(self.on_clicked_btn2)  # привязка обработчика к сигналу на нажатие кнопки
        self.timer = QTimer()  # создание экземпляра таймера
        self.timer.timeout.connect(self.on_timeout)  # привязка обработчика с сигналу на завершение таймера

    def on_clicked_btn1(self) -> None:
        """
        Обработчик сигнала на нажатие кнопки запуска таймера
        :return: None
        """
        self.timer.start(1000)  # запуск таймера на 1 секунду
        self.btn1.setEnabled(False)  # блокировка кнопки запуска таймера
        self.btn2.setEnabled(True)  # разблокировка кнопки остановки таймера

    def on_clicked_btn2(self) -> None:
        """
        Обработчик сигнала на нажатие кнопки остановки таймера
        :return: None
        """
        self.timer.stop()  # остановка таймера
        self.btn1.setEnabled(True)  # разблокирование кнопки запуска таймера
        self.btn2.setEnabled(False)  # блокировка кнопка остановки таймера

    def on_timeout(self) -> None:
        """
        Обработчика сигнала на завершение таймера
        :return: None
        """
        self.lbl.setText(time.strftime('%H:%M:%S'))


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
