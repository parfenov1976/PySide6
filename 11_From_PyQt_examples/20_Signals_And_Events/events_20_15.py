"""
События мыши. Перемещение курсора мыши

Чтобы обработать перемещение курсора мыши над компонент�м, необходимо определить специальный
метод mouseMoveEvent(self, <event>). Через параметр <event> доступен объект класса QMouseEvent,
содержащий дополнительную информацию о событии. Следует учитывать, что метод button() при
перемещении мыши возвращает элемент NoButton перечисления QtCore.Qt.MouseButton.
По умолчанию метод mouseMoveEvent() вызывается только в том случае, если при перемещении
удерживается нажатой какая-либо кнопка мыши. Это сделано специально, чтобы не создавать лишних
событий при обычном перемещении мыши. Если необходимо обрабатывать любые перемещения мыши
в пределах компонента, следует вызвать у этого компонента метод setMouseTracking(<Состояние>),
которому передать значение True. Чтобы обработать все перемещения внутри окна, нужно
дополнительно захватить мышь вызовом метода grabMouse().
Метод pos() объекта события возвращает позицию точки в системе координат текущего компонента.
Чтобы преобразовать координаты точки в систему координат родительского компонента или в
глобальную систему координат, надо воспользоваться следующими методами класса QWidget:
♦ mapToGlobal(<Координаты QPoint>) - преобразует заданные координаты точки из системы
  координат компонента в глобальную систему координат. Возвращает объект класса QPoint;
♦ mapFromGlobal(<Координаты QPoint>)- преобразует заданные координаты точки из
глобальной в систему координат компонента. Возвращает объект класса QPoint;
♦ mapToParent(<Координаты QPoint>) - преобразует заданные координаты точки из системы
  координат компонента в систему координат его родителя. Если компонент не имеет родителя,
  действует как метод mapToGlobal(). Возвращает объект класса QPoint;
♦ mapFromParent(<Координаты QPoint>)- преобразует заданные координаты точки из системы
  координат родительского компонента в систему координат текущего компонента. Если
  компонент не имеет родителя, работает подобно методу mapFromGlobal(). Возвращает объект
  класса QPoint;
♦ mapTo(<Компонент>, <Координаты QPoint>) - преобразует заданные координаты точки из системы
  координат текущего компонента в систему координат родителя указанного компонента.
  Возвращает объект класса QPoint;
♦ mapFrom(<Компонент>, <Координаты QPoint>) - преобразует заданные координаты точки из
  системы координат родителя указанного компонента в систему координат текущего компонента.
  Возвращает объект класса QPoint.
"""

import sys
from PySide6.QtWidgets import (QApplication,
                               QPlainTextEdit,
                               )

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса многострочного 
текстового поля QPlainTextEdit
"""


class MainWindow(QPlainTextEdit):
    """
    Класс окна приложения от супер класса многострочного текстового поля
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор окна приложения
        """
        QPlainTextEdit.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Обработка событий перемещения мыши')  # указание заголовка окна приложения
        self.resize(300, 600)  # установка исходного размера окна приложения
        self.setMouseTracking(True)  # установка на обработку всех перемещений в пределах компонента

    def mouseMoveEvent(self, event) -> None:
        """
        Обработчик события перемещения мыши
        :param event: объект события QMouseEvent
        :return: None
        """
        self.appendPlainText(f'Координаты курсора = {event.pos()}')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
