"""
Обработка событий изменения размера и положения окна

При перемещении и изменении размеров окна вызываются следующие специальные методы:
♦ moveEvent(self, <event>) - непрерывно вызывается при перемещении окна. Через параметр
  <event> доступен объект класса QMoveEvent. Получить координаты левого верхнего угла
  окна позволяют следующие методы этого класса:
    • pos() - возвращает объект класса QPoint с текущими координатами;
    • oldPos() - возвращает объект класса QPoint с предыдущими координатами;
♦ resizeEvent(self, <event>) - непрерывно вызывается при изменении размеров окна.
  Через параметр <event> доступен объект класса QResizeEvent. Получить размеры окна
  позволяют следующие методы этого класса:
    • size() - возвращает объект класса QSize с текущими размерами;
    • oldSize() - возвращает объект класса QSize с предыдущими размерами.
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               )
"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Обработка событий изменения размера и положения окна')  # установка заголовка окна
        self.resize(300, 200)  # установка исходного размера окна

    def moveEvent(self, event: QMainWindow.moveEvent) -> None:
        """
        Обработчика события перемещения окна
        """
        print(f'x = {event.pos().x()}, y = {event.pos().y()}')  # выводим из события координаты ЛВУ окна
        QMainWindow.moveEvent(self, event)  # отправляем событие дальше

    def resizeEvent(self, event: QMainWindow.resizeEvent) -> None:
        """
        Обработчик события изменения размеров окна
        """
        print(f'width = {event.size().width()}, height = {event.size().height()}')  # вывод размеров окна
        QMainWindow.resizeEvent(self, event)  # отправляем событие дальше


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
