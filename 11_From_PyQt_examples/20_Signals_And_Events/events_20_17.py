"""
События мыши. Прокрутка колеса мыши

Обработать прокрутку колесика мыши позволяет специальный метод wheelEvent(self, <event>).
Через параметр <event> доступен объект класса QWheelEvent с дополнительной информацией
о событии.
Класс QWheelEvent поддерживает методы:
♦ angleDelta() - возвращает углы поворота колесика по горизонтали и вертикали в градусах,
  умноженные на 8, в виде объекта класса QPoint. Значения углов могут быть положительными
  или отрицательными - в зависимости от направления поворота. Пример:
  angle = e.angleDelta() / 8
  angleX = angle.x()
  angleY = angle.y()
♦ pixelDelta() - возвращает величины поворота колесика по горизонтали и вертикали
  в пикселах в виде объекта класса QPoint. Величины поворота могут быть положительными
  или отрицательными - в зависимости от направления поворота.
♦ position() - возвращает объект класса QPointF с вещественными координатами в пределах
  компонента;
♦ scenePosition() - возвращает объект класса QPointF с вещественными координатами
  в пределах окна или графической сцены;
♦ globalPosition() - возвращает объект класса QPointF с вещественными координатами
  в пределах экрана;
♦ button() - возвращает обозначение нажатой кнопки мыши в виде одного из следующих
элементов перечисления MouseButton из модуля QtCore.Qt (описаны не все элементы,
полный их список приведен на странице https://doc.qt.io/qt-6/qt.html#MouseButtonenum):
  • NoButton - ни одна кнопка не нажата. Это значение возвращается методом button()
    при перемещении курсора мыши;
  • LeftButton - левая кнопка;
  • RightButton - правая кнопка;
  • MiddleButton - средняя кнопка или колесико;
  • XButton1, ExtraButton1 и BackButton - первая из дополнительных кнопок;
  • XButton2, ExtraButton2 и ForwardButton - вторая из дополнительных кнопок;
♦ buttons() - возвращает обозначение всех нажатых кнопок мыши в виде комбинации
  элементов перечисления MouseButton:
  if e.buttons() & QtCore.Qt.MouseButton.LeftButton:
      print ("Нажата левая кнопка мыши")
♦ modifiers() - позволяет определить, какие клавиши-модификаторы (<Shift>, <Ctrl>,
  <Alt> и др.) были нажаты вместе с кнопкой мыши;
♦ timestamp() - возвращает в виде числа отметку системного времени, в которое возникло
  событие.
Если событие было успешно обработано, необходимо вызвать метод accept() объекта
события. Чтобы родительский компонент мог получить событие, вместо метода accept()
необходимо вызвать метод ignore().
"""
import sys
from PySide6.QtWidgets import (QApplication,
                               QMainWindow,
                               QPlainTextEdit,
                               )

"""
Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
к аргументам командной строки. Если использование аргументов командной строки не предполагается,
то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
в качестве аргумента передается пустой.

Импорт из модуля PySide6.QWidgets класса управления приложением QApplication, класса главных окон QMainWindow,
класс виджета многострочного текстового поля QPlainTextEdit
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Прокрутка колеса мыши')  # установка заголовка главного окна приложения
        self.resize(300, 600)  # установка исходного размера главного окна
        self.txt_field = QPlainTextEdit()  # создание экземпляра класса виджета текстового поля
        self.setCentralWidget(self.txt_field)  # добавление текстового поля на окно приложения с полным его заполнением

    def wheelEvent(self, event) -> None:
        """
        Обработчик события прокрутки колесика мыши
        :param event: QWheelEvent объект класса события прокрутки колесика мыши
        :return: None
        """
        # добавление информации из события колеса мыши на текстовое поле
        self.txt_field.appendPlainText(f'Колесо повернуто на {event.angleDelta().y() / 8} градусов.\n'
                                       f'При этом зажат модификатор {event.modifiers()}\n'
                                       f'Также была зажата {event.buttons()} кнопка мыши')


if __name__ == '__main__':  # проверка условия запуска данного файла для предотвращения запуска кода верхнего уровня
    # при импортировании данного файла как модуля
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # вывод окна на экран, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла в метод sys.exit()
