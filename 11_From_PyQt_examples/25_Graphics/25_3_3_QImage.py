"""
Работа с растровыми изображениями. Класс QImage.

Класс QImage предназначен для работы с изображениями в контекстно-независимом представлении.
Иерархия наследования:
QPaintDevice - QImage
Поскольку класс QImage наследует класс QPaintDevice, мы можем использовать его как поверхность
для рисования. Однако следует учитывать, что не на всех форматах изображения
можно рисовать - для рисования лучше использовать изображение формата Format_
ARGB32_Premultiplied. Вывести изображение позволяет метод drawImage() класса QPainter
(25_2_3_draw_pics.py).
Форматы конструктора класса:
QImage()
QImage(<Ширина>, <Высота>, <Формат>)
QImage(<Размеры QSize>, <Формат>)
QImage(<Путь к файлу>[, <Тип изображения>])
QImage(<Исходный объект QImage>)
Первый конструктор создает пустой объект изображения. Второй и третий конструкторы
позволяют указать размеры изображения - если таковые равны нулю, будет создан пустой
объект. Четвертый конструктор предназначен для загрузки изображения из файла. Во втором
параметре указывается тип изображения в виде строки - если он не указан, формат
будет определен по расширению загружаемого файла. Пятый конструктор создает копию
заданного исходного объекта.
В параметре <Формат> можно указать следующие элементы перечисления Format из класса
QImage (приведены только наиболее часто используемые - полный их список можно найти
на странице https://doc.qt.io/qt-6/qimage.html#Format-enum):
♦ Format_Invalid - неверный формат;
♦ Format_Mono - глубина цвета 1 бит;
♦ Format_MonoLSB - глубина цвета 1 бит;
♦ Format_Indexed8 - глубина цвета 8 битов;
♦ Format_RGВ32 - RGB без альфа-канала, глубина цвета 32 бита;
♦ Format_ARGВ32 - RGB с альфа-каналом, глубина цвета 32 бита;
♦ Format_ARGB32_Premultiplied - RGB с альфа-каналом, глубина цвета 32 бита. Для рисования
  лучше использовать этот формат.
Класс QImage поддерживает большое количество методов, из которых мы рассмотрим лишь
основные (полный их список приведен на странице https://doc.qt.io/qt-6/qimage.html):
♦ isNull() -возвращает значение True, если текущий объект является пустым, и False -
  в противном случае;
♦ load(<Путь к файлу> [, format=None]) - загружает изображение из файла с указанным
  путем. Во втором параметре задается формат файла в виде строки если он не указан,
  формат определяется по расширению файла. Метод возвращает значение True, если изображение
  успешно загружено, и False -в противном случае;
♦ loadFromData(<Объект QByteArray или bytes> [, format=None]) - загружает изображение
  из заданного объекта. Во втором параметре указывается тип изображения в виде
  строки (например: "PNG"). Метод возвращает значение True, если изображение успешно
  загружено, и False - в противном случае;
♦ fromData(<Объект QByteArray или bytes> [, format=None]) - статический, загружает
  изображение из заданного объекта. Во втором параметре указывается тип изображения
  в виде строки (например: "PNG"). Метод возвращает объект класса QImage;
♦ save(<Путь к файлу>[, format=None] [, quality=-1]) - сохраняет изображение в файле
  с указанным путем. Во втором параметре можно задать формат файла в виде строки -
  если он не указан, формат определяется по расширению файла. Необязательный параметр
  quality позволяет задать качество изображения. Можно передать значение в диапазоне
  от О до 100; значение -1 указывает качество по умолчанию. Метод возвращает
  значение True, если изображение успешно сохранено, и False - в противном случае;
♦ fill(<Цвет>) - производит заливку изображения заданным цветом. В качестве параметра
  указывается элемент перечисления GlobalColor, объект класса QColor или целочисленное
  значение цвета, возвращаемое методами rgb() и rgba() класса QColor. Примеры:
  img.fill(QtCore.Qt.GlobalColor.red)
  img.fill(QtGui.QColor("#ff0000"))
  img.fill (QtGui.QColor("#ff0000") .rgb())
♦ width() - возвращает ширину изображения;
♦ height() - возвращает высоту изображения;
♦ size() - возвращает объект класса QSize с размерами изображения;
♦ rect() - возвращает объект класса QRect с координатами и размерами прямоугольной
  области, ограничивающей изображение;
♦ depth() - возвращает глубину цвета;
♦ format() - возвращает формат изображения в виде элемента перечисления Format из
  класса QImage;
♦ setPixel() - задает цвет пиксела с указанными координатами. Форматы метода:
  setPixel(<X>, <У>, <Индекс или цвет>)
  setPixel(<Координаты QPoint>, <Индекс или цвет>)
  В параметре <Индекс или цвет> у 8-битных изображений задается индекс цвета в палитре,
  а у 32-битных - целочисленное значение цвета, получить которое позволяют методы
  rgb() и rgba() класса QColor;
♦ pixel() - возвращает целочисленное значение цвета пиксела с указанными координатами.
  Это значение можно передать конструктору класса QColor, а затем получить значения
  различных составляющих цвета. Форматы метода:
  pixel(<X>, <У>)
  pixel(<Координаты QPoint>)
♦ convertToFormat() - преобразует текущее изображение в указанный формат (задается
  в виде элемента перечисления Format из класса QImage) и возвращает новый объект класса
  QImage. Исходное изображение не изменяется. Форматы метода:
  convertToFormat(<Формат>[, flags=ImageConversionFlag.AutoColor])
  convertToFormat(<Формат>, <Таблица цветов>[,flags=ImageConversionFlag.AutoColor])
♦ сору() - возвращает объект класса QImage с прямоугольным фрагментом изображения
  с заданными параметрами. Форматы метода:
  сору([<Параметры фрагмента QRect>])
  сору(<Х>, <У>, <Ширина>, <Высота>)
  Если в первом формате параметры фрагмента не указаны, изображение копируется
  целиком;
♦ scaled() - изменяет размер изображения и возвращает результат в виде объекта класса
  QImage. Исходное изображение не изменяется. Форматы метода:
  scaled(<Ширина>, <Высота>[, aspectRatioMode=AspectRatioMode.IgnoreAspectRatio] [,
         transformMode=TransformationMode.FastTransformation])
  scaled(<Размеры QSize>[, aspectRatioMode=AspectRatioMode.IgnoreAspectRatio] [,
         transformMode=TransformationMode.FastTransformation])
  В необязательном параметре aspectRatioMode могут быть указаны следующие элементы
  перечисления AspectRatioMode из модуля QtCore.Qt:
    • IgnoreAspectRatio - изменяет размеры без сохранения пропорций сторон;
    • KeepAspectRatio - изменяет размеры с сохранением пропорций сторон. При этом
      часть области нового изображения может оказаться незаполненной;
    • KeepAspectRatioByExpanding - изменяет размеры с сохранением пропорций сторон.
  При этом часть нового изображения может выйти за пределы его области.
  В необязательном параметре transformMode могут быть указаны следующие элементы
  перечисления TransformationMode из модуля QtCore.Qt:
    • FastTransformation - сглаживание выключено;
    • SmoothTransformation - сглаживание включено;
♦ scaledToWidth() - изменяет ширину изображения и возвращает результат в виде объекта
  класса QImage. Формат метода:
  scaledToWidth(<Ширина>[, mode=TransformationMode.FastTransformation])
  Высота изображения изменяется пропорционально. Исходное изображение не изменяется.
  Параметр mode аналогичен параметру transformMode в методе scaled();
♦ scaledToHeight() - изменяет высоту изображения и возвращает результат в виде объекта
  класса QImage. Формат метода:
  scaledToHeight(<Высота>[, mode=TransformationMode.FastTransformation])
  Ширина изображения изменяется пропорционально. Исходное изображение не изменяется.
  Параметр mode аналогичен параметру transformMode в методе scaled();
♦ transformed() - производит трансформацию изображения (например, поворот) и возвращает
  результат в виде объекта класса QImage. Формат метода:
  transformed(<Трансформация QTransform>[, mode=TransformationMode.FastTransformation])
  Исходное изображение не изменяется. Параметр mode аналогичен параметру transformMode
  в методе scaled();
♦ invertPixels(mode=InvertMode.InvertRgb]) - инвертирует значения всех пикселов
  в изображении. В необязательном параметре mode может быть указан элемент InvertRgb
  или InvertRgba перечисления InvertMode из класса QImage;
♦ mirror([horizontal=False] [, vertical=True]) - зеркально отображает текущее изображение.
  Если значение True дано параметру horizontal, выполняется отображение по
  горизонтали, а если параметру vertical - по вертикали;
♦ mirrored () - аналогичен mirror (), только создает новый объект, хранящий зеркальную
  копию текущего изображения, и возвращает его. Текущее изображение не изменяется.
"""

# TODO Дополнить примером
