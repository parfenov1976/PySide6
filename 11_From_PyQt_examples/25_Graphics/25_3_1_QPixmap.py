"""
Работа с растровыми изображениями. Класс QPixmap

Класс QPixmap предназначен для работы с изображениями в контекстно-зависимом представлении.
Данные хранятся в виде, позволяющем отображать изображение на экране наиболее
эффективным способом, поэтому класс QPixmap часто используется для предварительного
рисования графики перед выводом ее на экран. Иерархия наследования:
QPaintDevice - QPixmap
Поскольку класс QPixmap наследует класс QPaintDevice, мы можем использовать его как
поверхность для рисования. Вывести изображение позволяет метод drawPixmap() класса
QPainter (см 25_2_3_draw_pics.py).
Форматы конструктора класса:
QPixmap()
QPixmap(<Ширина>, <Высота>)
QPixmap(<Размеры QSize>)
QPixmap(<Путь к файлу>[, format=None] [, flags=Image.ConversionFlag.AutoColor])
QPixmap(<Исходный объект QPixmap>)
Первый формат создает пустой объект изображения. Второй и третий форматы позволяют
указать размеры изображения - если размеры равны нулю, то будет создан пустой объект.
Четвертый формат предназначен для загрузки изображения из файла. Во втором параметре
указывается тип изображения в виде строки (например, "PNG")- если он не указан, то
формат будет определен по расширению загружаемого файла. Пятый конструктор создает
копию указанного изображения.
Класс QPixmap поддерживает следующие методы (здесь приведены только основные - полный
их список можно найти на странице https://doc.qt.io/qt-6/qpixmap.html):
♦ isNull() - возвращает значение True, если объект является пустым, и False - в противном
  случае;
♦ load() - загружает изображение из файла с указанным путем. Формат метода:
  load(<Путь к файлу>[, format=None] [, flags=ImageConversionFlag.AutoColor])
  Во втором параметре можно задать формат файла в виде строки - если он не указан,
  формат определяется по расширению файла. Необязательный параметр flags задает тип
  преобразования цветов. Метод возвращает значение True, если изображение успешно
  загружено, и False - в противном случае;
♦ loadFromData() - загружает изображение из заданного объекта класса QByteArray.
  Формат метода:
  loadFromData(<Объект QByteArray или bytes> [, format=None] [,
               flags=ImageConversionFlag.AutoColor])
  Метод возвращает значение True, если изображение успешно загружено, и False -
  в противном случае;
♦ save(<Путь к файлу>[, format=None] [, quality=-1]) - сохраняет изображение в файл
  с указанным путем. Во втором параметре можно задать формат файла в виде строки -
  если он не указан, формат будет определен по расширению файла. Необязательный
  параметр quality позволяет задать качество изображения. Можно передать значение
  в диапазоне от О до 100, значение -1 указывает качество по умолчанию. Метод возвращает
  значение True, если изображение успешно сохранено, и False - в противном случае;
♦ convertFromImage() - преобразует заданный объект класса QImage в объект класса
  QPixmap. Формат метода:
  convertFromImage(<Изображение QImage>[, flags=ImageConversionFlag.AutoColor])
  Метод возвращает значение True, если изображение успешно преобразовано, и False -
  в противном случае;
♦ fromImage() - статический, преобразует заданный объект класса QImage в объект класса
  QPixmap, который и возвращает. Формат метода:
  fromImage(<Изображение QImage>[, flags=ImageConversionFlag.AutoColor])
♦ toImage() - преобразует текущее изображение в объект класса QImage и возвращает его;
♦ fill([color=GlobalColor.white]) - производит заливку изображения указанным цветом;
♦ width() - возвращает ширину изображения;
♦ height() - возвращает высоту изображения;
♦ size() -возвращает объект класса QSize с размерами изображения;
♦ rect() - возвращает объект класса QRect с координатами и размерами прямоугольной
  области, ограничивающей изображение;
♦ depth() - возвращает глубину цвета;
♦ isQBitmap() - возвращает значение True, если глубина цвета равна одному биту (т. е.
  это монохромное изображение), и False - в противном случае;
♦ createMaskFromColor(<Цвет QColor>[, mode=МaskМode.MaskInColor]>) - создает на основе
  текущего изображения маску в виде объекта класса QBitmap и возвращает ее. Первый
  параметр задает цвет - области, закрашенные этим цветом, будут на маске либо
  прозрачными, либо непрозрачными. Необязательный параметр mode задает режим создания
  маски в виде следующих элементов перечисления MaskMode из модуля QtCore.Qt:
  • MaskInColor - области, закрашенные указанным цветом, будут прозрачными;
  • MaskOutColor - области, закрашенные указанным цветом, будут непрозрачными;
♦ setMask(<Маска QBitmap>) - устанавливает маску;
♦ mask() - возвращает объект класса QBitmap с маской изображения;
♦ сору() - возвращает объект класса QPixmap с фрагментом изображения. Если параметр
  rect не указан, изображение копируется полностью. Форматы метода:
  copy([rect=QRect()])
  сору(<Х>, <Y>, <Ширина>, <Высота>)
♦ scaled() - изменяет размер изображения и возвращает результат в виде объекта класса
  QPixmap. Исходное изображение не изменяется. Форматы метода:
  scaled(<Ширина>, <Высота>[,
         aspectRatioMode=AspectRatioMode.IgnoreAspectRatio] [,
         transformМode=ТransformationMode.FastTransformation])
  scaled (<Размеры QSize>[, aspectRatioMode=AspectRatioMode.IgnoreAspectRatio] [,
          transformМode=TransformationМode.FastTransformation])
  В необязательном параметре aspectRatioMode могут быть указаны следующие элементы
  перечисления AspectRatioMode из модуля QtCore.Qt:
  • IgnoreAspectRatio - изменяет размеры без сохранения пропорций сторон;
  • KeepAspectRatio - изменяет размеры с сохранением пропорций сторон. При этом
    часть области нового изображения может оказаться незаполненной;
  • KeepAspectRatioByExpanding - изменяет размеры с сохранением пропорций сторон.
    При этом часть нового изображения может выйти за пределы его области.
    В необязательном параметре transformMode могут быть указаны следующие элементы
    перечисления TransformationMode из модуля QtCore.Qt:
  • FastTransformation - сглаживание выключено;
  • SmoothTransformation - сглаживание включено;
♦ scaledToWidth() - изменяет ширину изображения и возвращает результат в виде объекта
  класса QPixmap. Формат метода:
  scaledToWidth(<Ширина>[, mode=ТransfoпnationMode.FastTransfoпnation])
  Высота изображения изменяется пропорционально. Исходное изображение не изменяется.
  IJараметр mode аналогичен параметру transformМode в методе scaled ();
♦ scaledToHeight () -:- изменяет высоту изображения и возвращает результат в виде объекта
класса QPixmap. Формат метода:
scaledToHeight (<Высота> [, mode=TransformationMode.FastTransfoпnation] )
Ширина изображения изменяется пропорционально. Исходное изображение не изменяется.
Параметр mode аналогичен параметру transformМode в методе scaled ();
♦ transformed () - производит трансформацию изображения (например, поворот) и возвращает
результат в виде объекта класса QPixmap. Формат метода:
transformed(<Tpaнcфopмaция QTransform>[,
mode=TransfoпnationМode.FastTransfoпnation])
Исходное изображение не изменяется. Параметр mode аналогичен параметру
transformМode в методе scaled ();
♦ swap(<Изображение QPixmap>) - заменяет текущее изображение указанным в параметре;
♦ hasAlpha() - возвращает True, если изображение имеет прозрачные области, и False -
в противном случае;
♦ hasAlphaChannel() - возвращает True, если формат изображения поддерживает прозрачность,
и False - в противном случае.
"""

# TODO добавить пример
