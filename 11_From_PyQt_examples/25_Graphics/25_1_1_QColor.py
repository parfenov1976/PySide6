"""
Работа с графикой. Вспомогательные классы. Класс QColor: объекты цвета

Класс QColor описывает цвет в цветовых моделях RGB, СМУК, HSV или HSL. Форматы
конструктора класса QColor:
QColor()
QColor(<Красный>, <Зеленый>, <Синий>[, alpha=255])
QColor(<Строка>)
QColor(<Элемент перечисления GlobalColor>)
QColor(<Число>)
QColor(<Исходный цвет QColor>)
Первый формат создает невалидный объект. Проверить объект на валидность можно с помощью
метода isValid(). Метод возвращает значение True, если объект является валидным,
и False - в противном случае.
Второй формат принимает целочисленные значения красной, зеленой и синей составляющих
цвета модели RGB. В качестве параметров указываются числа от 0 до 255. Необязательный
параметр alpha задает степень прозрачности· цвета: значение 0 соответствует прозрачному
цвету, а значение 255 - полностью непрозрачному.
Вот пример указания красного цвета:
red = QtGui.QColor(255, 0, 0)
В третьем формате цвет, указывается в виде строки в форматах "#RGB", "#RRGGBB", "#AARRGGBB"
(здесь AA обозначает степень прозрачности цвета), "#RRRGGGBBB", "#RRRRGGGGBBBB",
"<Название цвета>" или "transparent" (прозрачный цвет):
red = QtGui.QColor("#f00")
darkBlue = QtGui.QColor("#000080")
semiTransparentDarkBlue = QtGui.QColor("#7F000080")
white = QtGui.QColor("white")
Получить список всех поддерживаемых названий цветов позволяет статический метод colorNames().
Проверить правильность строки с названием цвета можно с помощью статического метода
isValidColor(<Строка>), который возвращает значение True, если строка является правильным
наименованием цвета, и False-в противном случае:
print(QtGui.QColor.colorNames()) # ['aliceblue', 'antiquewhite', ...]
print(QtGui.QColor.isValidColor("lightcyan")) # True
В четвертом формате указываются следующие элементы перечисления GlobalColor из модуля QtCore.Qt:
white, black, red, darkRed, green, darkGreen, blue, darkBlue, cyan, darkCyan, magenta, darkMagenta,
yellow, darkYellow, gray, darkGray, lightGray, color0, color1 или transparent (прозрачный цвет).
Элементы color0 (прозрачный цвет) и color1 (непрозрачный цвет) используются в двухцветных
изображениях:
black = QtCore.Qt.GlobalColor.black
В пятом формате указывается целочисленное значение цвета:
darkBlue = QtGui.QColor(0x000080)
Шестой формат создает новый объект на основе указанного в параметре.
Задать или получить значения в цветовой модели RGB (Red, Green, Blue - красный, зеленый,
синий) позволяют следующие методы:
♦ setNamedColor(<Строка>) - задает название цвета в виде строки в форматах "#RGB", "#RRGGBB",
  "#MRRGGBB", "#RRRGGGBBB", "#RRRRGGGGBBBB", "<Название цвета>" или "transparent" (прозрачный цвет);
♦ name([format=NameFormat.HexRgb]) - возвращает строковое представление цвета в виде строки в
  формате, заданном параметром format. Формат указывается в виде элементов перечисления NameFormat
  из класса QColor:
  • HexRgb-в формате "#RRGGBB";
  • HexArgb-B формате "#AARRGGBB";
♦ setRgb(<Красный>, <Зеленый>, <Синий>[, alpha=255])- задает целочисленные значения красной,
  зеленой и синей составляющих цвета модели RGB. В качестве параметров указываются числа от 0 до
  255. Необязательный параметр alpha задает степень прозрачности цвета: значение 0 соответствует
  прозрачному цвету, а значение 255 - полностью непрозрачному;
♦ setRgb(<Число>) - задает целочисленное значение цвета;
♦ setRgba(<Число>) - задает целочисленное значение цвета со степенью прозрачности;
♦ setRed(<Красный>), setGreen(<Зеленый>), setBlue(<Синий>) и setAlpha(<Прозрачность>) - задают
  значения отдельных составляющих цвета. В качестве параметров указываются числа от 0 до 255;
♦ fromRgb(<Красный>, <Зеленый>, <Синий> [, alpha=255]) - статический, возвращает объект класса
  QColor с указанными значениями. В качестве параметров указываются числа от 0 до 255:
  white = QtGui.QColor.fromRgb(255, 255, 255, 255)
♦ fromRgb(<Число>) и fromRgba(<Число>) - статические, возвращают объект класса QColor
  со значениями, соответствующими целым числам, которые указаны в параметрах:
  white = QtGui.QColor.fromRgba(4294967295)
♦ getRgb()-возвращаеткортежизчетырехцелочисленныхзначений(<Красный>, <Зеленый>,
  <Синий>, <Прозрачность>);
♦ red(), green(), blue() и alpha() - возвращают целочисленные значения отдельных
  составляющих цвета;
♦ rgb() и rgba() - возвращают целочисленное значение цвета;
♦ setRgbF(<Красный>, <Зеленый>, <Синий>[, alpha=1.0]) - задает значения красной, зеленой
  и синей составляющих цвета модели RGB. В качестве параметров указываются вещественные
  числа от 0.0 до 1.0. Необязательный параметр alpha задает степень прозрачности цвета:
  значение 0.0 соответствует прозрачному цвету, а значение 1.0 - полностью непрозрачному;
♦ setRedF(<Красный>), setGreenF(<Зеленый>), setBlueF(<Синий>) и setAlphaF(<Прозрачность>) -
  задают значения отдельных составляющих цвета. В качестве параметров указываются вещественные
  числа от 0.0 до 1.0;
♦ fromRgbF(<Красный>, <Зеленый>, <Синий>[, alpha=l.0])- статический, возвращает объект класса
  QColor с указанными значениями. В качестве параметров указываются вещественные числа от 0.0
  до 1.0:
  white = QtGui.QColor.fromRgbF(1.0, 1.0, 1.0, 1.0)
♦ get:RgbF() - возвращает кортеж из четырех вещественных значений (<Красный>, <Зеленый>,
  <Синий>, <Прозрачность>);
♦ redF(), greenF(), blueF() и alphaF() - возвращают вещественные значения отдельных составляющих
  цвета;
♦ lighter([factor=l50]) - если параметр имеет значение больше 100, то возвращает новый объект
  с более светлым цветом, а если меньше 100 - то с более темным;
♦ darker([factor=200]) - если параметр имеет значение больше 100, то возвращает новый объект
  с более темным цветом, а если меньше 100 - то с более светлым.
Задать или получить значения в цветовой модели СМУК (Cyan, Magenta, Yellow, Кеу - голубой,
пурпурный, желтый, «ключевой» - он же черный) позволяют следующие методы:
♦ setCmyk(<Голубой>, <Пурпурный>, <Желтый>, <Черный>[, alpha=255]) - задает целочисленные
  значения составляющих цвета модели СМУК. В качестве параметров указываются числа от 0 до 255.
  Необязательный параметр alpha задает степень прозрачности цвета: значение 0 соответствует
  прозрачному цвету, а значение 255-полностью непрозрачному;
♦ fromCmyk(<Голубой>, <Пурпурный>, <Желтый>, <Черный>[, alpha=255])- статический, возвращает
  объект класса QColor с указанными значениями. В качестве параметров указываются числа от
  0 до 255:
  white = QtGui.QColor.fromCmyk(0, 0, 0, 0, 255)
♦ getCmyk() - возвращает кортеж из пяти целочисленных значений (<Голубой>, <Пурпурный>,
  <Желтый>, <Черный>, <Прозрачность>);
♦ cyan(), magenta(), yellow(), black() и alpha() - возвращают целочисленные значения
  отдельных составляющих цвета;
♦ setCmykF(<Голубой>, <Пурпурный>, <Желтый>, <Черный>[, alpha=1.0]) - задает значения
  составляющих цвета модели СМУК. В качестве параметров указываются вещественные числа
  от 0.0 до 1.0. Необязательный параметр alpha задает степень прозрачности цвета:
  значение 0.0 соответствует прозрачному цвету, а значение 1.0 - полностью непрозрачному;
♦ fromCmykF(<Голубой>, <Пурпурный>, <Желтый>, <Черный>[, alpha=1.0]) - статический,
  возвращает объект класса QColor с указанными значениями. В качестве параметров указываются
  вещественные числа от 0.0 до 1.0:
  white = QtGui.QColor.fromCmykF(0.0, 0.0, 0.0, 0.0, 1.0)
♦ getCmykF() - возвращает кортеж из пяти вещественных значений (<Голубой>, <Пурпурный>,
  <Желтый>, <Черный>, <Прозрачность>);
♦ cyanF(), magentaF(), yellowF(), blackF() и alphaE:()- возвращают вещественные значения
  отдельных составляющих цвета.
Задать или получить значения в цветовой модели HSV (Hue, Saturation, Value - оттенок,
насыщенность, значение-оно же яркость) позволяют следующие методы:
♦ setHsv(<Оттенок>, <Насыщенность>, <Значение> [, alpha=255]) - задает целочисленные
  значения составляющих цвета модели HSV. В первом параметре указывается число от 0 до 359,
  а в остальных параметрах - числа от 0 до 255;
♦ fromHsv(<Оттенок>, <Насыщенность>, <Значение> [, alpha=255]) статический, возвращает
  объект класса QColor с указанными значениями:
  white = QtGui.QColor.fromHsv(0, 0, 255, 255)
♦ getHsv() - возвращает кортеж из четырех целочисленных значений (<Оттенок>, <Насыщенность>,
  <Значение>, <Прозрачность>);
♦ hsvHue(), hsvSaturation(), value() и alpha()- возвращают целочисленные значения отдельных
  составляющих цвета;
♦ setHsvF(<Оттенок>, <Насыщенность>, <Значение>[, alpha=l.О]) - задает значения составляющих
  цвета модели HSV. В качестве параметров указываются вещественные числа от 0.0 до 1.0;
♦ fromHsvF(<Оттенок>, <Насыщенность>, <Значение>[, alpha=1.0])- статический, возвращает
  объект класса QColor с указанными значениями. В качестве параметров указываются
  вещественные числа от 0.0 до 1.0:
  white = QtGui.QColor.fromHsvF(0.0, 0.0, 1.0, 1.0)
♦ getHsvF() - возвращает кортеж из четырех вещественных значений (<Оттенок>, <Насыщенность>,
  <Значение>, <Прозрачность>);
♦ hsvHueF(), hsvSaturationF(), valueF() и alphaF() - возвращают вещественные значения
  отдельных составляющих цвета.
Цветовая модель HSL (Hue, Saturation, Lightness - оттенок, насыщенность, яркость) отличается
от модели HSV только последней составляющей. Описание этой модели и полный перечень методов
для установки и получения значений приведены в документации.
Для получения типа используемой модели и преобразования между моделями предназначены
следующие методы:
♦ spec() - возвращает тип используемой модели в виде одного из следующих элементов
  перечисления Spec из класса QColor: Invalid (объект не валиден), Rgb, Hsv, Cmyk или Hsl;
♦ convertTo(<Целевой тип модели>) - преобразует тип модели. В качестве параметра указываются
  элементы перечисления Spec из класса QColor (было описано ранее). Метод возвращает новый
  объект цвета. Пример:
  whiteHSV = QtGui.QColor.fromHsv(0, 0, 255)
  whiteRGB = whiteHSV.convertTo(QtGui.QColor.Spec.Rgb)
  Также можно пользоваться методами toRgb(), toCmyk(), toHsv() и toHsl(), которые возвращают
  новые объекты цвета:
  whiteHSV = QtGui.QColor.fromHsv(0, 0, 255)
  whiteRGB = whiteHSV.toRgb()
"""

from PySide6.QtWidgets import (QMainWindow,
                               )
from PySide6.QtGui import (QColor,
                           QPainter,
                           QBrush,
                           )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow,

Импорт из модуля PySide6.QtGui класса моделей цветов QColor, 
класса инструментов для рисования QPainter, класса кисти QBrush

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Класс цветовых моделей QColor')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера главного окна

    def paintEvent(self, event) -> None:
        """
        Обработчик события рисования
        :param event: событие рисования
        :return: None
        """
        print(f'Событие: {event}')
        painter = QPainter(self)  # создание объекта рисовальщика с подключением поверхности рисования
        black = Qt.GlobalColor.black  # создание объекта цвета из глобального перечислителя цветов
        yellow = QColor(255, 255, 0)  # создание объекта цвета из класса моделей цветов с использованием
        # пространства RGB с указанием значения яркости компонентов цвета (по 256 оттенков)
        dark_blue = QColor('#000080')  # создание объекта цвета из класса моделей цветов с использованием
        # пространства RGB с указанием цвета в виде шестнадцатеричного кода по одному байту на цвет (по 256 оттенков)
        red = QColor('#f00')  # создание объекта цвета из класса моделей цветов с использованием
        # пространства RGB с указанием цвета в виде шестнадцатеричного кода по пол байта на канал (по 16 оттенков)
        white = QColor('white')  # создание объекта цвета из класса моделей цветов с указанием имени цвета из набора
        # цветов класса модели цвета
        painter.setPen(black)  # применение настроек цвета к перу рисовальщика
        painter.setBrush(QBrush(red))  # создание и применение кисти для заливки фигур к рисовальщику
        painter.drawRect(3, 3, 294, 294)  # рисование прямоугольника
        painter.setPen(yellow)
        painter.drawText(50, 50, 'Текст')
        painter.setBrush(QBrush(dark_blue))
        painter.drawRect(75, 75, 200, 200)
        painter.setPen(white)
        painter.drawLine(100, 100, 150, 150)


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла
