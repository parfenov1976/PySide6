"""
Работа с графикой. Вспомогательные классы. Класс QLine: линия

Класс QLine из модуля QtCore описывает координаты линии. Форматы конструктора класса:
QLine()
QLine(<Начальная точка QPoint>, <Конечная точка QPoint>)
QLine(<X1>, <Y1>, <Х2>, <У2>)
Первый формат создает линию, имеющую неустановленные местоположение и размеры.
В третьем формате координаты начальной и конечной точек указываются в виде
целочисленных значений.
Класс QLine поддерживает следующие основные методы (полный их список приведен на
странице https://doc.qt.io/qt-6/qline.html):
♦ isNull() - возвращает значение True, если начальная или конечная точка не установлены,
  и False - в противном случае;
♦ setPoints(<Начальная точка QPoint>, <Конечная точка QPoint>) - задает координаты
  начальной и конечной точек;
♦ setLine(<X1>, <Y1>, <Х2>, <У2>) - задает координаты начальной и конечной точек в
  виде целочисленных значений;
♦ setP1(<Точка QPoint>) - задает координаты начальной точки;

♦ setP2(<Точка QPoint>) - задает координаты конечной точки;
♦ p1() - возвращает координаты (объект класса QPoint) начальной точки;
♦ р2() - возвращает координаты (объект класса QPoint) конечной точки;
♦ center() - возвращает координаты (объект класса QPoint) центральной точки;
♦ x1(), y1(), х2() и у2() - возвращают значения отдельных составляющих координат
  начальной и конечной точек в виде целых чисел;
♦ dx() - возвращает горизонтальную составляющую вектора линии;
♦ dy() - возвращает вертикальную составляющую вектора линии.

ПРИМЕЧАНИЕ
Класс QLine предназначен для работы с целыми числами. Чтобы работать с вещественными
числами, необходимо использовать класс QLineF.
"""

from PySide6.QtWidgets import (QMainWindow,
                               )
from PySide6.QtGui import (QPainter,
                           QBrush,
                           QPen,
                           )
from PySide6.QtCore import (Qt,
                            QLine,
                            QPoint,
                            )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow

Импорт из модуля PySide6.QtGui класса пера QPen, класса инструментов для рисования QPainter,
класса кисти QBrush,

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt, класса линии QLine,
класса точки c координатами QPoint
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Класс объекта линии QLine')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера главного окна

    def paintEvent(self, event) -> None:
        """
        Обработчик события рисования
        :param event: событие рисования
        :return: None
        """
        painter = QPainter(self)  # создание объекта рисовальщика с подключением поверхности рисования
        black = Qt.GlobalColor.black  # создание объекта цвета из глобального перечислителя цветов
        white = Qt.GlobalColor.white  # создание объекта цвета из глобального перечислителя цветов
        red = Qt.GlobalColor.red  # создание объекта цвета из глобального перечислителя цветов
        painter.setPen(QPen(black))  # создание пера с настройками и установка пера в рисовальщик
        painter.setBrush(QBrush(white))  # создание и применение кисти для заливки фигур к рисовальщику
        painter.drawRect(3, 3, 294, 294)  # рисование прямоугольника
        painter.setPen(QPen(red, 5))  # установка настроек пера в рисовальщик

        line_1 = QLine(QPoint(20, 50), QPoint(280, 50))  # создание линии по объектам точек
        painter.drawLine(line_1)  # рисование линии

        line_2 = QLine(20, 100, 280, 100)  # создание линии по координатам
        painter.drawLine(line_2)

        print(line_1.p1(), line_1.p2())  # печать сведений о токах линии

        print(line_2.x1(), line_2.x2(), line_2.y1(), line_2.y2())  # печать координат точек линии


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла
