"""
Работа с графикой. Рисование линий и фигур

После захвата контекста рисования следует установить перо и кисть. С помощью пера производится
рисование точек, линий и контуров фигур, а с помощью кисти - заполнение
фона фигур. Установить перо позволяет метод setPen() класса QPainter. Форматы метода:
setPen(<Перо QPen>)
setPen(<Цвет QColor>)
setPen(<Стиль пера PenStyle>)
Для установки кисти предназначен метод setBrush(). Форматы метода:
setBrush(<Кисть QBrush>)
setBrush(<Стиль кисти BrushStyle>)
Устанавливать перо или кисть необходимо перед каждой операцией рисования, требующей
изменения цвета или стиля. Если перо или кисть не установлены, будут использоваться
объекты с настройками по умолчанию. После установки пера и кисти можно приступать
к рисованию точек, линий, фигур, текста и др.
Для рисования точек, линий и фигур класс QPainter предоставляет следующие наиболее
часто употребляемые методы (полный их список приведен на странице
https://doc.qt.io/qt-6/qpainter.html):
♦ drawPoint() - рисует точку. Форматы метода:
  drawPoint(<X>, <У>)
  drawPoint(<Координаты QPoint или QPointF>)
♦ drawPoints() - рисует несколько точек. Форматы метода:
  drawPoints(<Координаты QPoint 1>[, . . . , <Координаты QPoint N>])
  drawPoints(<Координаты QPointF 1>[, . . . , <Координаты QPointF N>])
  drawPoints(<Многоугольник QPolygon или QPolygonF>)
♦ drawLine() - рисует линию. Форматы метода:
  drawLine(<Линия QLine или QLineF>)
  drawLine(<Начальная точка QPoint>, <Конечная точка QPoint>)
  drawLine(<Начальная точка QPointF>, <Конечная точка QPointF>)
  drawLine(<X1>, <Y1>, <Х2>, <У2>)
♦ drawLines() - рисует несколько отдельных линий. Форматы метода:
  drawLines(<Пиния QLine 1>[, . . . , <Пиния QLine N>])
  drawLines(<Линия QLineF 1>[, . . . , <Пиния QLineF N>])
  drawLines(<Список с линиями QLineF>)
  drawLines(<Точка QPoint 1>[, . . . , <Точка QPoint N>])
  drawLines(<Точка QPointF 1>[, . . . , <Точка QPointF N>])
♦ drawPolyline() - рисует несколько линий, которые соединяют указанные точки. Первая
  и последняя точки не соединяются. Форматы метода:
  drawPolyline(<Точка QPoint 1>[, . . . , <Точка QPoint N>])
  drawPolyline(<Точка QPointF 1>[, . . . , <Точка QPointF N>])
  drawPolyline(<Многоугольник QPolygon или QPolygonF>)
♦ drawRect() - рисует прямоугольник с границей и заливкой. Чтобы убрать границу, следует
  использовать перо со стилем NoPen, а чтобы убрать заливку - кисть со стилем
  NoBrush. Форматы метода:
  drawRect(<X>, <У>, <Ширина>, <Высота>)
  drawRect(<Прямоугольник QRect или QRectF>)
♦ fillRect () - рисует прямоугольник с заливкой без границы. Форматы метода:
  fillRect(<X>, <У>, <Ширина>, <Высота>, <Заливка>)
  fillRect(<Прямоугольник QRect или QRectF>, <Заливка>)
  <Заливка> может быть задана объектами классов <QColor>, <QBrush>, в виде стиля кисти
  или элемента перечисления GlobalColor;
♦ drawRoundedRect() - рисует прямоугольник с границей, заливкой и скругленными
  краями. Форматы метода:
  drawRoundedRect(<X>, <У>, <Ширина>, <Высота>,
                  <Скругление по горизонтали>, <Скругление по вертикали> [,
                  mode=SizeMode.AbsoluteSize])
  drawRoundedRect(<Прямоугольник QRect или QRectF>,
                  <Скругление по горизонтали>, <Скругление по вертикали>[,
                  mode=SizeMode.AbsoluteSize])
  Параметры <Скругление по горизонтали> и <Скругление по вертикали> задают радиусы
  скругления углов по горизонтали и вертикали. Необязательный параметр mode указывает,
  в каких единицах измеряются радиусы скругления углов, и задается одним из следующих
  элементов перечисления SizeMode из модуля QtCore.Qt:
  • AbsoluteSize - радиусы указываются в пикселах;
  • RelativeSize - радиусы указываются в процентах от соответствующего размера рисуемого
    прямоугольника;
♦ drawPolygon() - рисует многоугольник с границей и заливкой. Форматы метода:
  drawPolygon(<Вершина QPoint 1>[, ..., <Вершина QPoint N>])
  drawPolygon(<Вершина QPointF 1>[, ..., <Вершина QPointF N>])
  drawPolygon(<Многоугольник QPolygon или QPolygonF>[,
              fillRule=FillRule.OddEvenFill])
  Необязательный параметр fillRule задает алгоритм определения, находится ли какая-либо
  точка внутри нарисованного многоугольника или вне его. В качестве его значения
  указывается атрибут OddEvenFill или WindingFill перечисления FillRule из модуля
  QtCore.Qt;
♦ drawEllipse() - рисует эллипс с границей и заливкой. Форматы метода:
  drawEllipse(<X>, <У>, <Ширина>, <Высота>)
  drawEllipse(<Прямоугольник QRect или QRectF>)
  drawEllipse(<Точка QPoint или QPointF>, <int rX>, <int rY>)
  В первых двух форматах указываются координаты и размеры прямоугольника, в который
  необходимо вписать эллипс. В последнем формате первый параметр задает координаты
  центра, параметр rx - радиус по оси х, а параметр rY - радиус по оси У;
♦ drawArc() - рисует дугу. Форматы метода:
  drawArc(<X>, <У>, <ШИрина>, <Высота>, <Начальный угол>, <Угол>)
  drawArc(<Прямоугольник QRect или QRectF>, <Начальный угол>, <Угол>)
  Значения углов задаются в значениях 1/16°. Полный круг эквивалентен значению
  5760 = 16 х 360. Нулевой угол находится в позиции «трех часов». Положительные значения
  углов отсчитываются против часовой стрелки, а отрицательные - по часовой
  стрелке;
♦ drawChord() - рисует замкнутую дугу. Аналогичен методу drawArc(), но соединяет
  крайние точки дуги прямой линией. Форматы метода:
  drawChord(<X>, <У>, <ШИрина>, <Высота>, <Начальный угол>, <Угол>)
  drawChord(<Прямоугольник QRect или QRectF>, <Начальный угол>, <Угол>)
♦ drawPie() - рисует замкнутый сектор. Аналогичен методу drawArc(), но соединяет
  крайние точки дуги с центром окружности. Форматы метода:
  drawPie(<X>, <У>, <ШИрина>, <Высота>, <Начальный угол>, <Угол>)
  drawPie(<Прямоугольник QRect или QRectF>, <Начальный угол>, <Угол>)
При выводе некоторых фигур (например, эллипса) контур может отображаться в виде
«лесенки». Чтобы сгладить контуры фигур, следует вызвать метод setRenderHint(<Режим
сглаживания>) и передать ему в качестве единственного параметра элемент Antialiasing
перечисления RenderHint из класса QPainter:
painter.setRenderHint(QtGui.QPainter.RenderHint.Antialiasing)
Если требуется отключить сглаживание, следует вызвать тот же метод, но передать ему
вторым параметром значение False:
painter.setRenderHint(QtGui.QPainter.RenderHint.Antialiasing, False)
"""

from PySide6.QtWidgets import (QMainWindow,
                               )
from PySide6.QtGui import (QPainter,
                           QBrush,
                           QPen,
                           )
from PySide6.QtCore import (Qt,
                            QLine,
                            QLineF,
                            QPoint,
                            QPointF,
                            )

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow

Импорт из модуля PySide6.QtGui класса пера QPen, класса инструментов для рисования QPainter,
класса кисти QBrush

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt, классов линий QLine и QLineF,
классов точек QPoint и QPointF,

"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Класс объекта шрифта QFont')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера главного окна

    def paintEvent(self, event) -> None:
        """
        Обработчик события рисования
        :param event: событие рисования
        :return: None
        """
        painter = QPainter(self)  # создание объекта рисовальщика с подключением поверхности рисования
        black = Qt.GlobalColor.black  # создание объекта цвета из глобального перечислителя цветов
        white = Qt.GlobalColor.white  # создание объекта цвета из глобального перечислителя цветов
        red = Qt.GlobalColor.red  # создание объекта цвета из глобального перечислителя цветов
        painter.setRenderHint(QPainter.RenderHint.Antialiasing)  # установка режима сглаживания лесенок
        painter.setPen(QPen(black))  # создание пера с настройками и установка пера в рисовальщик
        painter.setBrush(QBrush(white))  # создание и применение кисти для заливки фигур к рисовальщику
        painter.drawRect(3, 3, 294, 294)  # рисование прямоугольника

        # --== Рисование линии drawLine()
        painter.setPen(QPen(red, 4, s=Qt.PenStyle.SolidLine))  # установка настроек пера в рисовальщик
        painter.drawLine(QLine(20, 50, 280, 50))  # рисование линии
        painter.setPen(QPen(red, 4, s=Qt.PenStyle.DashLine))  # установка настроек пера в рисовальщик
        painter.drawLine(QLineF(20.0, 100.0, 280.0, 100.0))  # рисование линии
        painter.setPen(QPen(red, 4, s=Qt.PenStyle.DotLine))  # установка настроек пера в рисовальщик
        painter.drawLine(QPoint(20, 150), QPoint(280, 150))  # рисование линии
        painter.setPen(QPen(red, 4, s=Qt.PenStyle.DashDotLine))  # установка настроек пера в рисовальщик
        painter.drawLine(QPointF(20.0, 200.0), QPointF(280.0, 200.0))  # рисование линии
        painter.setPen(QPen(red, 4, s=Qt.PenStyle.DashDotDotLine))  # установка настроек пера в рисовальщик
        painter.drawLine(20, 250, 280, 250)  # рисование линии

        # TODO продолжить пример


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла
