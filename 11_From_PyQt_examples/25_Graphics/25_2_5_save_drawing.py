"""
Работа с графикой. Сохранение команд рисования в файл

Класс QPicture выполняет роль устройства для рисования с возможностью сохранения
команд рисования в файле специального формата для последующего вывода его на экран.
Иерархия наследования:
QPaintDevice - QPicture
Форматы конструктора класса:
<Объект> = QPicture([formatVersion=-1])
<Объект> = QPicture(<Исходный объект QPicture>)
Первый конструктор создает пустой рисунок. Необязательный параметр formatVersion
задает версию формата. Если параметр не указан, то используется формат, принятый в текущей
версии PyQt. Второй конструктор создает копию заданного объекта.
Для сохранения и загрузки рисунка предназначены следующие методы:
♦ save(<Путь к файлу>) - сохраняет рисунок в файле с указанным путем. Возвращает
значение True, если рисунок успешно сохранен, и False - в противном случае;
♦ load(<Путь к файлу>) - загружает рисунок из файла с указанным путем. Возвращает
значение True, если рисунок успешно загружен, и False - в противном случае.
Для вывода загруженного рисунка на устройство рисования по указанным координатам
предназначен метод drawPicture() класса QPainter. Форматы метода:
drawPicture(<X>, <Y>, <Изображение QPicture>)
drawPicture(<Координаты QPoint или QPointF>, <Изображение QPicture>)
Пример сохранения рисунка:
painter = QtGui.QPainter()
pic = QtGui.QPicture()
painter.begin(pic)
# Здесь что-то рисуем
painter.end()
pic.save(r'c:\book\pic.dat')
Пример вывода загруженного рисунка на поверхность компонента:
def paintEvent(self, е):
    painter = QtGui.QPainter(self)
    pic = QtGui.QPicture()
    pic.load(r'c:\book\pic.dat')
    painter.drawPicture(0, 0, pic)
"""

from PySide6.QtWidgets import (QMainWindow,
                               )
from PySide6.QtGui import (QPainter,
                           QBrush,
                           QPen,
                           QPicture,
                           )
from PySide6.QtCore import Qt

"""
Импорт из модуля PySide6.QtWidgets класса главных окон QMainWindow

Импорт из модуля PySide6.QtGui класса пера QPen, класса инструментов для рисования QPainter,
класса кисти QBrush, класс объекта трансформаций QTransform

Импорт из модуля PySide6.QtCore класса перечислителя настроек виджетов Qt
"""


class MainWindow(QMainWindow):
    """
    Класс главного окна приложения от супер класса главных окон
    """

    def __init__(self, parent=None) -> None:
        """
        Конструктор главного окна приложения
        :param parent: ссылка на родительский объект
        """
        QMainWindow.__init__(self, parent)  # явный вызов конструктора родительского класса
        self.setWindowTitle('Сохранение рисования в файл')  # установка заголовка главного окна
        self.resize(300, 300)  # установка исходного размера главного окна

        painter = QPainter(self)  # создание объекта рисовальщика с подключением поверхности рисования
        pic = QPicture()  # создание объекта для хранения команд рисования
        painter.begin(pic)  # начало записи команд рисования
        black = Qt.GlobalColor.black  # создание объекта цвета из глобального перечислителя цветов
        white = Qt.GlobalColor.white  # создание объекта цвета из глобального перечислителя цветов
        red = Qt.GlobalColor.red  # создание объекта цвета из глобального перечислителя цветов
        painter.setPen(QPen(black, 5))  # настройка пера рисовальщика
        painter.setBrush(QBrush(white))  # настройка кисти рисовальщика
        painter.drawRect(3, 3, 294, 294)  # рисование прямоугольника
        painter.setPen(QPen(red, 1))  # установка настроек пера
        painter.drawLine(10, 10, 290, 290)  # рисование линии
        painter.end()  # завершение записи команд рисования
        pic.save('pic.dat')  # сохранение объекта команд рисования в файл

    def paintEvent(self, event) -> None:
        """
        Обработчик события рисования
        :param event: событие рисования
        :return: None
        """
        painter = QPainter(self)  # создание объекта рисовальщика с подключением поверхности рисования
        pic = QPicture()  # создание объекта для хранения команд рисования
        pic.load('pic.dat')  # загрузка команд рисования из файла
        painter.drawPicture(0, 0, pic)  # вывод команд рисования в область рисования


if __name__ == '__main__':  # проверка условия запуска для предотвращения исполнения
    # кода верхнего уровня при импортировании данного файла как модуля
    from PySide6.QtWidgets import QApplication
    import sys

    """
    Импорт из модуля PySide6.QtWidgets класса управления приложением QApplication
    Импорт модуля sys, предоставляющего доступ к объекта интерпретатора, нужен для доступа
    к аргументам командной строки. Если использование аргументов командной строки не предполагается,
    то импорт можно не выполнять. При этом, при создании приложения в класс QtWidgets.QApplication([])
    в качестве аргумента передается пустой.
    """
    app = QApplication(sys.argv)  # создание основного цикла событий приложения
    app.setStyle('Fusion')  # установка более красивого стиля оформления графического интерфейса
    window = MainWindow()  # создание главного окна приложения
    window.show()  # включение видимости окна, по умолчанию окно спрятано
    sys.exit(app.exec())  # Запуск основного цикла событий приложения.
    # Код ниже метода запуска цикла событий не будет достигнут и выполнен пока не будет выполнен
    # выход и цикл событий не будет остановлен. Не обязательно оборачивать запуск цикла
